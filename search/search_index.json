{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Get Started With PayFort PayFort helps you to build a robust payment system for your merchant site. With the help of PayFort you can collect payment information conveniently and securely. It offers your customer the choice to pay in multiple currencies. Your customers can also select from available payment methods such as 3D secure, Apple Pay, Visa Checkout or MasterPass. You can get started with PayFort by visiting this link PayFort offers you two approaches for integrations with your merchant site as mentioned below: By using PayFort iFrame By developing your own custom payment form PayFort Payment Features With PayFort You need not redirect your customers to third party website for payment and they will be able to pay on the payment page of your website. You are no longer required to get your website PCI-Compliant. Since PayFort is PCI-DSS compliant it means your business transactions will be PCI-Compliant automatically. It offers payment solutions for various shopping cart applications including your own in house shopping cart application. \u200b Figure 1 \u200b Shopping cart applications supported by PayFort Using PayFort iFrame PayFort iFrame helps you to create a customizable payment form. It gives the customer freedom to provide their payment details on your site's checkout page or in your mobile based app. Once the details are entered PayFort generates a secure single use token through tokenization process. This token can be used to request a payment without the need to store any customer's payment information in your site. PayFort processes the transaction and returns the results back to the your site through invisible redirection. check out iframe for web here Using Custom Payment Form You can also design and develop your own custom for for collecting the card details. The card details are sent directly to PayFort and substituted with Token. You can then use this Token to complete the transaction. custom payment form Get Started With Testing If you have developed your payment page then you can proceed with creating a testing account from this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Get Started With PayFort"},{"location":"#get-started-with-payfort","text":"PayFort helps you to build a robust payment system for your merchant site. With the help of PayFort you can collect payment information conveniently and securely. It offers your customer the choice to pay in multiple currencies. Your customers can also select from available payment methods such as 3D secure, Apple Pay, Visa Checkout or MasterPass. You can get started with PayFort by visiting this link PayFort offers you two approaches for integrations with your merchant site as mentioned below: By using PayFort iFrame By developing your own custom payment form","title":"Get Started With PayFort"},{"location":"#payfort-payment-features","text":"With PayFort You need not redirect your customers to third party website for payment and they will be able to pay on the payment page of your website. You are no longer required to get your website PCI-Compliant. Since PayFort is PCI-DSS compliant it means your business transactions will be PCI-Compliant automatically. It offers payment solutions for various shopping cart applications including your own in house shopping cart application. \u200b Figure 1 \u200b Shopping cart applications supported by PayFort","title":"PayFort Payment Features"},{"location":"#using-payfort-iframe","text":"PayFort iFrame helps you to create a customizable payment form. It gives the customer freedom to provide their payment details on your site's checkout page or in your mobile based app. Once the details are entered PayFort generates a secure single use token through tokenization process. This token can be used to request a payment without the need to store any customer's payment information in your site. PayFort processes the transaction and returns the results back to the your site through invisible redirection. check out iframe for web here","title":"Using PayFort iFrame"},{"location":"#using-custom-payment-form","text":"You can also design and develop your own custom for for collecting the card details. The card details are sent directly to PayFort and substituted with Token. You can then use this Token to complete the transaction. custom payment form","title":"Using Custom Payment Form"},{"location":"#get-started-with-testing","text":"If you have developed your payment page then you can proceed with creating a testing account from this link","title":"Get Started With Testing"},{"location":"#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"androidsdk/","text":"Integrate Android SDK To process a transaction using the FORT Mobile SDK, create a Mobile SDK Token and proceed through the following sections. About the Software Supported Platforms The FORT Mobile SDK supports all devices running Android 4.1.x (API level 16). ICE CREAM SANDWICH or higher are supported. This release supports Android Pie API 28. Localization The FORT Mobile SDK supports both English and Arabic languages. Screen Orientation Portrait is the only orientation supported within the FORT Mobile SDK. Supported Payment Methods Through the first version of the FORT Mobile SDK, the Merchant has the ability to process a CREDIT CARD transactions only. Supported Payment Options The supported credit card payment options are VISA , MASTERCARD , American Express (AMEX) , MADA and MEEZA . IDE Configurations To start using the FORT Mobile SDK, Please follow the steps: Download the SDK and extract the SDK. The folder contains Dependencies , Res and FORTSDKv1.5.aar-release . Dependencies folder includes: Eclipse folder : .jar files for the SDK dependencies. LINKS_README text file that contains a list for sources of the above jars and a list of required libraries to be added as dependencies as well (Manual configuration). AndroidStudio_gradle text file which adds the compile command for what your project does not include. Res folder : Layout Layout-ar FORTSDKv1.5.aar-release Please make sure to read our notes according to the IDE you are using whether it\u2019s the Android Studio or Eclipse. Android Studio To continue the integration, please proceed with the following steps: Go to File \u2192 New \u2192 New Module. Select \u201cImport .JAR/.AAR Package\u201d and click next. Enter the path to .aar file and click finish. Browse to the dependencies folder and open the \u201cAndroidStudio_gradle\u201d text file. Copy and paste the implementation/ api lines that are NOT already supported in your dependency block. (All listed dependencies are required). Click the \u201cSync the project with gradle files\u201d button. Clean the project. The SDK is now ready for your use. Eclipse The integration will include two main steps. For the first step, you need to create a library project by following the below steps: Create a new project (from this time it\u2019s called \u201clibrary project\u201d) in your workspace. Do not forget to mark it as library. Clear the src folder of the library project. Unzip the .aar file. You can rename it to zip and then unzip it or use any tool. Copy the classes.jar file to libs folder on the library project. Replace the res folder on library project with the res folder of the .aar file. Project Configuration The project you have created contains almost everything you need. Now let\u2019s start configuring your project to reference this library project by following the below points: In the target project, use the library created in step one (mentioned above) as a dependency. Open the AndroidManifest.xml file inside .aar file and make sure to copy everything it takes (permissions, activities, services, receivers \u2026) in the AndroidManifest.xml file of the target project. Copy the entire contents (if any) inside the assets folder of the .aar file to the assets folder of the target project. Copy the entire contents (if any) inside the libs folder of the .aar file to the libs folder of the target project. Open the dependencies file \u2192 Eclipse, then copy all .jar files and add them to the libs folder of the target project. Check if your target project has the project dependencies included in the LINKS_README text file under the LINKS_README text file under the libraries (Projects/aar). Otherwise use the links included in the previously mentioned file and add them as a dependency project on your target project. Clean and rebuild your target project. OS Permissions The FORT Mobile SDK requires the following permissions to work properly: <uses-permission android:name=\"android.permission.INTERNET\"/> <uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/> Using the FORT Mobile SDK Collect the FORT Mobile SDK Request Please take a look at the Java model/ bean of the FORT Mobile SDK request below. // FORT Mobile SDK request public class FortRequest implements Serializable{ private Map<String, Object> requestMap; private boolean showResponsePage; public Map<String, Object> getRequestMap() { return requestMap; } public void setRequestMap(Map<String, Object> requestMap) { this.requestMap = requestMap; } public boolean isShowResponsePage() { return showResponsePage; } public void setShowResponsePage(boolean showResponsePage) { this.showResponsePage = showResponsePage; } } The following are the Mobile SDK Call Parameters: The \u201crequestMap\u201d must contain all the FORT parameters of the order/ transaction. \u201cshowResponsePage\u201d is the Boolean field where you can determine if you want the FORT response page to be displayed or not. Define a Callback Manager Define and initialize an instance of the FortCallBackManager in your activity as shown below: // FORT Callback Manager Instance private FortCallBackManager fortCallback = null; fortCallback = FortCallback.Factory.create(); Attach the Callback to the Activity You need to add the statement that appears below to the onActivityResult function. //Callback Statement @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); fortCallback.onActivityResult(requestCode,resultCode,data); } Call the FORT Mobile SDK For every transaction that needs to be processed, do the call as shown below and handle the callback methods upon your business flow. The FORT Mobile SDK Call registers a new callback for a new request. The registerCallBack requires the inputs as shown below. //FORT Mobile SDK Call FortSdk.getInstance().registerCallback(this,fortRequest,5, fortCallback, showLoading, new FortInterfaces.OnTnxProcessed() { @Override public void onCancel(Map<String, Object> requestParamsMap,Map<String, Object> responseMap) { //TODO: handle me } @Override public void onSuccess(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me } @Override public void onFailure(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me } @Override public void onSuccess(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me } }); Register Callback Request //The registerCallBack Request public void registerCallback( Activity context, final FortRequest fortRequest, String environment, final int requestCode, final FortCallBackManager callbackManager, boolean showLoading, final FortInterfaces.OnTnxProcessed callback) Call the Fort SDK Function //FortSDK function String device_id = FortSdk.getDeviceId(this); FORT Mobile SDK Device ID Value Please Make sure to use the FortSDK function as shown above to generate the device_id parameter value that must be used for creating the sdk_token from your business security server. The Merchant can choose to display the FORT response page by passing \u201cshowResponsePage\u201d value as \u201cTrue\u201d. Customizing the Mobile SDK Payment Layout We provide you with the res folder that includes the source code of the pages in order to customize the design, themes, etc. You can customize both English and Arabic layouts as needed. However, please take the following tips into consideration: Don\u2019t change the layout name because it\u2019s considered an override process. Make sure to use all the views that has the ID property in order to avoid the NullPointerException. Redesign the view for portrait orientation. Note that Landscape orientation isn\u2019t supported. You can support as much layout densities as you want. Don\u2019t forget to redesign the layout-ar file too (right-to-left). Don\u2019t change, rename, or remove onClick functions. Our Mobile SDK v 1.5 consists one of the following three main activities design: activity_cc_payment.xml activity_cc_response.xml activity_init_secure_conn Every file is available for both English and Arabic alignments; layout and layout-ar. The files Hierarchy and Content might change in our SDK\u2019s future versions. Design Customization Codes: The following code was used to customize the way the \u201cAmount\u201d is displayed in the Standard Mobile SDK Payment Page: <TextView android:id=\u201c@+id/amountTV\u201d android:layout_width=\u201cmatch_parent\u201d android:layout_height=\u201c@dimen/pf_payment_type_header_height\u201d android:background=\u201c@color/pf_light_gray\u201d android:gravity=\u201ccenter_horizontal|center_vertical\u201d android:textColor=\u201c@android:color/black\u201d android:textSize=\u201c@dimen/pf_15_txt_size\u201d /> The following code is used to customize the way the \u201cAmount\u201d is displayed in the Customized Mobile SDK Payment Page: LinearLayout android:layout_width=\u201cmatch_parent\u201d android:layout_height=\u201cwrap_content\u201d android:orientation=\u201chorizontal\u201d android:padding=\u201c10dp\u201d android:background=\u201c@android:color/white\u201d> <ImageView android:layout_width=\u201c40dp\u201d android:layout_height=\u201c40dp\u201d android:src=\u201c@drawable/merchant_logo\u201d/> <TextView android:fontFamily=\u201csans-serif-medium\u201d android:text=\u201cMerchant name\u201d android:layout_margin=\u201c10dp\u201d android:textColor=\u201c@android:color/holo_blue_dark\u201d android:layout_width=\u201cwrap_content\u201d android:layout_gravity=\u201ccenter_vertical\u201d android:layout_height=\u201cwrap_content\u201d android:src=\u201c@drawable/merchant_logo\u201d/> <TextView android:id=\u201c@+id/amountTV\u201d android:layout_width=\u201cmatch_parent\u201d android:layout_height=\u201c@dimen/pf_payment_type_header_height\u201d android:gravity=\u201cright|center_vertical\u201d android:textColor=\u201c@android:color/black\u201d android:text=\u201c100 UDS\u201d android:textSize=\u201c@dimen/pf_15_txt_size\u201d /> </LinearLayout> As appears in the previous codes, elements with IDs haven\u2019t been changed in type or removed. For example: android:id=\u201c@+id/amountTV\u201d. We were able to add static elements such as: ImageView element that contains the Merchant\u2019s logo, and TextView that contains the Merchant\u2019s name. To sum up, you can add any static elements or redesign the view, while keeping the views\u2019 elements used in the Standard layout that hold IDs. Make sure to retest your custom design, for example, by showing the error messages on fields and applying the changes to the Arabic layout. (Refer to the points mentioned under the **Customizing the Mobile SDK Payment Layout** section). The customized XML file should be added to the layout file in the target project (Merchant Application) to override the SDK file. FORT Android SDK \u2013 Device ID permission This section helps the developers to understand the need and usage of the permission requested by the FORT Payment SDK to generate a unique device ID. You might not face this issue through your payment flow. It depends on the time you are requesting the getDeviceID function and ask about the permission for the first time. A part of the FORT mobile SDK flow is to get a unique ID for the device. Generating the ID based on more than one input (collecting as much as possible will lead to a real unique ID). The Telephone manager is one of these sources. Accessing the Telephone manager need the use of \u2018android.permission.READ_PHONE_STATE\u2019 permission. According to Android that\u2019s a dangerous permission to be used. Getting the needed permission through the flow on the case of getting the client granted that will produce a miss match device ID on the 1st SDK call. To avoid the mismatch flow we are suggesting you the following solutions: Handle the 1st SDK call in the onActivityResults(). Since The FORT SDK is a module running within the main application context the requested permission response will be returned to the merchant context. Once the activity that called geDeviceId for the 1st received a call-back in the onActivityResult() with request code = 222 you can for sure starts the payment flow of creating an SDK token and calling the SDK afterwards. Call getDeviceID on a previous activity or in your application class to make sure that the permission request was triggered before you reach the payment step. Sample Code public class PayFortSdkSample extends Activity { private FortCallBackManager fortCallback = null; String deviceId = \u201c\u201d, sdkToken = \u201c\u201d; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // create Fort callback instance fortCallback = FortCallback.Factory.create(); // Generating deviceId deviceId = FortSdk.getDeviceId(PayFortSdkSample.this); Log.d(\u201cDeviceId \u201d, deviceId); // prepare payment request FortRequest fortrequest = new FortRequest(); fortrequest.setRequestMap(collectRequestMap(\u201cPASS_THE_GENERATED_SDK_TOKEN_ HERE\u201d)); fortrequest.setShowResponsePage(true); // to [display/use] the SDK response page // execute payment request callSdk(fortrequest); } private Map<String, Object> collectRequestMap(String sdkToken) { Map<String, Object> requestMap = new HashMap<>(); requestMap.put(\u201ccommand\u201d, \u201cPURCHASE\u201d); requestMap.put(\u201ccustomer_email\u201d, \u201cSam@gmail.com\u201d); requestMap.put(\u201ccurrency\u201d, \u201cSAR\u201d); requestMap.put(\u201camount\u201d, \u201c100\u201d); requestMap.put(\u201clanguage\u201d, \u201cen\u201d); requestMap.put(\u201cmerchant_reference\u201d, \u201cORD-0000007682\u201d); requestMap.put(\u201ccustomer_name\u201d, \u201cSam\u201d); requestMap.put(\u201ccustomer_ip\u201d, \u201c172.150.16.10\u201d); requestMap.put(\u201cpayment_option\u201d, \u201cVISA\u201d); requestMap.put(\u201ceci\u201d, \u201cECOMMERCE\u201d); requestMap.put(\u201corder_description\u201d, \u201cDESCRIPTION\u201d); requestMap.put(\u201csdk_token\u201d, sdkToken); return requestMap; } private void callSdk(FortRequest fortrequest) { try { FortSdk.getInstance().registerCallback(PayFortSdkSample.this, fortrequest, FortSdk.ENVIRONMENT.TEST, 5, fortCallback, new FortInterfaces.OnTnxProcessed() { @Override public void onCancel(Map<String, Object> requestParamsMap, Map<String, Object> responseMap) { //TODO: handle me Log.d(\u201cCancelled \u201d, responseMap.toString()); } @Override public void onSuccess(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me Log.i(\u201cSuccess \u201d, fortResponseMap.toString()); } @Override public void onFailure(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me Log.e(\u201cFailure \u201d, fortResponseMap.toString()); } }); } catch (Exception e) { Log.e(\u201cexecute Payment\u201d, \u201ccall FortSdk\u201d, e); } } @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); fortCallback.onActivityResult(requestCode, resultCode, data); } Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Integrate Android SDK"},{"location":"androidsdk/#integrate-android-sdk","text":"To process a transaction using the FORT Mobile SDK, create a Mobile SDK Token and proceed through the following sections.","title":"Integrate Android SDK"},{"location":"androidsdk/#about-the-software","text":"","title":"About the Software"},{"location":"androidsdk/#supported-platforms","text":"The FORT Mobile SDK supports all devices running Android 4.1.x (API level 16). ICE CREAM SANDWICH or higher are supported. This release supports Android Pie API 28.","title":"Supported Platforms"},{"location":"androidsdk/#localization","text":"The FORT Mobile SDK supports both English and Arabic languages.","title":"Localization"},{"location":"androidsdk/#screen-orientation","text":"Portrait is the only orientation supported within the FORT Mobile SDK.","title":"Screen Orientation"},{"location":"androidsdk/#supported-payment-methods","text":"Through the first version of the FORT Mobile SDK, the Merchant has the ability to process a CREDIT CARD transactions only.","title":"Supported Payment Methods"},{"location":"androidsdk/#supported-payment-options","text":"The supported credit card payment options are VISA , MASTERCARD , American Express (AMEX) , MADA and MEEZA .","title":"Supported Payment Options"},{"location":"androidsdk/#ide-configurations","text":"To start using the FORT Mobile SDK, Please follow the steps: Download the SDK and extract the SDK. The folder contains Dependencies , Res and FORTSDKv1.5.aar-release . Dependencies folder includes: Eclipse folder : .jar files for the SDK dependencies. LINKS_README text file that contains a list for sources of the above jars and a list of required libraries to be added as dependencies as well (Manual configuration). AndroidStudio_gradle text file which adds the compile command for what your project does not include. Res folder : Layout Layout-ar FORTSDKv1.5.aar-release Please make sure to read our notes according to the IDE you are using whether it\u2019s the Android Studio or Eclipse.","title":"IDE Configurations"},{"location":"androidsdk/#android-studio","text":"To continue the integration, please proceed with the following steps: Go to File \u2192 New \u2192 New Module. Select \u201cImport .JAR/.AAR Package\u201d and click next. Enter the path to .aar file and click finish. Browse to the dependencies folder and open the \u201cAndroidStudio_gradle\u201d text file. Copy and paste the implementation/ api lines that are NOT already supported in your dependency block. (All listed dependencies are required). Click the \u201cSync the project with gradle files\u201d button. Clean the project. The SDK is now ready for your use.","title":"Android Studio"},{"location":"androidsdk/#eclipse","text":"The integration will include two main steps. For the first step, you need to create a library project by following the below steps: Create a new project (from this time it\u2019s called \u201clibrary project\u201d) in your workspace. Do not forget to mark it as library. Clear the src folder of the library project. Unzip the .aar file. You can rename it to zip and then unzip it or use any tool. Copy the classes.jar file to libs folder on the library project. Replace the res folder on library project with the res folder of the .aar file.","title":"Eclipse"},{"location":"androidsdk/#project-configuration","text":"The project you have created contains almost everything you need. Now let\u2019s start configuring your project to reference this library project by following the below points: In the target project, use the library created in step one (mentioned above) as a dependency. Open the AndroidManifest.xml file inside .aar file and make sure to copy everything it takes (permissions, activities, services, receivers \u2026) in the AndroidManifest.xml file of the target project. Copy the entire contents (if any) inside the assets folder of the .aar file to the assets folder of the target project. Copy the entire contents (if any) inside the libs folder of the .aar file to the libs folder of the target project. Open the dependencies file \u2192 Eclipse, then copy all .jar files and add them to the libs folder of the target project. Check if your target project has the project dependencies included in the LINKS_README text file under the LINKS_README text file under the libraries (Projects/aar). Otherwise use the links included in the previously mentioned file and add them as a dependency project on your target project. Clean and rebuild your target project.","title":"Project Configuration"},{"location":"androidsdk/#os-permissions","text":"The FORT Mobile SDK requires the following permissions to work properly: <uses-permission android:name=\"android.permission.INTERNET\"/> <uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>","title":"OS Permissions"},{"location":"androidsdk/#using-the-fort-mobile-sdk","text":"","title":"Using the FORT Mobile SDK"},{"location":"androidsdk/#collect-the-fort-mobile-sdk-request","text":"Please take a look at the Java model/ bean of the FORT Mobile SDK request below. // FORT Mobile SDK request public class FortRequest implements Serializable{ private Map<String, Object> requestMap; private boolean showResponsePage; public Map<String, Object> getRequestMap() { return requestMap; } public void setRequestMap(Map<String, Object> requestMap) { this.requestMap = requestMap; } public boolean isShowResponsePage() { return showResponsePage; } public void setShowResponsePage(boolean showResponsePage) { this.showResponsePage = showResponsePage; } } The following are the Mobile SDK Call Parameters: The \u201crequestMap\u201d must contain all the FORT parameters of the order/ transaction. \u201cshowResponsePage\u201d is the Boolean field where you can determine if you want the FORT response page to be displayed or not.","title":"Collect the FORT Mobile SDK Request"},{"location":"androidsdk/#define-a-callback-manager","text":"Define and initialize an instance of the FortCallBackManager in your activity as shown below: // FORT Callback Manager Instance private FortCallBackManager fortCallback = null; fortCallback = FortCallback.Factory.create();","title":"Define a Callback Manager"},{"location":"androidsdk/#attach-the-callback-to-the-activity","text":"You need to add the statement that appears below to the onActivityResult function. //Callback Statement @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); fortCallback.onActivityResult(requestCode,resultCode,data); }","title":"Attach the Callback to the Activity"},{"location":"androidsdk/#call-the-fort-mobile-sdk","text":"For every transaction that needs to be processed, do the call as shown below and handle the callback methods upon your business flow. The FORT Mobile SDK Call registers a new callback for a new request. The registerCallBack requires the inputs as shown below. //FORT Mobile SDK Call FortSdk.getInstance().registerCallback(this,fortRequest,5, fortCallback, showLoading, new FortInterfaces.OnTnxProcessed() { @Override public void onCancel(Map<String, Object> requestParamsMap,Map<String, Object> responseMap) { //TODO: handle me } @Override public void onSuccess(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me } @Override public void onFailure(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me } @Override public void onSuccess(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me } });","title":"Call the FORT Mobile SDK"},{"location":"androidsdk/#register-callback-request","text":"//The registerCallBack Request public void registerCallback( Activity context, final FortRequest fortRequest, String environment, final int requestCode, final FortCallBackManager callbackManager, boolean showLoading, final FortInterfaces.OnTnxProcessed callback)","title":"Register Callback Request"},{"location":"androidsdk/#call-the-fort-sdk-function","text":"//FortSDK function String device_id = FortSdk.getDeviceId(this);","title":"Call the Fort SDK Function"},{"location":"androidsdk/#fort-mobile-sdk-device-id-value","text":"Please Make sure to use the FortSDK function as shown above to generate the device_id parameter value that must be used for creating the sdk_token from your business security server. The Merchant can choose to display the FORT response page by passing \u201cshowResponsePage\u201d value as \u201cTrue\u201d.","title":"FORT Mobile SDK Device ID Value"},{"location":"androidsdk/#customizing-the-mobile-sdk-payment-layout","text":"We provide you with the res folder that includes the source code of the pages in order to customize the design, themes, etc. You can customize both English and Arabic layouts as needed. However, please take the following tips into consideration: Don\u2019t change the layout name because it\u2019s considered an override process. Make sure to use all the views that has the ID property in order to avoid the NullPointerException. Redesign the view for portrait orientation. Note that Landscape orientation isn\u2019t supported. You can support as much layout densities as you want. Don\u2019t forget to redesign the layout-ar file too (right-to-left). Don\u2019t change, rename, or remove onClick functions. Our Mobile SDK v 1.5 consists one of the following three main activities design: activity_cc_payment.xml activity_cc_response.xml activity_init_secure_conn Every file is available for both English and Arabic alignments; layout and layout-ar. The files Hierarchy and Content might change in our SDK\u2019s future versions. Design Customization Codes: The following code was used to customize the way the \u201cAmount\u201d is displayed in the Standard Mobile SDK Payment Page: <TextView android:id=\u201c@+id/amountTV\u201d android:layout_width=\u201cmatch_parent\u201d android:layout_height=\u201c@dimen/pf_payment_type_header_height\u201d android:background=\u201c@color/pf_light_gray\u201d android:gravity=\u201ccenter_horizontal|center_vertical\u201d android:textColor=\u201c@android:color/black\u201d android:textSize=\u201c@dimen/pf_15_txt_size\u201d /> The following code is used to customize the way the \u201cAmount\u201d is displayed in the Customized Mobile SDK Payment Page: LinearLayout android:layout_width=\u201cmatch_parent\u201d android:layout_height=\u201cwrap_content\u201d android:orientation=\u201chorizontal\u201d android:padding=\u201c10dp\u201d android:background=\u201c@android:color/white\u201d> <ImageView android:layout_width=\u201c40dp\u201d android:layout_height=\u201c40dp\u201d android:src=\u201c@drawable/merchant_logo\u201d/> <TextView android:fontFamily=\u201csans-serif-medium\u201d android:text=\u201cMerchant name\u201d android:layout_margin=\u201c10dp\u201d android:textColor=\u201c@android:color/holo_blue_dark\u201d android:layout_width=\u201cwrap_content\u201d android:layout_gravity=\u201ccenter_vertical\u201d android:layout_height=\u201cwrap_content\u201d android:src=\u201c@drawable/merchant_logo\u201d/> <TextView android:id=\u201c@+id/amountTV\u201d android:layout_width=\u201cmatch_parent\u201d android:layout_height=\u201c@dimen/pf_payment_type_header_height\u201d android:gravity=\u201cright|center_vertical\u201d android:textColor=\u201c@android:color/black\u201d android:text=\u201c100 UDS\u201d android:textSize=\u201c@dimen/pf_15_txt_size\u201d /> </LinearLayout> As appears in the previous codes, elements with IDs haven\u2019t been changed in type or removed. For example: android:id=\u201c@+id/amountTV\u201d. We were able to add static elements such as: ImageView element that contains the Merchant\u2019s logo, and TextView that contains the Merchant\u2019s name. To sum up, you can add any static elements or redesign the view, while keeping the views\u2019 elements used in the Standard layout that hold IDs. Make sure to retest your custom design, for example, by showing the error messages on fields and applying the changes to the Arabic layout. (Refer to the points mentioned under the **Customizing the Mobile SDK Payment Layout** section). The customized XML file should be added to the layout file in the target project (Merchant Application) to override the SDK file.","title":"Customizing the Mobile SDK Payment Layout"},{"location":"androidsdk/#fort-android-sdk-device-id-permission","text":"This section helps the developers to understand the need and usage of the permission requested by the FORT Payment SDK to generate a unique device ID. You might not face this issue through your payment flow. It depends on the time you are requesting the getDeviceID function and ask about the permission for the first time. A part of the FORT mobile SDK flow is to get a unique ID for the device. Generating the ID based on more than one input (collecting as much as possible will lead to a real unique ID). The Telephone manager is one of these sources. Accessing the Telephone manager need the use of \u2018android.permission.READ_PHONE_STATE\u2019 permission. According to Android that\u2019s a dangerous permission to be used. Getting the needed permission through the flow on the case of getting the client granted that will produce a miss match device ID on the 1st SDK call. To avoid the mismatch flow we are suggesting you the following solutions: Handle the 1st SDK call in the onActivityResults(). Since The FORT SDK is a module running within the main application context the requested permission response will be returned to the merchant context. Once the activity that called geDeviceId for the 1st received a call-back in the onActivityResult() with request code = 222 you can for sure starts the payment flow of creating an SDK token and calling the SDK afterwards. Call getDeviceID on a previous activity or in your application class to make sure that the permission request was triggered before you reach the payment step. Sample Code public class PayFortSdkSample extends Activity { private FortCallBackManager fortCallback = null; String deviceId = \u201c\u201d, sdkToken = \u201c\u201d; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // create Fort callback instance fortCallback = FortCallback.Factory.create(); // Generating deviceId deviceId = FortSdk.getDeviceId(PayFortSdkSample.this); Log.d(\u201cDeviceId \u201d, deviceId); // prepare payment request FortRequest fortrequest = new FortRequest(); fortrequest.setRequestMap(collectRequestMap(\u201cPASS_THE_GENERATED_SDK_TOKEN_ HERE\u201d)); fortrequest.setShowResponsePage(true); // to [display/use] the SDK response page // execute payment request callSdk(fortrequest); } private Map<String, Object> collectRequestMap(String sdkToken) { Map<String, Object> requestMap = new HashMap<>(); requestMap.put(\u201ccommand\u201d, \u201cPURCHASE\u201d); requestMap.put(\u201ccustomer_email\u201d, \u201cSam@gmail.com\u201d); requestMap.put(\u201ccurrency\u201d, \u201cSAR\u201d); requestMap.put(\u201camount\u201d, \u201c100\u201d); requestMap.put(\u201clanguage\u201d, \u201cen\u201d); requestMap.put(\u201cmerchant_reference\u201d, \u201cORD-0000007682\u201d); requestMap.put(\u201ccustomer_name\u201d, \u201cSam\u201d); requestMap.put(\u201ccustomer_ip\u201d, \u201c172.150.16.10\u201d); requestMap.put(\u201cpayment_option\u201d, \u201cVISA\u201d); requestMap.put(\u201ceci\u201d, \u201cECOMMERCE\u201d); requestMap.put(\u201corder_description\u201d, \u201cDESCRIPTION\u201d); requestMap.put(\u201csdk_token\u201d, sdkToken); return requestMap; } private void callSdk(FortRequest fortrequest) { try { FortSdk.getInstance().registerCallback(PayFortSdkSample.this, fortrequest, FortSdk.ENVIRONMENT.TEST, 5, fortCallback, new FortInterfaces.OnTnxProcessed() { @Override public void onCancel(Map<String, Object> requestParamsMap, Map<String, Object> responseMap) { //TODO: handle me Log.d(\u201cCancelled \u201d, responseMap.toString()); } @Override public void onSuccess(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me Log.i(\u201cSuccess \u201d, fortResponseMap.toString()); } @Override public void onFailure(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me Log.e(\u201cFailure \u201d, fortResponseMap.toString()); } }); } catch (Exception e) { Log.e(\u201cexecute Payment\u201d, \u201ccall FortSdk\u201d, e); } } @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); fortCallback.onActivityResult(requestCode, resultCode, data); }","title":"FORT Android SDK \u2013 Device ID permission"},{"location":"androidsdk/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"androidsdk/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"capturepayment/","text":"Capture a payment This operation that allows you to capture the authorized amount to your account. The capture could be partial or full depends on your requirements and request. The request Use the details below to set up your request. Endpoints Live POST https://paymentservices.payfort.com/FortAPI/paymentApi Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi You can send \u201cmerchant_reference\u201d and/ or \u201cfort_id\u201d in the CAPTURE request. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response even the optional ones. Request example { 'command':'CAPTURE', 'access_code':'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier':'CycHZxVj', 'merchant_reference':'XYZ9239-yu898', 'amount':'10000', 'currency':'AED', 'language':'en', 'fort_id':'149295435400084008', 'signature':'7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'order_description':'iPhone 6-S', }; The response If you receive response code 20064 with status code 04 then your request to capture a payment has been accepted by the PayFort Server. Response examples {\"command\":\"CAPTURE\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239-yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"fort_id\":\"149295435400084008\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone 6-S\", \"response_message\":\"Success\", \"response_code\":\"20064\", status\":\"04\" } You can check out various transaction codes by visiting this link Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Capture Payment"},{"location":"capturepayment/#capture-a-payment","text":"This operation that allows you to capture the authorized amount to your account. The capture could be partial or full depends on your requirements and request.","title":"Capture a payment"},{"location":"capturepayment/#the-request","text":"Use the details below to set up your request.","title":"The request"},{"location":"capturepayment/#endpoints","text":"","title":"Endpoints"},{"location":"capturepayment/#live","text":"POST https://paymentservices.payfort.com/FortAPI/paymentApi","title":"Live"},{"location":"capturepayment/#sandbox","text":"POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi You can send \u201cmerchant_reference\u201d and/ or \u201cfort_id\u201d in the CAPTURE request. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response even the optional ones.","title":"Sandbox"},{"location":"capturepayment/#request-example","text":"{ 'command':'CAPTURE', 'access_code':'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier':'CycHZxVj', 'merchant_reference':'XYZ9239-yu898', 'amount':'10000', 'currency':'AED', 'language':'en', 'fort_id':'149295435400084008', 'signature':'7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'order_description':'iPhone 6-S', };","title":"Request example"},{"location":"capturepayment/#the-response","text":"If you receive response code 20064 with status code 04 then your request to capture a payment has been accepted by the PayFort Server.","title":"The response"},{"location":"capturepayment/#response-examples","text":"{\"command\":\"CAPTURE\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239-yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"fort_id\":\"149295435400084008\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone 6-S\", \"response_message\":\"Success\", \"response_code\":\"20064\", status\":\"04\" } You can check out various transaction codes by visiting this link","title":"Response examples"},{"location":"capturepayment/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"capturepayment/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"cards/","text":"With PayFort you can accept card payments from all major global providers and many local payment methods Supported card schemes We support the following international and domestic card schemes: International Visa Mastercard American Express Discover Diners Club JCB UnionPay Local Sadad KNET Mada NAPS Oman NET MEEZA Test Your Card Integration You can checkout this link for testing your card integration. Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Cards"},{"location":"cards/#supported-card-schemes","text":"We support the following international and domestic card schemes:","title":"Supported card schemes"},{"location":"cards/#international","text":"Visa Mastercard American Express Discover Diners Club JCB UnionPay","title":"International"},{"location":"cards/#local","text":"Sadad KNET Mada NAPS Oman NET MEEZA","title":"Local"},{"location":"cards/#test-your-card-integration","text":"You can checkout this link for testing your card integration.","title":"Test Your Card Integration"},{"location":"cards/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"cards/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"custompaymentform/","text":"Use Custom Payment Form You can also build your own custom payment Form without using default template provided by PayFort. Figure 1 How it works - overview You develop your own custom payment details form that collects the card details (credit card number, expiry date, CVV), and sends the request to PayFort. PayFort receives the payment details and returns the response which includes the Token to your payment processing page. You use the token to complete the Authorization or Purchase operation . Note - You should develop a form that does not send data to your website but directly submits the form to PayFort.* Integration Flow Figure 2 The Customer begins the checkout process on your website. Your website displays the custom payment form to collect the card\u2019s details. Then the Customer enters the card\u2019s details on the payment page. PayFort validates the card format. PayFort creates a token for the card details and sends it back to your payment page. Payment page stores the Token and proceeds with the transaction. Payment page sends a payment request along with the Token to PayFort. PayFort sends the 3-D Secure URL, and response indicating that a check is required: Payment page redirects the Customer to check his card enrollment. The Customer enters authentication data. 3-D Secure authentication is completed and PayFort receives the authentication results. Note - In this case, PayFort returns status \u201c20: On hold\u201d and message \u201c064: 3-D Secure check requested\u201d . For example, PayFort is waiting for the payment page to authenticate the Customer. PayFort completes the operation based on the 3-D Secure response and returns the response to the website. The payment results are displayed to the Customer. Note - If the Token is sent by the payment page, it will be generated with the same name sent by the website. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. Endpoints Live POST https://checkout.PayFort.com/FortAPI/paymentPage Sandbox POST https://sbcheckout.payfort.com/FortAPI/paymentPage Before you start Make sure you have your access_code . Refer figure 3. You can find it in the backoffice , under Integration Settings Security Settings > Access Code . If you don't have an account with us yet, you can create a test account by visiting the link . You can also get started with an active account by visiting this link Figure 2 : Uploading custom template The Payment Page Template available in the backoffice provides you the feature to create a custom payment processing page. Refer to the figure 2. Once you upload your custom payment page our support team will validate the same. Figure 3: Generating Access Code. Start testing Ready to try out your integration? Create a test account to get everything working perfectly before going live. Get test account Add the code snippet to your site The following code snippet shown here is an example of the start of the payment process. You can refer to this example, replacing the supplied acccess_code with your own. The card token will be posted via the URL specified in the form's action attribute. HTML <html> <body> <form method=\"post\" action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\" id=form1 name=form1> <input type=\"hidden\" NAME=\"service_command\" value=\"TOKENIZATION\"> <input type=\"hidden\" NAME=\"language\" value=\" \"> <input type=\"hidden\" NAME=\"merchant_identifier\" value=\" \"> <input type=\"hidden\" NAME=\"access_code\" value=\" \"> <input type=\"hidden\" NAME=\"signature\" value=\"\"> <input type=\"hidden\" NAME=\"return_url\" value=\" \"> <input type=\"hidden\" NAME=\"merchant_reference\" value=\"\"> <input type=\"hidden\" NAME=\"card_number\" value=\"\"> <input type=\"hidden\" NAME=\"expiry_date\" value=\"\"> <input type=\"hidden\" NAME=\"card_security_code\" value=\"\"> <input type=\"hidden\" NAME=\"card_holder_name\" value=\" \"> <input type=\"submit\" value=\"\" id=\"submit2\" name=\"\"> </form> </body> </html> How to add the Tokenization service on the Payment Page? The Tokenization service is applicable to be integrated through the payment page through the below steps: The Customer processes the first PURCHASE/ AUTHORIZATION payment successfully. The payment page will receive a token_name in the response. This token_name should be considered as a permanent token name, and it can be used in the future customer\u2019s payments by submitting the token_name in the next PURCHASE/ AUTHORIZATION payment with card_security_code parameter. No need to open the Payment Details Form to fill all the card details again in the next checkouts. If the Customer wants to update/ delete his card, you should check Update Token section. Note Please refer to section FORT Tokenization Service for more details about the token name parameter. Payment Page Customization This is a list with all customizable CSS classes on the basic merchant page: The Wrapper class: responsible for the total width of the form container and the background. The Container class: responsible for the form\u2019s shape and width. The Popover class: responsible for the error messages. The Half-container class: used to merge the date and CVV fields into one block if needed. The Input class: is the container of each single input field. The Pay class: responsible for the submit button. The Visa/ MasterCard classes: used to change the color of the Visa/ MasterCard colors. Note - You can always create multiple theme files that will enable you to switch freely and easily between them when necessary. Note - \u201cTheme\u201d files can be uploaded from the back-office using the Payment Page template screen. Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Custom Payment Form"},{"location":"custompaymentform/#use-custom-payment-form","text":"You can also build your own custom payment Form without using default template provided by PayFort. Figure 1","title":"Use Custom Payment Form"},{"location":"custompaymentform/#how-it-works-overview","text":"You develop your own custom payment details form that collects the card details (credit card number, expiry date, CVV), and sends the request to PayFort. PayFort receives the payment details and returns the response which includes the Token to your payment processing page. You use the token to complete the Authorization or Purchase operation . Note - You should develop a form that does not send data to your website but directly submits the form to PayFort.*","title":"How it works - overview"},{"location":"custompaymentform/#integration-flow","text":"Figure 2 The Customer begins the checkout process on your website. Your website displays the custom payment form to collect the card\u2019s details. Then the Customer enters the card\u2019s details on the payment page. PayFort validates the card format. PayFort creates a token for the card details and sends it back to your payment page. Payment page stores the Token and proceeds with the transaction. Payment page sends a payment request along with the Token to PayFort. PayFort sends the 3-D Secure URL, and response indicating that a check is required: Payment page redirects the Customer to check his card enrollment. The Customer enters authentication data. 3-D Secure authentication is completed and PayFort receives the authentication results. Note - In this case, PayFort returns status \u201c20: On hold\u201d and message \u201c064: 3-D Secure check requested\u201d . For example, PayFort is waiting for the payment page to authenticate the Customer. PayFort completes the operation based on the 3-D Secure response and returns the response to the website. The payment results are displayed to the Customer. Note - If the Token is sent by the payment page, it will be generated with the same name sent by the website. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details.","title":"Integration Flow"},{"location":"custompaymentform/#endpoints","text":"","title":"Endpoints"},{"location":"custompaymentform/#live","text":"POST https://checkout.PayFort.com/FortAPI/paymentPage","title":"Live"},{"location":"custompaymentform/#sandbox","text":"POST https://sbcheckout.payfort.com/FortAPI/paymentPage","title":"Sandbox"},{"location":"custompaymentform/#before-you-start","text":"Make sure you have your access_code . Refer figure 3. You can find it in the backoffice , under Integration Settings Security Settings > Access Code . If you don't have an account with us yet, you can create a test account by visiting the link . You can also get started with an active account by visiting this link Figure 2 : Uploading custom template The Payment Page Template available in the backoffice provides you the feature to create a custom payment processing page. Refer to the figure 2. Once you upload your custom payment page our support team will validate the same. Figure 3: Generating Access Code.","title":"Before you start"},{"location":"custompaymentform/#start-testing","text":"Ready to try out your integration? Create a test account to get everything working perfectly before going live. Get test account","title":"Start testing"},{"location":"custompaymentform/#add-the-code-snippet-to-your-site","text":"The following code snippet shown here is an example of the start of the payment process. You can refer to this example, replacing the supplied acccess_code with your own. The card token will be posted via the URL specified in the form's action attribute. HTML <html> <body> <form method=\"post\" action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\" id=form1 name=form1> <input type=\"hidden\" NAME=\"service_command\" value=\"TOKENIZATION\"> <input type=\"hidden\" NAME=\"language\" value=\" \"> <input type=\"hidden\" NAME=\"merchant_identifier\" value=\" \"> <input type=\"hidden\" NAME=\"access_code\" value=\" \"> <input type=\"hidden\" NAME=\"signature\" value=\"\"> <input type=\"hidden\" NAME=\"return_url\" value=\" \"> <input type=\"hidden\" NAME=\"merchant_reference\" value=\"\"> <input type=\"hidden\" NAME=\"card_number\" value=\"\"> <input type=\"hidden\" NAME=\"expiry_date\" value=\"\"> <input type=\"hidden\" NAME=\"card_security_code\" value=\"\"> <input type=\"hidden\" NAME=\"card_holder_name\" value=\" \"> <input type=\"submit\" value=\"\" id=\"submit2\" name=\"\"> </form> </body> </html>","title":"Add the code snippet to your site"},{"location":"custompaymentform/#how-to-add-the-tokenization-service-on-the-payment-page","text":"The Tokenization service is applicable to be integrated through the payment page through the below steps: The Customer processes the first PURCHASE/ AUTHORIZATION payment successfully. The payment page will receive a token_name in the response. This token_name should be considered as a permanent token name, and it can be used in the future customer\u2019s payments by submitting the token_name in the next PURCHASE/ AUTHORIZATION payment with card_security_code parameter. No need to open the Payment Details Form to fill all the card details again in the next checkouts. If the Customer wants to update/ delete his card, you should check Update Token section. Note Please refer to section FORT Tokenization Service for more details about the token name parameter.","title":"How to add the Tokenization service on the Payment Page?"},{"location":"custompaymentform/#payment-page-customization","text":"This is a list with all customizable CSS classes on the basic merchant page: The Wrapper class: responsible for the total width of the form container and the background. The Container class: responsible for the form\u2019s shape and width. The Popover class: responsible for the error messages. The Half-container class: used to merge the date and CVV fields into one block if needed. The Input class: is the container of each single input field. The Pay class: responsible for the submit button. The Visa/ MasterCard classes: used to change the color of the Visa/ MasterCard colors. Note - You can always create multiple theme files that will enable you to switch freely and easily between them when necessary. Note - \u201cTheme\u201d files can be uploaded from the back-office using the Payment Page template screen.","title":"Payment Page Customization"},{"location":"custompaymentform/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"dummy/","text":"Prestashop Get Started Github Repo Woocommerce Get Started Github Repo Magento Get Started Github Repo Magento 2 Get Started Github Repo Cs Cart 3 Get Started Github Repo Cs Cart 4 Get Started Github Repo Open Cart Get Started Github Repo Open Cart 2 Get Started Github Repo Php Get Started","title":"Dummy Testing"},{"location":"glossary/","text":"Glossary of Terms Used Number 3-D Secure URL - An XML -based protocol designed to be an additional security layer for online credit and debit card transactions. A ACS - Access Control Server running on the bank side that authenticates e-commerce transactions through the 3D Secure URL. P PCI-DSS - Payment Card Industry Data Security Standard. A set of security standards which forms the compliance scheme. The compliance aims to secure credit and debit card transactions against payment frauds. R Redirection - Routing to other site (bank or financial institution) or webpage through the action on the page for authentication purpose. The action could be submit button. U URL - Uniform Resource locator. Example : https:\\www.example.com","title":"Glossary"},{"location":"glossary/#glossary-of-terms-used","text":"","title":"Glossary of Terms Used"},{"location":"glossary/#number","text":"3-D Secure URL - An XML -based protocol designed to be an additional security layer for online credit and debit card transactions.","title":"Number"},{"location":"glossary/#a","text":"ACS - Access Control Server running on the bank side that authenticates e-commerce transactions through the 3D Secure URL.","title":"A"},{"location":"glossary/#p","text":"PCI-DSS - Payment Card Industry Data Security Standard. A set of security standards which forms the compliance scheme. The compliance aims to secure credit and debit card transactions against payment frauds.","title":"P"},{"location":"glossary/#r","text":"Redirection - Routing to other site (bank or financial institution) or webpage through the action on the page for authentication purpose. The action could be submit button.","title":"R"},{"location":"glossary/#u","text":"URL - Uniform Resource locator. Example : https:\\www.example.com","title":"U"},{"location":"iframe_web/","text":"iFrame For Web You can setup payment form and start accepting payments within few minutes with the help of iFrame. PayFort provides easy to use iFrame which can be easily integrated with your payment form. It takes the look and feel of your merchant site and accepts payments from major credit cards including MADA, VISA, Mastercard, Diners etc. Figure 1 - Using PayFort iFrame for web How it Works 1. The payment details form will appear to your Customer encapsulated inside an iframe that has the same look and feel as that of your website. 2. PayFort then receives the payment details and sends you the confirmation to complete the transaction. Note - You have the option to redirect the Customer directly to the payment details form. Integration Flow Figure 2 : Integration Flow using iFrame The customer begins the checkout process on your website. The payment page encapsulated inside iFrame is displayed. Then the Customer enters the card\u2019s details on the payment page. PayFort checks the card details. PayFort creates a token for the Customer transaction and sends it to the payment page. The Payment page then sends a JSON request along with the token to PayFort. In case your page receives from PayFort a 3-D Secure URL \u201c3ds_url\u201d, and response indicating that a 3Ds check is required: a. Your payment page redirects the Customer to the ACS to check his card enrollment. b. The Customer enters authentication data on the ACS platform. c. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFort. PayFort completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFort sends the payment results to your site. Note - In this case, PayFort returns status \u201c20: On hold\u201d and message \u201c064: 3-D Secure check requested\u201d . For example, PayFort is waiting for your payment page to authenticate the Customer.* If you include the \u201ctoken_name\u201d parameter in the request and this Token already has a successful Authorization, then the card number (masked) and expiry date will be displayed in their allocated fields. If the Token is sent by you, it will be generated with the same name as sent by your page. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. Give It a Try Use one of our test cards and corresponding CVV to try iFrames out for yourself. You can use any expiry date ( mm/yy ), as long as it's in the future. Comment--Need to add dynamic code script block to accept test card and generate a test token here. Integrate iFrames to Payment Page Endpoints Live POST https://checkout.payfort.com/FortAPI/paymentPage Sandbox POST https://sbcheckout.payfort.com/FortAPI/paymentPage Before you start Make sure you have your access_code . Refer to Figure 2 . You can find it in the backoffice , under Integration Settings > Security Settings > Access Code . If you don't have an account with us yet, you can create a test account by visiting the link . You can also get started with an active account by visiting this link Figure 2 : Access Code Generation The Payment Page Template available in the backoffice provides you the feature to create a payment processing page using PayFort iFrame. Refer to the Figure 3 Figure 3 : Use Payment Settings to create a payment form Sample iFrame code snippet The following sample code snippet is the start of the payment process and allows you to tokenize a customer's sensitive card information using iFrames. \u200b <html> </head> <body> <iframe style=\"border:5px dotted red\" name=\"myframe\" src = \"\" width=\"400\" height=\"600\"> </iframe> <form action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\" method=\"post\" id=\"\" target=\"myframe\"> <INPUT type=\"hidden\" NAME=\"service_command\" value=\"TOKENIZATION\"> <INPUT type=\"hidden\" NAME=\"language\" value=\" \"> <INPUT type=\"hidden\" NAME=\"merchant_identifier\" value=\"\"> <INPUT type=\"hidden\" NAME=\"access_code\" value=\"\"> <INPUT type=\"hidden\" NAME=\"signature\" value=\"\"> <INPUT type=\"hidden\" NAME=\"return_url\" value=\"\"> <INPUT type=\"hidden\" NAME=\"merchant_reference\" value=\"\"> <input value=\"Send\" type=\"submit\" id=\"form1\"> </form> </body> </html> Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"iFrame For Web"},{"location":"iframe_web/#iframe-for-web","text":"You can setup payment form and start accepting payments within few minutes with the help of iFrame. PayFort provides easy to use iFrame which can be easily integrated with your payment form. It takes the look and feel of your merchant site and accepts payments from major credit cards including MADA, VISA, Mastercard, Diners etc. Figure 1 - Using PayFort iFrame for web","title":"iFrame For Web"},{"location":"iframe_web/#how-it-works","text":"1. The payment details form will appear to your Customer encapsulated inside an iframe that has the same look and feel as that of your website. 2. PayFort then receives the payment details and sends you the confirmation to complete the transaction. Note - You have the option to redirect the Customer directly to the payment details form.","title":"How it Works"},{"location":"iframe_web/#integration-flow","text":"Figure 2 : Integration Flow using iFrame The customer begins the checkout process on your website. The payment page encapsulated inside iFrame is displayed. Then the Customer enters the card\u2019s details on the payment page. PayFort checks the card details. PayFort creates a token for the Customer transaction and sends it to the payment page. The Payment page then sends a JSON request along with the token to PayFort. In case your page receives from PayFort a 3-D Secure URL \u201c3ds_url\u201d, and response indicating that a 3Ds check is required: a. Your payment page redirects the Customer to the ACS to check his card enrollment. b. The Customer enters authentication data on the ACS platform. c. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFort. PayFort completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFort sends the payment results to your site. Note - In this case, PayFort returns status \u201c20: On hold\u201d and message \u201c064: 3-D Secure check requested\u201d . For example, PayFort is waiting for your payment page to authenticate the Customer.* If you include the \u201ctoken_name\u201d parameter in the request and this Token already has a successful Authorization, then the card number (masked) and expiry date will be displayed in their allocated fields. If the Token is sent by you, it will be generated with the same name as sent by your page. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details.","title":"Integration Flow"},{"location":"iframe_web/#give-it-a-try","text":"Use one of our test cards and corresponding CVV to try iFrames out for yourself. You can use any expiry date ( mm/yy ), as long as it's in the future. Comment--Need to add dynamic code script block to accept test card and generate a test token here.","title":"Give It a Try"},{"location":"iframe_web/#integrate-iframes-to-payment-page","text":"","title":"Integrate iFrames to Payment Page"},{"location":"iframe_web/#endpoints","text":"","title":"Endpoints"},{"location":"iframe_web/#live","text":"POST https://checkout.payfort.com/FortAPI/paymentPage","title":"Live"},{"location":"iframe_web/#sandbox","text":"POST https://sbcheckout.payfort.com/FortAPI/paymentPage","title":"Sandbox"},{"location":"iframe_web/#before-you-start","text":"Make sure you have your access_code . Refer to Figure 2 . You can find it in the backoffice , under Integration Settings > Security Settings > Access Code . If you don't have an account with us yet, you can create a test account by visiting the link . You can also get started with an active account by visiting this link Figure 2 : Access Code Generation The Payment Page Template available in the backoffice provides you the feature to create a payment processing page using PayFort iFrame. Refer to the Figure 3 Figure 3 : Use Payment Settings to create a payment form","title":"Before you start"},{"location":"iframe_web/#sample-iframe-code-snippet","text":"The following sample code snippet is the start of the payment process and allows you to tokenize a customer's sensitive card information using iFrames. \u200b <html> </head> <body> <iframe style=\"border:5px dotted red\" name=\"myframe\" src = \"\" width=\"400\" height=\"600\"> </iframe> <form action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\" method=\"post\" id=\"\" target=\"myframe\"> <INPUT type=\"hidden\" NAME=\"service_command\" value=\"TOKENIZATION\"> <INPUT type=\"hidden\" NAME=\"language\" value=\" \"> <INPUT type=\"hidden\" NAME=\"merchant_identifier\" value=\"\"> <INPUT type=\"hidden\" NAME=\"access_code\" value=\"\"> <INPUT type=\"hidden\" NAME=\"signature\" value=\"\"> <INPUT type=\"hidden\" NAME=\"return_url\" value=\"\"> <INPUT type=\"hidden\" NAME=\"merchant_reference\" value=\"\"> <input value=\"Send\" type=\"submit\" id=\"form1\"> </form> </body> </html>","title":"Sample iFrame code snippet"},{"location":"iframe_web/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"iossdk/","text":"Integrate iOS SDK To process a transaction using the FORT Mobile SDK, create a Mobile SDK Token and proceed through the following sections. About the Software Supported Platforms IOS 8+ Localization The FORT Mobile SDK supports both English and Arabic languages. Screen Orientation Portrait is the only orientation supported within the FORT Mobile SDK. Supported Payment Methods Through the first version of the FORT Mobile SDK, the Merchant has the ability to process a CREDIT CARD transactions only. Supported Payment Options The supported credit card payment options are VISA , MASTERCARD , American Express (AMEX) , MADA and MEEZA . Include the SDK to your Xcode Project Download and extract sdk. Drag the PayFortSDK.framework & PayFortSDK.bundle to Frameworks in Project Navigator. Create a new group Frameworks if it does not exist: Choose Create groups for any added folders. Make Sure to select Copy files if needed. Set -ObjC in the Other Linker Flags in the Target \u2192 Build Settings Tab. For Swift Projects Don\u2019t forget to add the #import to the Bridging-Header.h Ensure linked once in the Linked Framework and Libraries or just drag the PayFortSDK.framework to Embedded Binaries in the general tab in the project settings. In Xcode, secondary-click your project\u2019s .plist file and select Open As \u2192 Source Code. Insert the following XML snippet into the body of your file just before the final, same as below: </dict>element <key>NSAppTransportSecurity</key> <dict> <key>NSAllowsArbitraryLoads</key><true/> </dict> To make the application not disconnected when go to background make sure to add this code: Objective C (void)applicationDidEnterBackground:(UIApplication *)application { __block UIBackgroundTaskIdentifier backgroundTask; backgroundTask = [application beginBackgroundTaskWithExpirationHandler: ^ { [application endBackgroundTask:backgroundTask]; backgroundTask = UIBackgroundTaskInvalid; }]; Swift func applicationDidEnterBackground(_ application: UIApplication) { var bgTask: UIBackgroundTaskIdentifier = 0 bgTask = application.beginBackgroundTask(expirationHandler: { application.endBackgroundTask(bgTask) bgTask = UIBackgroundTaskInvalid }) } Installation Import the PayFort Library. #import <PayFortSDK/PayFortSDK.h> Initialize PayFortConrtoller with targeted environment, You set the target environment by setting one the two ENUM KPayFortEnviromentSandBox or KPayFortEnviromentProduction . Objective C PayFortController *payFort = [[PayFortControlleralloc]initWithEnviroment:KPayFortEnviromentSandBox]; Swift let payFort = PayFortController.init(enviroment: KPayFortEnviromentSandBox) Set Dictionary contain all keys and values for SDK. Objective C NSMutableDictionary *request = [[NSMutableDictionary alloc]init]; [request setValue:@\u201c10000\u201d forKey:@\u201camount\u201d]; [request setValue:@\u201cAUTHORIZATION\u201d forKey:@\u201ccommand\u201d]; [request setValue:@\u201cUSD\u201d forKey:@\u201ccurrency\u201d]; [request setValue:@ \u201cemail@domain.com\u201d forKey:@\u201ccustomer_email\u201d]; [request setValue:@\u201cen\u201d forKey:@\u201clanguage\u201d]; [request setValue:@\u201c112233682686\u201d forKey:@\u201cmerchant_reference\u201d]; [request setValue:`SDK TOKEN GOES HERE` forKey:@\u201csdk_token\u201d]; [request setValue:@\u201c\u201d forKey:@\u201cpayment_option\u201d]; [request setValue:@\u201cgr66zzwW9\u201d forKey:@\u201ctoken_name\"]; Swift let request = NSMutableDictionary.init() request.setValue(\u201c1000\u201d, forKey: \u201camount\u201d) request.setValue(\u201cAUTHORIZATION\u201d, forKey: \u201ccommand\u201d) request.setValue(\u201cUSD\u201d, forKey: \u201ccurrency\u201d) request.setValue(\u201cemail@domain.com\u201d, forKey: \u201ccustomer_email\u201d) request.setValue(\u201cen\u201d, forKey: \u201clanguage\u201d) request.setValue(\u201c112233682686\u201d, forKey: \u201cmerchant_reference\u201d) request.setValue(\u201ctoken\u201d , forKey: \u201csdk_token\u201d) Call PayFort and Response callback Objective C [payFort callPayFortWithRequest:request currentViewController:self Success:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cSuccess\u201d); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Canceled:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cCanceled\u201d); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Faild:^(NSDictionary *requestDic, NSDictionary *responeDic, NSString *message) { NSLog(@\u201cFaild\u201d); NSLog(@\u201cresponeDic=%@\u201d,responeDic); }]; Swift PayFort.callPayFort(withRequest: request, currentViewController: self, success: { (requestDic, responeDic) in print(\u201csuccess\u201d) }, canceled: { (requestDic, responeDic) in print(\u201ccanceled\u201d) }, faild: { (requestDic, responeDic, message) in print(\u201cfaild\u201d) }) SDK - Response By default the response will be dictionary to show the sent data in addition to the status, response message and response code. The response will be ready in the registered call back handler with success, failed and cancelled. You can view the response by log the result as the followings: Objective C [payFort callPayFortWithRequest:request currentViewController:self Success:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cSuccess\u201d); NSLog(@\u201crequestDic=%@\u201d,requestDic); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Canceled:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cCanceled\u201d); NSLog(@\u201crequestDic=%@\u201d,requestDic); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Faild:^(NSDictionary *requestDic, NSDictionary *responeDic, NSString *message) { NSLog(@\u201cFaild\u201d); NSLog(@\u201crequestDic=%@\u201d,requestDic); NSLog(@\u201cresponeDic=%@\u201d,responeDic); NSLog(@\u201cmessage=%@\u201d,message); }]; Swift PayFort.callPayFort(withRequest: request, currentViewController: self, success: { (requestDic, responeDic) in print(\u201csuccess\u201d) print(\u201cresponeDic=(responeDic)\u201d) print(\u201cresponeDic=(responeDic)\u201d) }, canceled: { (requestDic, responeDic) in print(\u201ccanceled\u201d) print(\u201crequestDic=(requestDic)\u201d) print(\u201cresponeDic=(responeDic)\u201d) }, faild: { (requestDic, responeDic, message) in print(\u201cfaild\u201d) print(\u201crequestDic=(requestDic)\u201d) print(\u201cresponeDic=(responeDic)\u201d) print(\u201cmessage=(message)\u201d) }) Also there is an option to show response view directly in elegant view that show response results either its success or failed. By activating the following option: Objective C PayFort.IsShowResponsePage = YES; Swift PayFort.IsShowResponsePage = true; Hidden PayFort loading There is an option to hide loading view when SDK initialize the connection request. By disable the following option: Objective C PayFort.HideLoading = YES; Swift PayFort.HideLoading = true; Custom Payment Designing You have the option to provide your custom UI theme for the payment view by the followings: Create your nibFile .xib and set the name of Arabic xib same name with English one with suffix -ar. Link the xib with PayFortView and bind all the IBOutlets in interface section IBOutlet UILabel *titleLbl; IBOutlet UIButton *BackBtn; IBOutlet UILabel *PriceLbl; IBOutlet JVFloatLabeledTextField *CardNameTxt; IBOutlet JVFloatLabeledTextField *CardNumberTxt; IBOutlet JVFloatLabeledTextField *CVCNumberTxt; IBOutlet JVFloatLabeledTextField *ExpDateTxt; IBOutlet UILabel *cardNumberErrorlbl; IBOutlet UILabel *cVCNumberErrorlbl; IBOutlet UILabel *expDateErrorlbl; IBOutlet UISwitch *savedCardSwitch; IBOutlet UIButton *paymentBtn; IBOutlet UILabel *saveCardLbl; IBOutlet UIImageView *imageCard; Assign new created xib file to PayFort Controller. [payFort setPayFortCustomViewNib:@\u201cPayFortView2\u201d]; If you call Arabic view and the Arabic view not existed the application will crash. Don\u2019t forget to set the custom view field in the identity inspector. Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Integrate iOS SDK"},{"location":"iossdk/#integrate-ios-sdk","text":"To process a transaction using the FORT Mobile SDK, create a Mobile SDK Token and proceed through the following sections.","title":"Integrate iOS SDK"},{"location":"iossdk/#about-the-software","text":"","title":"About the Software"},{"location":"iossdk/#supported-platforms","text":"IOS 8+","title":"Supported Platforms"},{"location":"iossdk/#localization","text":"The FORT Mobile SDK supports both English and Arabic languages.","title":"Localization"},{"location":"iossdk/#screen-orientation","text":"Portrait is the only orientation supported within the FORT Mobile SDK.","title":"Screen Orientation"},{"location":"iossdk/#supported-payment-methods","text":"Through the first version of the FORT Mobile SDK, the Merchant has the ability to process a CREDIT CARD transactions only.","title":"Supported Payment Methods"},{"location":"iossdk/#supported-payment-options","text":"The supported credit card payment options are VISA , MASTERCARD , American Express (AMEX) , MADA and MEEZA .","title":"Supported Payment Options"},{"location":"iossdk/#include-the-sdk-to-your-xcode-project","text":"Download and extract sdk. Drag the PayFortSDK.framework & PayFortSDK.bundle to Frameworks in Project Navigator. Create a new group Frameworks if it does not exist: Choose Create groups for any added folders. Make Sure to select Copy files if needed. Set -ObjC in the Other Linker Flags in the Target \u2192 Build Settings Tab. For Swift Projects Don\u2019t forget to add the #import to the Bridging-Header.h Ensure linked once in the Linked Framework and Libraries or just drag the PayFortSDK.framework to Embedded Binaries in the general tab in the project settings. In Xcode, secondary-click your project\u2019s .plist file and select Open As \u2192 Source Code. Insert the following XML snippet into the body of your file just before the final, same as below: </dict>element <key>NSAppTransportSecurity</key> <dict> <key>NSAllowsArbitraryLoads</key><true/> </dict> To make the application not disconnected when go to background make sure to add this code: Objective C (void)applicationDidEnterBackground:(UIApplication *)application { __block UIBackgroundTaskIdentifier backgroundTask; backgroundTask = [application beginBackgroundTaskWithExpirationHandler: ^ { [application endBackgroundTask:backgroundTask]; backgroundTask = UIBackgroundTaskInvalid; }]; Swift func applicationDidEnterBackground(_ application: UIApplication) { var bgTask: UIBackgroundTaskIdentifier = 0 bgTask = application.beginBackgroundTask(expirationHandler: { application.endBackgroundTask(bgTask) bgTask = UIBackgroundTaskInvalid }) }","title":"Include the SDK to your Xcode Project"},{"location":"iossdk/#installation","text":"Import the PayFort Library. #import <PayFortSDK/PayFortSDK.h> Initialize PayFortConrtoller with targeted environment, You set the target environment by setting one the two ENUM KPayFortEnviromentSandBox or KPayFortEnviromentProduction . Objective C PayFortController *payFort = [[PayFortControlleralloc]initWithEnviroment:KPayFortEnviromentSandBox]; Swift let payFort = PayFortController.init(enviroment: KPayFortEnviromentSandBox) Set Dictionary contain all keys and values for SDK. Objective C NSMutableDictionary *request = [[NSMutableDictionary alloc]init]; [request setValue:@\u201c10000\u201d forKey:@\u201camount\u201d]; [request setValue:@\u201cAUTHORIZATION\u201d forKey:@\u201ccommand\u201d]; [request setValue:@\u201cUSD\u201d forKey:@\u201ccurrency\u201d]; [request setValue:@ \u201cemail@domain.com\u201d forKey:@\u201ccustomer_email\u201d]; [request setValue:@\u201cen\u201d forKey:@\u201clanguage\u201d]; [request setValue:@\u201c112233682686\u201d forKey:@\u201cmerchant_reference\u201d]; [request setValue:`SDK TOKEN GOES HERE` forKey:@\u201csdk_token\u201d]; [request setValue:@\u201c\u201d forKey:@\u201cpayment_option\u201d]; [request setValue:@\u201cgr66zzwW9\u201d forKey:@\u201ctoken_name\"]; Swift let request = NSMutableDictionary.init() request.setValue(\u201c1000\u201d, forKey: \u201camount\u201d) request.setValue(\u201cAUTHORIZATION\u201d, forKey: \u201ccommand\u201d) request.setValue(\u201cUSD\u201d, forKey: \u201ccurrency\u201d) request.setValue(\u201cemail@domain.com\u201d, forKey: \u201ccustomer_email\u201d) request.setValue(\u201cen\u201d, forKey: \u201clanguage\u201d) request.setValue(\u201c112233682686\u201d, forKey: \u201cmerchant_reference\u201d) request.setValue(\u201ctoken\u201d , forKey: \u201csdk_token\u201d) Call PayFort and Response callback Objective C [payFort callPayFortWithRequest:request currentViewController:self Success:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cSuccess\u201d); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Canceled:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cCanceled\u201d); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Faild:^(NSDictionary *requestDic, NSDictionary *responeDic, NSString *message) { NSLog(@\u201cFaild\u201d); NSLog(@\u201cresponeDic=%@\u201d,responeDic); }]; Swift PayFort.callPayFort(withRequest: request, currentViewController: self, success: { (requestDic, responeDic) in print(\u201csuccess\u201d) }, canceled: { (requestDic, responeDic) in print(\u201ccanceled\u201d) }, faild: { (requestDic, responeDic, message) in print(\u201cfaild\u201d) })","title":"Installation"},{"location":"iossdk/#sdk-response","text":"By default the response will be dictionary to show the sent data in addition to the status, response message and response code. The response will be ready in the registered call back handler with success, failed and cancelled. You can view the response by log the result as the followings: Objective C [payFort callPayFortWithRequest:request currentViewController:self Success:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cSuccess\u201d); NSLog(@\u201crequestDic=%@\u201d,requestDic); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Canceled:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cCanceled\u201d); NSLog(@\u201crequestDic=%@\u201d,requestDic); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Faild:^(NSDictionary *requestDic, NSDictionary *responeDic, NSString *message) { NSLog(@\u201cFaild\u201d); NSLog(@\u201crequestDic=%@\u201d,requestDic); NSLog(@\u201cresponeDic=%@\u201d,responeDic); NSLog(@\u201cmessage=%@\u201d,message); }]; Swift PayFort.callPayFort(withRequest: request, currentViewController: self, success: { (requestDic, responeDic) in print(\u201csuccess\u201d) print(\u201cresponeDic=(responeDic)\u201d) print(\u201cresponeDic=(responeDic)\u201d) }, canceled: { (requestDic, responeDic) in print(\u201ccanceled\u201d) print(\u201crequestDic=(requestDic)\u201d) print(\u201cresponeDic=(responeDic)\u201d) }, faild: { (requestDic, responeDic, message) in print(\u201cfaild\u201d) print(\u201crequestDic=(requestDic)\u201d) print(\u201cresponeDic=(responeDic)\u201d) print(\u201cmessage=(message)\u201d) }) Also there is an option to show response view directly in elegant view that show response results either its success or failed. By activating the following option: Objective C PayFort.IsShowResponsePage = YES; Swift PayFort.IsShowResponsePage = true;","title":"SDK - Response"},{"location":"iossdk/#hidden-payfort-loading","text":"There is an option to hide loading view when SDK initialize the connection request. By disable the following option: Objective C PayFort.HideLoading = YES; Swift PayFort.HideLoading = true;","title":"Hidden PayFort loading"},{"location":"iossdk/#custom-payment-designing","text":"You have the option to provide your custom UI theme for the payment view by the followings: Create your nibFile .xib and set the name of Arabic xib same name with English one with suffix -ar. Link the xib with PayFortView and bind all the IBOutlets in interface section IBOutlet UILabel *titleLbl; IBOutlet UIButton *BackBtn; IBOutlet UILabel *PriceLbl; IBOutlet JVFloatLabeledTextField *CardNameTxt; IBOutlet JVFloatLabeledTextField *CardNumberTxt; IBOutlet JVFloatLabeledTextField *CVCNumberTxt; IBOutlet JVFloatLabeledTextField *ExpDateTxt; IBOutlet UILabel *cardNumberErrorlbl; IBOutlet UILabel *cVCNumberErrorlbl; IBOutlet UILabel *expDateErrorlbl; IBOutlet UISwitch *savedCardSwitch; IBOutlet UIButton *paymentBtn; IBOutlet UILabel *saveCardLbl; IBOutlet UIImageView *imageCard; Assign new created xib file to PayFort Controller. [payFort setPayFortCustomViewNib:@\u201cPayFortView2\u201d]; If you call Arabic view and the Arabic view not existed the application will crash. Don\u2019t forget to set the custom view field in the identity inspector.","title":"Custom Payment Designing"},{"location":"iossdk/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"iossdk/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"mobilesdk/","text":"Mobile SDKs The PayFORT Mobile SDK allows you to securely integrate the payment functions. It also allows you to easily accept In-App payments. Instead of the traditional, time-consuming, and complex way of being redirected to the mobile browser to complete the payment, In-App payments can be completed through our FORT Mobile SDK . In turn, this gives the your customers a smooth, pleasing user-experience by using In-App payment functions through the native applications. Features of PayFort SDKs Native in-app payment. Fully secure. Fully customized. Mobile SDK Libraries iOS The FORT Mobile SDK supports all devices running iOS 8+ Get Started SDK 2.1 for iOS Android The FORT Mobile SDK supports all devices running Android 4.1.x (API level 16). Get Started SDK 1.5 for Android A Mobile SDK Token is required to authenticate every request sent to the SDK. The Token is also significant to process payment operations in the FORT through our FORT Mobile SDK. A unique Token should be created for each transaction. Each Token has a life-time of only one hour if no new request from the same device is sent. The creation and initiation of a Mobile SDK Token happens on the Merchant\u2019s server side. SDK Token Endpoints Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi Live POST https://paymentservices.payfort.com/FortAPI/paymentApi Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Mobile SDK Library"},{"location":"mobilesdk/#mobile-sdks","text":"The PayFORT Mobile SDK allows you to securely integrate the payment functions. It also allows you to easily accept In-App payments. Instead of the traditional, time-consuming, and complex way of being redirected to the mobile browser to complete the payment, In-App payments can be completed through our FORT Mobile SDK . In turn, this gives the your customers a smooth, pleasing user-experience by using In-App payment functions through the native applications.","title":"Mobile SDKs"},{"location":"mobilesdk/#features-of-payfort-sdks","text":"Native in-app payment. Fully secure. Fully customized.","title":"Features of PayFort SDKs"},{"location":"mobilesdk/#mobile-sdk-libraries","text":"","title":"Mobile SDK Libraries"},{"location":"mobilesdk/#sdk-token-endpoints","text":"","title":"SDK Token Endpoints"},{"location":"mobilesdk/#sandbox","text":"POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi","title":"Sandbox"},{"location":"mobilesdk/#live","text":"POST https://paymentservices.payfort.com/FortAPI/paymentApi Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones.","title":"Live"},{"location":"mobilesdk/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"mobilesdk/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"paymentpage/","text":"Integrate With PayFort PayFort helps you to build a robust payment system for your merchant site. With the help of PayFort you can collect payment information conveniently and securely. It offers your customer the choice to pay in multiple currencies. Your customers can also select from available payment methods such as 3D secure, Apple Pay, Visa Checkout or MasterPass. You can get started with PayFort by visiting this link PayFort offers you two approaches for integrations with your merchant site as mentioned below: By using PayFort iFrame By developing your own custom payment form. PayFort Payment Features With PayFort You need not redirect your customers to third party website for payment and they will be able to pay on the payment page of your website. You are no longer required to get your website PCI-Compliant. Since PayFort is PCI-DSS compliant it means your business transactions will be PCI-Compliant automatically. It offers payment solutions for various shopping cart applications including your own in house shopping cart application. \u200b Figure 1 \u200b Shopping cart applications supported by PayFort Using PayFort iFrame PayFort iFrame help you to create a payment form which is customizable. It gives the customer to provide their payment details on your site checkout page or in your mobile based app. Once the details are entered PayFort generates a secure single use token through tokenization process. This token can be used to request a payment without the need to store any customer's payment information in your site. PayFort processes the transaction and returns the results back to the your site through invisible redirection. Please refer figure 2. Figure 2 - Using PayFort iFrame How it Works - Overview 1. The payment details form will appear to your Customer encapsulated inside an iframe that has the same look and feel of as that of your website. 2. PayFort then receives the payment details and sends you the confirmation to complete the transaction. Note - You have the option to redirect the Customer directly to the payment details form. Integration Flow The customer begins the checkout process on your website. The payment page encapsulated inside iFrame is displayed. Then the Customer enters the card\u2019s details on the payment page. PayFort checks the card details. PayFort creates a token for the Customer transaction and sends it to the payment page. The Payment page then sends a JSON request along with the token to PayFort. In case your page receives from PayFort a 3-D Secure URL \u201c3ds_url\u201d, and response indicating that a 3Ds check is required: a. Your payment page redirects the Customer to the ACS to check his card enrollment. b. The Customer enters authentication data on the ACS platform. c. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFort. PayFort completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFort sends the payment results to your site. Note - In this case, PayFort returns status \u201c20: On hold\u201d and message \u201c064: 3-D Secure check requested\u201d . For example, PayFort is waiting for your payment page to authenticate the Customer.* If you include the \u201ctoken_name\u201d parameter in the request and this Token already has a successful Authorization, then the card number (masked) and expiry date will be displayed in their allocated fields. If the Token is sent by you, it will be generated with the same name as sent by your page. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. 2. Using Custom Payment Form You can also design and develop your own custom for for collecting the card details. The card details are sent directly to PayFort and substituted with Token. You can then use this Token to complete the transaction. How it works - overview 1. You develop your own custom payment details form that collects the card details (credit card number, expiry date, CVV), and sends the request to PayFort. 2. PayFort receives the payment details and returns the response which includes the Token to your payment processing page. 3. You use the token to complete the Authorization or Purchase operation . Note - You should develop a form that does not send data to your website but directly submits the form to PayFort.* Integration Flow 1. The Customer begins the checkout process on your website. 2. Your website displays the custom payment form to collect the card\u2019s details. Then the Customer enters the card\u2019s details on the payment page. 3. PayFort validates the card format. 4. PayFort creates a token for the card details and sends it back to your payment page. 5. Payment page stores the Token and proceeds with the transaction. 6. Payment page sends a payment request along with the Token to PayFort. 7. PayFort sends the 3-D Secure URL, and response indicating that a check is required: a. Payment page redirects the Customer to check his card enrollment. b. The Customer enters authentication data. c. 3-D Secure authentication is completed and PayFort receives the authentication results. Note - In this case, PayFort returns status \u201c20: On hold\u201d and message \u201c064: 3-D Secure check requested\u201d . For example, PayFort is waiting for the payment page to authenticate the Customer. 8. PayFort completes the operation based on the 3-D Secure response and returns the response to the website. 9. The payment results are displayed to the Customer. Note - If the Token is sent by the payment page, it will be generated with the same name sent by the website. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. Integration Page - Operations Operations URLs Test Environment URL https://sbpaymentservices.payfort.com/FortAPI/paymentApi Production Environment URL https://paymentservices.payfort.com/FortAPI/paymentApi Parameters Submission Type REST POST request using JSON. How to add the Tokenization service on the Payment Page? The Tokenization service is applicable to be integrated through the payment page through the below steps: 1. The Customer processes the first PURCHASE/ AUTHORIZATION payment successfully. 2. The payment page will receive a token_name in the response. This token_name should be considered as a permanent token name, and it can be used in the future customer\u2019s payments by submitting the token_name in the next PURCHASE/ AUTHORIZATION payment with card_security_code parameter. 3. No need to open the Payment Details Form to fill all the card details again in the next checkouts. If the Customer wants to update/ delete his card, you should check Update Token section. Note Please refer to section FORT Tokenization Service for more details about the token name parameter. Payment Page Customization This is a list with all customizable CSS classes on the basic merchant page: The Wrapper class: responsible for the total width of the form container and the background. The Container class: responsible for the form\u2019s shape and width. The Popover class: responsible for the error messages. The Half-container class: used to merge the date and CVV fields into one block if needed. The Input class: is the container of each single input field. The Pay class: responsible for the submit button. The Visa/ MasterCard classes: used to change the color of the Visa/ MasterCard colors. Note - You can always create multiple theme files that will enable you to switch freely and easily between them when necessary. Note - \u201cTheme\u201d files can be uploaded from the back-office using the Payment Page template screen.","title":"Integrate With PayFort"},{"location":"paymentpage/#integrate-with-payfort","text":"PayFort helps you to build a robust payment system for your merchant site. With the help of PayFort you can collect payment information conveniently and securely. It offers your customer the choice to pay in multiple currencies. Your customers can also select from available payment methods such as 3D secure, Apple Pay, Visa Checkout or MasterPass. You can get started with PayFort by visiting this link PayFort offers you two approaches for integrations with your merchant site as mentioned below: By using PayFort iFrame By developing your own custom payment form.","title":"Integrate With PayFort"},{"location":"paymentpage/#payfort-payment-features","text":"With PayFort You need not redirect your customers to third party website for payment and they will be able to pay on the payment page of your website. You are no longer required to get your website PCI-Compliant. Since PayFort is PCI-DSS compliant it means your business transactions will be PCI-Compliant automatically. It offers payment solutions for various shopping cart applications including your own in house shopping cart application. \u200b Figure 1 \u200b Shopping cart applications supported by PayFort","title":"PayFort Payment Features"},{"location":"paymentpage/#using-payfort-iframe","text":"PayFort iFrame help you to create a payment form which is customizable. It gives the customer to provide their payment details on your site checkout page or in your mobile based app. Once the details are entered PayFort generates a secure single use token through tokenization process. This token can be used to request a payment without the need to store any customer's payment information in your site. PayFort processes the transaction and returns the results back to the your site through invisible redirection. Please refer figure 2. Figure 2 - Using PayFort iFrame","title":"Using PayFort iFrame"},{"location":"paymentpage/#how-it-works-overview","text":"1. The payment details form will appear to your Customer encapsulated inside an iframe that has the same look and feel of as that of your website. 2. PayFort then receives the payment details and sends you the confirmation to complete the transaction. Note - You have the option to redirect the Customer directly to the payment details form.","title":"How it Works - Overview"},{"location":"paymentpage/#integration-flow","text":"The customer begins the checkout process on your website. The payment page encapsulated inside iFrame is displayed. Then the Customer enters the card\u2019s details on the payment page. PayFort checks the card details. PayFort creates a token for the Customer transaction and sends it to the payment page. The Payment page then sends a JSON request along with the token to PayFort. In case your page receives from PayFort a 3-D Secure URL \u201c3ds_url\u201d, and response indicating that a 3Ds check is required: a. Your payment page redirects the Customer to the ACS to check his card enrollment. b. The Customer enters authentication data on the ACS platform. c. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFort. PayFort completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFort sends the payment results to your site. Note - In this case, PayFort returns status \u201c20: On hold\u201d and message \u201c064: 3-D Secure check requested\u201d . For example, PayFort is waiting for your payment page to authenticate the Customer.* If you include the \u201ctoken_name\u201d parameter in the request and this Token already has a successful Authorization, then the card number (masked) and expiry date will be displayed in their allocated fields. If the Token is sent by you, it will be generated with the same name as sent by your page. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details.","title":"Integration Flow"},{"location":"paymentpage/#2-using-custom-payment-form","text":"You can also design and develop your own custom for for collecting the card details. The card details are sent directly to PayFort and substituted with Token. You can then use this Token to complete the transaction.","title":"2. Using Custom Payment Form"},{"location":"paymentpage/#how-it-works-overview_1","text":"1. You develop your own custom payment details form that collects the card details (credit card number, expiry date, CVV), and sends the request to PayFort. 2. PayFort receives the payment details and returns the response which includes the Token to your payment processing page. 3. You use the token to complete the Authorization or Purchase operation . Note - You should develop a form that does not send data to your website but directly submits the form to PayFort.*","title":"How it works - overview"},{"location":"paymentpage/#integration-flow_1","text":"1. The Customer begins the checkout process on your website. 2. Your website displays the custom payment form to collect the card\u2019s details. Then the Customer enters the card\u2019s details on the payment page. 3. PayFort validates the card format. 4. PayFort creates a token for the card details and sends it back to your payment page. 5. Payment page stores the Token and proceeds with the transaction. 6. Payment page sends a payment request along with the Token to PayFort. 7. PayFort sends the 3-D Secure URL, and response indicating that a check is required: a. Payment page redirects the Customer to check his card enrollment. b. The Customer enters authentication data. c. 3-D Secure authentication is completed and PayFort receives the authentication results. Note - In this case, PayFort returns status \u201c20: On hold\u201d and message \u201c064: 3-D Secure check requested\u201d . For example, PayFort is waiting for the payment page to authenticate the Customer. 8. PayFort completes the operation based on the 3-D Secure response and returns the response to the website. 9. The payment results are displayed to the Customer. Note - If the Token is sent by the payment page, it will be generated with the same name sent by the website. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details.","title":"Integration Flow"},{"location":"paymentpage/#integration-page-operations","text":"","title":"Integration Page - Operations"},{"location":"paymentpage/#operations-urls","text":"","title":"Operations URLs"},{"location":"paymentpage/#test-environment-url","text":"https://sbpaymentservices.payfort.com/FortAPI/paymentApi","title":"Test Environment URL"},{"location":"paymentpage/#production-environment-url","text":"https://paymentservices.payfort.com/FortAPI/paymentApi","title":"Production Environment URL"},{"location":"paymentpage/#parameters-submission-type","text":"REST POST request using JSON.","title":"Parameters Submission Type"},{"location":"paymentpage/#how-to-add-the-tokenization-service-on-the-payment-page","text":"The Tokenization service is applicable to be integrated through the payment page through the below steps: 1. The Customer processes the first PURCHASE/ AUTHORIZATION payment successfully. 2. The payment page will receive a token_name in the response. This token_name should be considered as a permanent token name, and it can be used in the future customer\u2019s payments by submitting the token_name in the next PURCHASE/ AUTHORIZATION payment with card_security_code parameter. 3. No need to open the Payment Details Form to fill all the card details again in the next checkouts. If the Customer wants to update/ delete his card, you should check Update Token section. Note Please refer to section FORT Tokenization Service for more details about the token name parameter.","title":"How to add the Tokenization service on the Payment Page?"},{"location":"paymentpage/#payment-page-customization","text":"This is a list with all customizable CSS classes on the basic merchant page: The Wrapper class: responsible for the total width of the form container and the background. The Container class: responsible for the form\u2019s shape and width. The Popover class: responsible for the error messages. The Half-container class: used to merge the date and CVV fields into one block if needed. The Input class: is the container of each single input field. The Pay class: responsible for the submit button. The Visa/ MasterCard classes: used to change the color of the Visa/ MasterCard colors. Note - You can always create multiple theme files that will enable you to switch freely and easily between them when necessary. Note - \u201cTheme\u201d files can be uploaded from the back-office using the Payment Page template screen.","title":"Payment Page Customization"},{"location":"paymentpage1/","text":"Payment Page Features Payment Page URLs Test Environment URLs Production Environment URLs Parameters Submission Type 1. Using PayFort iFrame How it Works - Overview Integration Flow Request Parameters Response Parameters 2. Using Custom Payment Form How it works - overview Integration Flow Request Parameters Response Parameters Integration Page - Operations Operations URLs Test Environment URL Production Environment URL Parameters Submission Type Operations - Request Parameters Operations - Response Parameters How to add the Tokenization service on the Payment Page? Payment Page Customization Payment Page There are two ways by which you can create payment page as mentioned: Using PayFort iFrame . Using custom payment form. Features No Customer redirection which means your customers will not be redirected to third party website for payment and will be able to pay only on your page. No PCI-Compliance needed. Since PayFort is PCI-DSS compliant its means your business transactions will be PCI-Compliant. A replica of your website appearance and your payment flow. Payment Page URLs Test Environment URLs https://sbpaymentservices.payfort.com/FortAPI/paymentApi Production Environment URLs https://paymentservices.payfort.com/FortAPI/paymentApi Parameters Submission Type REST POST request using JSON 1. Using PayFort iFrame You can use PayFort iFrame on your website to collect Customer's credit card information. PayFort processes the transaction and returns the results back to the your site through invisible redirection. Please refer figure 1. Figure 1 - Using PayFort iFrame How it Works - Overview 1. The payment details form will appear to your Customer encapsulated inside an iframe that has the same look and feel of as that of your website. 2. PayFort then receives the payment details and sends you the confirmation to complete the transaction. Note - You have the option to redirect the Customer directly to the payment details form. Integration Flow The customer begins the checkout process on your website. The payment page encapsulated inside iFrame is displayed. Then the Customer enters the card\u2019s details on the payment page. PayFort checks the card details. PayFort creates a token for the Customer transaction and sends it to the payment page. The Payment page then sends a JSON request along with the token to PayFort. In case your page receives from PayFort a 3-D Secure URL \u201c3ds_url\u201d, and response indicating that a 3Ds check is required: a. Your payment page redirects the Customer to the ACS to check his card enrollment. b. The Customer enters authentication data on the ACS platform. c. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFort. PayFort completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFort sends the payment results to your site. Note - In this case, PayFort returns status \u201c20: On hold\u201d and message \u201c064: 3-D Secure check requested\u201d . For example, PayFort is waiting for your payment page to authenticate the Customer.* If you include the \u201ctoken_name\u201d parameter in the request and this Token already has a successful Authorization, then the card number (masked) and expiry date will be displayed in their allocated fields. If the Token is sent by you, it will be generated with the same name as sent by your page. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. Request Parameters Include the following parameters in the Request you will send to PayFort: service_command string,mandatory Attribute Features Description Type Command Maximum length 20 Possible values/Expected values TOKENIZATION Access_code alphanumeric, mandatory Attribute Features Description Type Access Code Maximum length 20 Possible values zx0IPmPy5jp1vAz merchant_identifier alphanumeric, mandatory Attribute Features Description Type The ID of the Merchant. Maximum length 20 Possible values CycHZxVj merchant_reference alphanumeric, mandatory Attribute Features Description Type Merchant\u2019s unique order number Maximum length 40 Special characters - _ . Possible values XYZ9239-yu898 language string, mandatory Attribute Features Description Type The checkout page and messages language. Maximum length 2 Possible values/Expected values en/ar signature hash, mandatory Attribute Features Description Type A string hashed using the Secure Hash Algorithm. Please refer to section Signature Maximum length 200 Example 7cad05f0212ed933c9a5d5dffa31661acf2c827a token_name alphanumeric, optional Attribute Features Description Type The token received from the Tokenization process. Maximum length 100 Special characters @ - _ Example Op9Vmp return_url alphanumeric, optional Attribute Features Description Type The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Maximum length 400 Special characters $ ! = ? # & - _ / Example http://www.merchant.com Response Parameters The following parameters will be returned in PayFort\u2019s Response: service_command string Attribute Features Description Type Command Maximum length 20 Possible values TOKENIZATION access_code alphanumeric Attribute Features Description Type Access Code Maximum length 20 Example zx0IPmPy5jp1vAz8Kpg7 merchant_identifier alphanumeric Attribute Features Description Type The ID of the Merchant. Maximum length 20 Example CycHZxVj merchant_reference alphanumeric Attribute Features Description Type The Merchant\u2019s unique order number. Maximum length 40 Example XYZ9239-yu898 language string Attribute Features Description Type The checkout page and message language. Maximum length 2 Possible values en/ar signature hash Attribute Features Description Type A string hashed using the Secure Hash Algorithm. Please refer to section Signature Maximum length 200 Example 7cad05f0212ed933c9a5d5dffa31661acf2c827a token_name alphanumeric Attribute Features Description Type The token received from the Tokenization process. Maximum length 100 Example Op9Vmp expiry_date numeric Attribute Features Description Type The card\u2019s expiry date. Maximum length 4 Example 2105 card_number numeric Attribute Features Description Type The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. * AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. Maximum length 19 Example 400555 **0001 response_message alphanumeric Attribute Features Description Type Message description of the response code. It returns according to the request language. Maximum length 150 Possible/expected values Please refer to section messages response_code numeric Attribute Features Description Type Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . Maximum length 5 Example 20064 status numeric Attribute Features Description Type A two-digit numeric value that indicates the status of the transaction. Maximum length 2 Possible/Expected values Please refer to section statuses . card_bin numeric Attribute Features Description Type The first 6 digits of the card number.*If the card number for MEEZA was of length 19 then the card bin will be the first 8 digits. Maximum length 8 Example 478773 return_url alphanumeric Attribute Features Description Type The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Maximum length 400 Example http://www.merchant.com Note: Every parameter that you send in the Request should be received at your end in the Response -even the optional ones-. 2. Using Custom Payment Form You can also design and develop your own custom for for collecting the card details. The card details are sent directly to PayFort and substituted with Token. You can then use this Token to complete the transaction. How it works - overview 1. You develop your own custom payment details form that collects the card details (credit card number, expiry date, CVV), and sends the request to PayFort. 2. PayFort receives the payment details and returns the response which includes the Token to your payment processing page. 3. You use the token to complete the Authorization or Purchase operation . Note - You should develop a form that does not send data to your website but directly submits the form to PayFort.* Integration Flow 1. The Customer begins the checkout process on your website. 2. Your website displays the custom payment form to collect the card\u2019s details. Then the Customer enters the card\u2019s details on the payment page. 3. PayFort validates the card format. 4. PayFort creates a token for the card details and sends it back to your payment page. 5. Payment page stores the Token and proceeds with the transaction. 6. Payment page sends a payment request along with the Token to PayFort. 7. PayFort sends the 3-D Secure URL, and response indicating that a check is required: a. Payment page redirects the Customer to check his card enrollment. b. The Customer enters authentication data. c. 3-D Secure authentication is completed and PayFort receives the authentication results. Note - In this case, PayFort returns status \u201c20: On hold\u201d and message \u201c064: 3-D Secure check requested\u201d . For example, PayFort is waiting for the payment page to authenticate the Customer. 8. PayFort completes the operation based on the 3-D Secure response and returns the response to the website. 9. The payment results are displayed to the Customer. Note - If the Token is sent by the payment page, it will be generated with the same name sent by the website. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. Request Parameters Include the following parameters in the Request you will send to PayFort: service_command string,mandatory Attribute Features Description Type Command Maximum length 20 Possible values/Expected values TOKENIZATION Access_code alphanumeric, mandatory Attribute Features Description Type Access Code Maximum length 20 Possible values zx0IPmPy5jp1vAz merchant_identifier alphanumeric, mandatory Attribute Features Description Type The ID of the Merchant. Maximum length 20 Possible values CycHZxVj merchant_reference alphanumeric, mandatory Attribute Features Description Type Merchant\u2019s unique order number Maximum length 40 Special characters - _ . Possible values XYZ9239-yu898 language string, mandatory Attribute Features Description Type The checkout page and messages language. Maximum length 2 Possible values/Expected values en/ar expiry_date numeric, mandatory Attribute Features Description Type The checkout page and messages language. Maximum length 4 Example 2105 card_number numeric, mandatory Attribute Features Description Type The clear credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. Maximum length 19 Example 4005550000000001 card_security_code numeric, mandatory Attribute Features Description Type A security code for the card. * Only AMEX accepts card security code of 4 digits. Maximum length 4 Example 123 signature hash, mandatory Attribute Features Description Type A string hashed using the Secure Hash Algorithm. Please refer to section Signature Maximum length 200 Example 7cad05f0212ed933c9a5d5dffa31661acf2c827a token_name alphanumeric, optional Attribute Features Description Type The token received from the Tokenization process. Maximum length 100 Special characters @ - _ Example Op9Vmp card_holder_name string, optional Attribute Features Description Type The card holder name. Maximum length 50 Special characters @ - _ Example John Smith remember_me string, optional Attribute Features Description Type This parameter provides you with an indication to whether to save this token for the user based on the user selection. Maximum length 3 Possible/Expected values -Yes -No return_url alphanumeric, optional Attribute Features Description Type The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Maximum length 400 Special characters $ ! = ? # & - _ / Example http://www.merchant.com Response Parameters The following parameters will be returned in PayFort\u2019s Response: service_command string Attribute Features Description Type Command Maximum length 20 Possible values TOKENIZATION access_code alphanumeric Attribute Features Description Type Access Code Maximum length 20 Example zx0IPmPy5jp1vAz8Kpg7 merchant_identifier alphanumeric Attribute Features Description Type The ID of the Merchant. Maximum length 20 Example CycHZxVj merchant_reference alphanumeric Attribute Features Description Type The Merchant\u2019s unique order number. Maximum length 40 Example XYZ9239-yu898 language string Attribute Features Description Type The checkout page and message language. Maximum length 2 Possible values en/ar signature hash Attribute Features Description Type A string hashed using the Secure Hash Algorithm. Please refer to section Signature Maximum length 200 Example 7cad05f0212ed933c9a5d5dffa31661acf2c827a token_name alphanumeric Attribute Features Description Type The token received from the Tokenization process. Maximum length 100 Example Op9Vmp expiry_date numeric Attribute Features Description Type The card\u2019s expiry date. Maximum length 4 Example 2105 card_number numeric Attribute Features Description Type The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. * AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. Maximum length 19 Example 400555 *0001 response_message alphanumeric Attribute Features Description Type Message description of the response code. It returns according to the request language. Maximum length 150 Possible/expected values Please refer to section messages response_code numeric Attribute Features Description Type Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . Maximum length 5 Example 20064 status numeric Attribute Features Description Type A two-digit numeric value that indicates the status of the transaction. Maximum length 2 Possible/Expected values Please refer to section statuses . card_bin numeric Attribute Features Description Type The first 6 digits of the card number.*If the card number for MEEZA was of length 19 then the card bin will be the first 8 digits. Maximum length 8 Example 478773 card_holder_name string Attribute Features Description Type The card holder name. Maximum length 50 Example John Smith remember_me string Attribute Features Description Type This parameter provides you with an indication to whether to save this token for the user based on the user selection. Maximum length 3 Possible/ expected values - YES, - NO return_url string Attribute Features Description Type The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Maximum length 400 Possible/ expected values http://www.merchant.com Note: Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones-. Integration Page - Operations Operations URLs Test Environment URL https://sbpaymentservices.payfort.com/FortAPI/paymentApi Production Environment URL https://paymentservices.payfort.com/FortAPI/paymentApi Parameters Submission Type REST POST request using JSON. Operations - Request Parameters Include the following parameters in the Request you will send to PayFort: command string, mandatory Attribute Features Description Type Command Maximum length 20 Possible values AUTHORIZATION, PURCHASE access_code alphanumeric, mandatory Attribute Features Description Type access code Maximum length 20 Example zx0IPmPy5jp1vAz merchant_identifier alphanumeric, mandatory Attribute Features Description Type The ID of the Merchant. Maximum length 20 Example CycHZxVj merchant_reference alphanumeric, mandatory Attribute Features Description Type The Merchant\u2019s unique order number. Special characters - _ . Maximum length 40 Example XYZ9239-yu898 amount numeric, mandatory Attribute Features Description Type The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount. Maximum length 10 Example 10000 currency string, mandatory Attribute Features Description Type The currency of the transaction\u2019s amount in ISO code 3. Maximum length 3 Example AED language string, mandatory Attribute Features Description Type The checkout page and messages language. Maximum length 2 Possible/Expected values en/ar customer_email alphanumeric, mandatory Attribute Features Description Type The customer's email Maximum length 254 Special Characters _ - . @ + Example customer@domain.com customer_ip alphanumeric, mandatory Attribute Features Description Type It holds the customer\u2019s IP address. It\u2019s Mandatory, if the fraud service is active. We support IPv4 and IPv6 as shown in the example below. Maximum length 45 Special Characters . : Example IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf token_name alphanumeric, mandatory Attribute Features Description Type The Token received from the Tokenization process. Maximum length 100 Special Characters - . @ ** Example Op9Vmp signature hash, mandatory Attribute Features Description Type A string hashed using the Secure Hash Algorithm. Please refer to section Signature Maximum length 200 Example 7cad05f0212ed933c9a5d5dffa31661acf2c827a payment_option string, optional Attribute Features Description Type Payment Option Maximum length 10 Possible/Expected values - MASTERCARD - VISA - AMEX - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) eci string, optional Attribute Features Description Type Ecommerce indicator. Maximum length 16 Possible/Expected values - ECOMMERCE - MOTO - RECCURING order_description alphanumeric, optional Attribute Features Description Type It holds the description of the order. Maximum length 150 Special characters ' / . _ - # : $ Space Example iPhone 6-S card_security_code numeric, optional Attribute Features Description Type A security code for the card. * Only AMEX accepts card security code of 4 digits. Maximum length 4 Example 123 customer_name string, optional Attribute Features Description Type The Customer\u2019s name Maximum length 40 Special characters _ \\ / - . ' Space Example John Smith merchant_extra alphanumeric, optional Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 999 Special characters . ; / _ - , ' @ Example John Smith merchant_extra1 alphanumeric, optional Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Special characters . ; / _ - , ' @ Example John Smith merchant_extra2 alphanumeric, optional Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Special characters . ; / _ - , ' @ Example John Smith merchant_extra3 alphanumeric, optional Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Special characters . ; / _ - , ' @ Example John Smith merchant_extra4 alphanumeric, optional Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Special characters . ; / _ - , ' @ Example John Smith merchant_extra5 alphanumeric, optional Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Special characters . ; / _ - , ' @ Example John Smith remember_me string, optional Attribute Features Description Type This parameter provides you with an indication to whether to save this token for the user based on the user selection. *The Tokenization service MUST be activated in order to be able to send \u201cremember_me\u201d parameter. Maximum length 3 Possible/Expected values -Yes - No phone_number alphanumeric, optional Attribute Features Description Type The customer\u2019s number Maximum length 19 Special characters + - ( ) Space Example 00962797219966 settlement_reference alphanumeric, optional Attribute Features Description Type The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Maximum length 34 Special characters - _ . Example XYZ9239-yu898 return_url alphanumeric, optional Attribute Features Description Type The URL of the Merchant\u2019s page to be displayed to the customer when theorder is processed. Maximum length 400 Special characters $ ! = ? # & - _ / : . Example http://www.merchant.com Note : Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. Operations - Response Parameters The following parameters will be returned in PayFort\u2019s Response: command string Attribute Features Description Type Command Maximum length 20 Possible values AUTHORIZATION, PURCHASE access_code alphanumeric Attribute Features Description Type access code Maximum length 20 Example zx0IPmPy5jp1vAz merchant_identifier alphanumeric Attribute Features Description Type The ID of the Merchant. Maximum length 20 Example CycHZxVj merchant_reference alphanumeric Attribute Features Description Type The Merchant\u2019s unique order number. Maximum length 40 Example XYZ9239-yu898 amount numeric Attribute Features Description Type The transaction\u2019s amount. Maximum length 10 Example 10000 currency string Attribute Features Description Type The currency of the transaction\u2019s amount in ISO code 3. Maximum length 3 Example AED language string Attribute Features Description Type The checkout page and messages language. Maximum length 2 Possible/Expected values en/ar customer_email alphanumeric Attribute Features Description Type The customer's email Maximum length 254 Example customer1@domain.com customer_ip alphanumeric Attribute Features Description Type It holds the customer\u2019s IP address. *We support IPv4 and IPv6. Maximum length 45 Example IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf token_name alphanumeric Attribute Features Description Type The Token received from the Tokenization process. Maximum length 100 Example Op9Vmp signature hash Attribute Features Description Type A string hashed using the Secure Hash Algorithm. Maximum length 200 Example 7cad05f0212ed933c9a5d5dffa31661acf2c827a payment_option string Attribute Features Description Type Payment Option Maximum length 10 Possible/Expected values - MASTERCARD - VISA - AMEX - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) eci string, Attribute Features Description Type Ecommerce indicator. Maximum length 16 Possible/Expected values - ECOMMERCE - MOTO - RECCURING order_description alphanumeric Attribute Features Description Type It holds the description of the order. Maximum length 150 Example iPhone 6-S fort_id numeric Attribute Features Description Type The order\u2019s unique reference returned by our system. Maximum length 20 Example 149295435400084008 authorization_code alphanumeric Attribute Features Description Type The authorization code returned from the 3rd party. Maximum length 100 Example P1000000000000372136 response_message alphanumeric Attribute Features Description Type Message description of the response code. It returns according to the request language. Maximum length 150 Possible/Expected values Please refer to section messages response_code numeric Attribute Features Description Type Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . Maximum length 5 Example 20064 customer_name string Attribute Features Description Type The Customer\u2019s name Maximum length 40 Example John Smith merchant_extra alphanumeric, Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 999 Example John Smith merchant_extra1 alphanumeric Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Example John Smith merchant_extra2 alphanumeric Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Example John Smith merchant_extra3 alphanumeric Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Example John Smith merchant_extra4 alphanumeric Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Example John Smith merchant_extra5 alphanumeric Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Example John Smith expiry_date numeric Attribute Features Description Type The card\u2019s expiry date. Maximum length 4 Example 2105 card_number numeric Attribute Features Description Type The masked credit card\u2019s number. Only the MEEZA payment option takes19 digits card number. AMEX payment option takes 15 digits card number. Otherwise, they take 16 digits card number. Maximum length 19 Example 400555 * *0001 status numeric Attribute Features Description Type A two-digit numeric value that indicates the status of the transaction. Maximum length 2 Possible/Expected values Please refer to section statuses card_holder_name string Attribute Features Description Type The card holder name. Maximum length 50 Example John Smith 3ds_url alphanumeric Attribute Features Description Type The URL where the Merchant redirects a customer whose card is 3-D Secure for authentication. Maximum length 300 Example http://www.3dsecure.com remember_me string Attribute Features Description Type This parameter provides you with an indication to whether to save this token for the user based on the user selection. Maximum length 3 Possible/Expected values -Yes -No phone_number alphanumeric Attribute Features Description Type The customer\u2019s phone number. Maximum length 19 Example 00962797219966 settlement_reference alphanumeric Attribute Features Description Type The Merchant submits this value to the FORT. The value is then passed to the acquiring bank and displayed to the merchant in the Acquirer settlement file. Maximum length 34 Example XYZ9239-yu898 Note - Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones-. How to add the Tokenization service on the Payment Page? The Tokenization service is applicable to be integrated through the payment page through the below steps: 1. The Customer processes the first PURCHASE/ AUTHORIZATION payment successfully. 2. The payment page will receive a token_name in the response. This token_name should be considered as a permanent token name, and it can be used in the future customer\u2019s payments by submitting the token_name in the next PURCHASE/ AUTHORIZATION payment with card_security_code parameter. 3. No need to open the Payment Details Form to fill all the card details again in the next checkouts. If the Customer wants to update/ delete his card, you should check Update Token section. Note Please refer to section FORT Tokenization Service for more details about the token name parameter. Payment Page Customization This is a list with all customizable CSS classes on the basic merchant page: The Wrapper class: responsible for the total width of the form container and the background. The Container class: responsible for the form\u2019s shape and width. The Popover class: responsible for the error messages. The Half-container class: used to merge the date and CVV fields into one block if needed. The Input class: is the container of each single input field. The Pay class: responsible for the submit button. The Visa/ MasterCard classes: used to change the color of the Visa/ MasterCard colors. Note - You can always create multiple theme files that will enable you to switch freely and easily between them when necessary. Note - \u201cTheme\u201d files can be uploaded from the back-office using the Payment Page template screen.","title":"Paymentpage1"},{"location":"paymentpage1/#payment-page","text":"There are two ways by which you can create payment page as mentioned: Using PayFort iFrame . Using custom payment form.","title":"Payment Page"},{"location":"paymentpage1/#features","text":"No Customer redirection which means your customers will not be redirected to third party website for payment and will be able to pay only on your page. No PCI-Compliance needed. Since PayFort is PCI-DSS compliant its means your business transactions will be PCI-Compliant. A replica of your website appearance and your payment flow.","title":"Features"},{"location":"paymentpage1/#payment-page-urls","text":"","title":"Payment Page URLs"},{"location":"paymentpage1/#test-environment-urls","text":"https://sbpaymentservices.payfort.com/FortAPI/paymentApi","title":"Test Environment URLs"},{"location":"paymentpage1/#production-environment-urls","text":"https://paymentservices.payfort.com/FortAPI/paymentApi","title":"Production Environment URLs"},{"location":"paymentpage1/#parameters-submission-type","text":"REST POST request using JSON","title":"Parameters Submission Type"},{"location":"paymentpage1/#1-using-payfort-iframe","text":"You can use PayFort iFrame on your website to collect Customer's credit card information. PayFort processes the transaction and returns the results back to the your site through invisible redirection. Please refer figure 1. Figure 1 - Using PayFort iFrame","title":"1. Using PayFort iFrame"},{"location":"paymentpage1/#how-it-works-overview","text":"1. The payment details form will appear to your Customer encapsulated inside an iframe that has the same look and feel of as that of your website. 2. PayFort then receives the payment details and sends you the confirmation to complete the transaction. Note - You have the option to redirect the Customer directly to the payment details form.","title":"How it Works - Overview"},{"location":"paymentpage1/#integration-flow","text":"The customer begins the checkout process on your website. The payment page encapsulated inside iFrame is displayed. Then the Customer enters the card\u2019s details on the payment page. PayFort checks the card details. PayFort creates a token for the Customer transaction and sends it to the payment page. The Payment page then sends a JSON request along with the token to PayFort. In case your page receives from PayFort a 3-D Secure URL \u201c3ds_url\u201d, and response indicating that a 3Ds check is required: a. Your payment page redirects the Customer to the ACS to check his card enrollment. b. The Customer enters authentication data on the ACS platform. c. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFort. PayFort completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFort sends the payment results to your site. Note - In this case, PayFort returns status \u201c20: On hold\u201d and message \u201c064: 3-D Secure check requested\u201d . For example, PayFort is waiting for your payment page to authenticate the Customer.* If you include the \u201ctoken_name\u201d parameter in the request and this Token already has a successful Authorization, then the card number (masked) and expiry date will be displayed in their allocated fields. If the Token is sent by you, it will be generated with the same name as sent by your page. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details.","title":"Integration Flow"},{"location":"paymentpage1/#request-parameters","text":"Include the following parameters in the Request you will send to PayFort: service_command string,mandatory Attribute Features Description Type Command Maximum length 20 Possible values/Expected values TOKENIZATION Access_code alphanumeric, mandatory Attribute Features Description Type Access Code Maximum length 20 Possible values zx0IPmPy5jp1vAz merchant_identifier alphanumeric, mandatory Attribute Features Description Type The ID of the Merchant. Maximum length 20 Possible values CycHZxVj merchant_reference alphanumeric, mandatory Attribute Features Description Type Merchant\u2019s unique order number Maximum length 40 Special characters - _ . Possible values XYZ9239-yu898 language string, mandatory Attribute Features Description Type The checkout page and messages language. Maximum length 2 Possible values/Expected values en/ar signature hash, mandatory Attribute Features Description Type A string hashed using the Secure Hash Algorithm. Please refer to section Signature Maximum length 200 Example 7cad05f0212ed933c9a5d5dffa31661acf2c827a token_name alphanumeric, optional Attribute Features Description Type The token received from the Tokenization process. Maximum length 100 Special characters @ - _ Example Op9Vmp return_url alphanumeric, optional Attribute Features Description Type The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Maximum length 400 Special characters $ ! = ? # & - _ / Example http://www.merchant.com","title":"Request Parameters"},{"location":"paymentpage1/#response-parameters","text":"The following parameters will be returned in PayFort\u2019s Response: service_command string Attribute Features Description Type Command Maximum length 20 Possible values TOKENIZATION access_code alphanumeric Attribute Features Description Type Access Code Maximum length 20 Example zx0IPmPy5jp1vAz8Kpg7 merchant_identifier alphanumeric Attribute Features Description Type The ID of the Merchant. Maximum length 20 Example CycHZxVj merchant_reference alphanumeric Attribute Features Description Type The Merchant\u2019s unique order number. Maximum length 40 Example XYZ9239-yu898 language string Attribute Features Description Type The checkout page and message language. Maximum length 2 Possible values en/ar signature hash Attribute Features Description Type A string hashed using the Secure Hash Algorithm. Please refer to section Signature Maximum length 200 Example 7cad05f0212ed933c9a5d5dffa31661acf2c827a token_name alphanumeric Attribute Features Description Type The token received from the Tokenization process. Maximum length 100 Example Op9Vmp expiry_date numeric Attribute Features Description Type The card\u2019s expiry date. Maximum length 4 Example 2105 card_number numeric Attribute Features Description Type The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. * AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. Maximum length 19 Example 400555 **0001 response_message alphanumeric Attribute Features Description Type Message description of the response code. It returns according to the request language. Maximum length 150 Possible/expected values Please refer to section messages response_code numeric Attribute Features Description Type Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . Maximum length 5 Example 20064 status numeric Attribute Features Description Type A two-digit numeric value that indicates the status of the transaction. Maximum length 2 Possible/Expected values Please refer to section statuses . card_bin numeric Attribute Features Description Type The first 6 digits of the card number.*If the card number for MEEZA was of length 19 then the card bin will be the first 8 digits. Maximum length 8 Example 478773 return_url alphanumeric Attribute Features Description Type The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Maximum length 400 Example http://www.merchant.com Note: Every parameter that you send in the Request should be received at your end in the Response -even the optional ones-.","title":"Response Parameters"},{"location":"paymentpage1/#2-using-custom-payment-form","text":"You can also design and develop your own custom for for collecting the card details. The card details are sent directly to PayFort and substituted with Token. You can then use this Token to complete the transaction.","title":"2. Using Custom Payment Form"},{"location":"paymentpage1/#how-it-works-overview_1","text":"1. You develop your own custom payment details form that collects the card details (credit card number, expiry date, CVV), and sends the request to PayFort. 2. PayFort receives the payment details and returns the response which includes the Token to your payment processing page. 3. You use the token to complete the Authorization or Purchase operation . Note - You should develop a form that does not send data to your website but directly submits the form to PayFort.*","title":"How it works - overview"},{"location":"paymentpage1/#integration-flow_1","text":"1. The Customer begins the checkout process on your website. 2. Your website displays the custom payment form to collect the card\u2019s details. Then the Customer enters the card\u2019s details on the payment page. 3. PayFort validates the card format. 4. PayFort creates a token for the card details and sends it back to your payment page. 5. Payment page stores the Token and proceeds with the transaction. 6. Payment page sends a payment request along with the Token to PayFort. 7. PayFort sends the 3-D Secure URL, and response indicating that a check is required: a. Payment page redirects the Customer to check his card enrollment. b. The Customer enters authentication data. c. 3-D Secure authentication is completed and PayFort receives the authentication results. Note - In this case, PayFort returns status \u201c20: On hold\u201d and message \u201c064: 3-D Secure check requested\u201d . For example, PayFort is waiting for the payment page to authenticate the Customer. 8. PayFort completes the operation based on the 3-D Secure response and returns the response to the website. 9. The payment results are displayed to the Customer. Note - If the Token is sent by the payment page, it will be generated with the same name sent by the website. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details.","title":"Integration Flow"},{"location":"paymentpage1/#request-parameters_1","text":"Include the following parameters in the Request you will send to PayFort: service_command string,mandatory Attribute Features Description Type Command Maximum length 20 Possible values/Expected values TOKENIZATION Access_code alphanumeric, mandatory Attribute Features Description Type Access Code Maximum length 20 Possible values zx0IPmPy5jp1vAz merchant_identifier alphanumeric, mandatory Attribute Features Description Type The ID of the Merchant. Maximum length 20 Possible values CycHZxVj merchant_reference alphanumeric, mandatory Attribute Features Description Type Merchant\u2019s unique order number Maximum length 40 Special characters - _ . Possible values XYZ9239-yu898 language string, mandatory Attribute Features Description Type The checkout page and messages language. Maximum length 2 Possible values/Expected values en/ar expiry_date numeric, mandatory Attribute Features Description Type The checkout page and messages language. Maximum length 4 Example 2105 card_number numeric, mandatory Attribute Features Description Type The clear credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. Maximum length 19 Example 4005550000000001 card_security_code numeric, mandatory Attribute Features Description Type A security code for the card. * Only AMEX accepts card security code of 4 digits. Maximum length 4 Example 123 signature hash, mandatory Attribute Features Description Type A string hashed using the Secure Hash Algorithm. Please refer to section Signature Maximum length 200 Example 7cad05f0212ed933c9a5d5dffa31661acf2c827a token_name alphanumeric, optional Attribute Features Description Type The token received from the Tokenization process. Maximum length 100 Special characters @ - _ Example Op9Vmp card_holder_name string, optional Attribute Features Description Type The card holder name. Maximum length 50 Special characters @ - _ Example John Smith remember_me string, optional Attribute Features Description Type This parameter provides you with an indication to whether to save this token for the user based on the user selection. Maximum length 3 Possible/Expected values -Yes -No return_url alphanumeric, optional Attribute Features Description Type The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Maximum length 400 Special characters $ ! = ? # & - _ / Example http://www.merchant.com","title":"Request Parameters"},{"location":"paymentpage1/#response-parameters_1","text":"The following parameters will be returned in PayFort\u2019s Response: service_command string Attribute Features Description Type Command Maximum length 20 Possible values TOKENIZATION access_code alphanumeric Attribute Features Description Type Access Code Maximum length 20 Example zx0IPmPy5jp1vAz8Kpg7 merchant_identifier alphanumeric Attribute Features Description Type The ID of the Merchant. Maximum length 20 Example CycHZxVj merchant_reference alphanumeric Attribute Features Description Type The Merchant\u2019s unique order number. Maximum length 40 Example XYZ9239-yu898 language string Attribute Features Description Type The checkout page and message language. Maximum length 2 Possible values en/ar signature hash Attribute Features Description Type A string hashed using the Secure Hash Algorithm. Please refer to section Signature Maximum length 200 Example 7cad05f0212ed933c9a5d5dffa31661acf2c827a token_name alphanumeric Attribute Features Description Type The token received from the Tokenization process. Maximum length 100 Example Op9Vmp expiry_date numeric Attribute Features Description Type The card\u2019s expiry date. Maximum length 4 Example 2105 card_number numeric Attribute Features Description Type The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. * AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. Maximum length 19 Example 400555 *0001 response_message alphanumeric Attribute Features Description Type Message description of the response code. It returns according to the request language. Maximum length 150 Possible/expected values Please refer to section messages response_code numeric Attribute Features Description Type Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . Maximum length 5 Example 20064 status numeric Attribute Features Description Type A two-digit numeric value that indicates the status of the transaction. Maximum length 2 Possible/Expected values Please refer to section statuses . card_bin numeric Attribute Features Description Type The first 6 digits of the card number.*If the card number for MEEZA was of length 19 then the card bin will be the first 8 digits. Maximum length 8 Example 478773 card_holder_name string Attribute Features Description Type The card holder name. Maximum length 50 Example John Smith remember_me string Attribute Features Description Type This parameter provides you with an indication to whether to save this token for the user based on the user selection. Maximum length 3 Possible/ expected values - YES, - NO return_url string Attribute Features Description Type The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Maximum length 400 Possible/ expected values http://www.merchant.com Note: Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones-.","title":"Response Parameters"},{"location":"paymentpage1/#integration-page-operations","text":"","title":"Integration Page - Operations"},{"location":"paymentpage1/#operations-urls","text":"","title":"Operations URLs"},{"location":"paymentpage1/#test-environment-url","text":"https://sbpaymentservices.payfort.com/FortAPI/paymentApi","title":"Test Environment URL"},{"location":"paymentpage1/#production-environment-url","text":"https://paymentservices.payfort.com/FortAPI/paymentApi","title":"Production Environment URL"},{"location":"paymentpage1/#parameters-submission-type_1","text":"REST POST request using JSON.","title":"Parameters Submission Type"},{"location":"paymentpage1/#operations-request-parameters","text":"Include the following parameters in the Request you will send to PayFort: command string, mandatory Attribute Features Description Type Command Maximum length 20 Possible values AUTHORIZATION, PURCHASE access_code alphanumeric, mandatory Attribute Features Description Type access code Maximum length 20 Example zx0IPmPy5jp1vAz merchant_identifier alphanumeric, mandatory Attribute Features Description Type The ID of the Merchant. Maximum length 20 Example CycHZxVj merchant_reference alphanumeric, mandatory Attribute Features Description Type The Merchant\u2019s unique order number. Special characters - _ . Maximum length 40 Example XYZ9239-yu898 amount numeric, mandatory Attribute Features Description Type The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount. Maximum length 10 Example 10000 currency string, mandatory Attribute Features Description Type The currency of the transaction\u2019s amount in ISO code 3. Maximum length 3 Example AED language string, mandatory Attribute Features Description Type The checkout page and messages language. Maximum length 2 Possible/Expected values en/ar customer_email alphanumeric, mandatory Attribute Features Description Type The customer's email Maximum length 254 Special Characters _ - . @ + Example customer@domain.com customer_ip alphanumeric, mandatory Attribute Features Description Type It holds the customer\u2019s IP address. It\u2019s Mandatory, if the fraud service is active. We support IPv4 and IPv6 as shown in the example below. Maximum length 45 Special Characters . : Example IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf token_name alphanumeric, mandatory Attribute Features Description Type The Token received from the Tokenization process. Maximum length 100 Special Characters - . @ ** Example Op9Vmp signature hash, mandatory Attribute Features Description Type A string hashed using the Secure Hash Algorithm. Please refer to section Signature Maximum length 200 Example 7cad05f0212ed933c9a5d5dffa31661acf2c827a payment_option string, optional Attribute Features Description Type Payment Option Maximum length 10 Possible/Expected values - MASTERCARD - VISA - AMEX - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) eci string, optional Attribute Features Description Type Ecommerce indicator. Maximum length 16 Possible/Expected values - ECOMMERCE - MOTO - RECCURING order_description alphanumeric, optional Attribute Features Description Type It holds the description of the order. Maximum length 150 Special characters ' / . _ - # : $ Space Example iPhone 6-S card_security_code numeric, optional Attribute Features Description Type A security code for the card. * Only AMEX accepts card security code of 4 digits. Maximum length 4 Example 123 customer_name string, optional Attribute Features Description Type The Customer\u2019s name Maximum length 40 Special characters _ \\ / - . ' Space Example John Smith merchant_extra alphanumeric, optional Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 999 Special characters . ; / _ - , ' @ Example John Smith merchant_extra1 alphanumeric, optional Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Special characters . ; / _ - , ' @ Example John Smith merchant_extra2 alphanumeric, optional Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Special characters . ; / _ - , ' @ Example John Smith merchant_extra3 alphanumeric, optional Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Special characters . ; / _ - , ' @ Example John Smith merchant_extra4 alphanumeric, optional Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Special characters . ; / _ - , ' @ Example John Smith merchant_extra5 alphanumeric, optional Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Special characters . ; / _ - , ' @ Example John Smith remember_me string, optional Attribute Features Description Type This parameter provides you with an indication to whether to save this token for the user based on the user selection. *The Tokenization service MUST be activated in order to be able to send \u201cremember_me\u201d parameter. Maximum length 3 Possible/Expected values -Yes - No phone_number alphanumeric, optional Attribute Features Description Type The customer\u2019s number Maximum length 19 Special characters + - ( ) Space Example 00962797219966 settlement_reference alphanumeric, optional Attribute Features Description Type The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Maximum length 34 Special characters - _ . Example XYZ9239-yu898 return_url alphanumeric, optional Attribute Features Description Type The URL of the Merchant\u2019s page to be displayed to the customer when theorder is processed. Maximum length 400 Special characters $ ! = ? # & - _ / : . Example http://www.merchant.com Note : Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"Operations - Request Parameters"},{"location":"paymentpage1/#operations-response-parameters","text":"The following parameters will be returned in PayFort\u2019s Response: command string Attribute Features Description Type Command Maximum length 20 Possible values AUTHORIZATION, PURCHASE access_code alphanumeric Attribute Features Description Type access code Maximum length 20 Example zx0IPmPy5jp1vAz merchant_identifier alphanumeric Attribute Features Description Type The ID of the Merchant. Maximum length 20 Example CycHZxVj merchant_reference alphanumeric Attribute Features Description Type The Merchant\u2019s unique order number. Maximum length 40 Example XYZ9239-yu898 amount numeric Attribute Features Description Type The transaction\u2019s amount. Maximum length 10 Example 10000 currency string Attribute Features Description Type The currency of the transaction\u2019s amount in ISO code 3. Maximum length 3 Example AED language string Attribute Features Description Type The checkout page and messages language. Maximum length 2 Possible/Expected values en/ar customer_email alphanumeric Attribute Features Description Type The customer's email Maximum length 254 Example customer1@domain.com customer_ip alphanumeric Attribute Features Description Type It holds the customer\u2019s IP address. *We support IPv4 and IPv6. Maximum length 45 Example IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf token_name alphanumeric Attribute Features Description Type The Token received from the Tokenization process. Maximum length 100 Example Op9Vmp signature hash Attribute Features Description Type A string hashed using the Secure Hash Algorithm. Maximum length 200 Example 7cad05f0212ed933c9a5d5dffa31661acf2c827a payment_option string Attribute Features Description Type Payment Option Maximum length 10 Possible/Expected values - MASTERCARD - VISA - AMEX - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) eci string, Attribute Features Description Type Ecommerce indicator. Maximum length 16 Possible/Expected values - ECOMMERCE - MOTO - RECCURING order_description alphanumeric Attribute Features Description Type It holds the description of the order. Maximum length 150 Example iPhone 6-S fort_id numeric Attribute Features Description Type The order\u2019s unique reference returned by our system. Maximum length 20 Example 149295435400084008 authorization_code alphanumeric Attribute Features Description Type The authorization code returned from the 3rd party. Maximum length 100 Example P1000000000000372136 response_message alphanumeric Attribute Features Description Type Message description of the response code. It returns according to the request language. Maximum length 150 Possible/Expected values Please refer to section messages response_code numeric Attribute Features Description Type Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . Maximum length 5 Example 20064 customer_name string Attribute Features Description Type The Customer\u2019s name Maximum length 40 Example John Smith merchant_extra alphanumeric, Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 999 Example John Smith merchant_extra1 alphanumeric Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Example John Smith merchant_extra2 alphanumeric Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Example John Smith merchant_extra3 alphanumeric Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Example John Smith merchant_extra4 alphanumeric Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Example John Smith merchant_extra5 alphanumeric Attribute Features Description Type Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Maximum length 250 Example John Smith expiry_date numeric Attribute Features Description Type The card\u2019s expiry date. Maximum length 4 Example 2105 card_number numeric Attribute Features Description Type The masked credit card\u2019s number. Only the MEEZA payment option takes19 digits card number. AMEX payment option takes 15 digits card number. Otherwise, they take 16 digits card number. Maximum length 19 Example 400555 * *0001 status numeric Attribute Features Description Type A two-digit numeric value that indicates the status of the transaction. Maximum length 2 Possible/Expected values Please refer to section statuses card_holder_name string Attribute Features Description Type The card holder name. Maximum length 50 Example John Smith 3ds_url alphanumeric Attribute Features Description Type The URL where the Merchant redirects a customer whose card is 3-D Secure for authentication. Maximum length 300 Example http://www.3dsecure.com remember_me string Attribute Features Description Type This parameter provides you with an indication to whether to save this token for the user based on the user selection. Maximum length 3 Possible/Expected values -Yes -No phone_number alphanumeric Attribute Features Description Type The customer\u2019s phone number. Maximum length 19 Example 00962797219966 settlement_reference alphanumeric Attribute Features Description Type The Merchant submits this value to the FORT. The value is then passed to the acquiring bank and displayed to the merchant in the Acquirer settlement file. Maximum length 34 Example XYZ9239-yu898 Note - Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones-.","title":"Operations - Response Parameters"},{"location":"paymentpage1/#how-to-add-the-tokenization-service-on-the-payment-page","text":"The Tokenization service is applicable to be integrated through the payment page through the below steps: 1. The Customer processes the first PURCHASE/ AUTHORIZATION payment successfully. 2. The payment page will receive a token_name in the response. This token_name should be considered as a permanent token name, and it can be used in the future customer\u2019s payments by submitting the token_name in the next PURCHASE/ AUTHORIZATION payment with card_security_code parameter. 3. No need to open the Payment Details Form to fill all the card details again in the next checkouts. If the Customer wants to update/ delete his card, you should check Update Token section. Note Please refer to section FORT Tokenization Service for more details about the token name parameter.","title":"How to add the Tokenization service on the Payment Page?"},{"location":"paymentpage1/#payment-page-customization","text":"This is a list with all customizable CSS classes on the basic merchant page: The Wrapper class: responsible for the total width of the form container and the background. The Container class: responsible for the form\u2019s shape and width. The Popover class: responsible for the error messages. The Half-container class: used to merge the date and CVV fields into one block if needed. The Input class: is the container of each single input field. The Pay class: responsible for the submit button. The Visa/ MasterCard classes: used to change the color of the Visa/ MasterCard colors. Note - You can always create multiple theme files that will enable you to switch freely and easily between them when necessary. Note - \u201cTheme\u201d files can be uploaded from the back-office using the Payment Page template screen.","title":"Payment Page Customization"},{"location":"plugins/","text":"Get Started With PayFort Plugins PAYFORT offers the following free gateway plugins to help you enable \u201cPayFort Payment Gateway\u201d easily to your e-Commerce store. So your customers will be able to complete their payments through PayFort gateway, Plus you can customize these plugins to meet your needs! Prestashop Get Started Github Repo Woocommerce Get Started Github Repo Magento Get Started Github Repo Magento 2 Get Started Github Repo Cs Cart 3 Get Started Github Repo Cs Cart 4 Get Started Github Repo Open Cart Get Started Github Repo Open Cart 2 Get Started Github Repo Php Get Started Github Repo","title":"Plugins"},{"location":"plugins/#get-started-with-payfort-plugins","text":"PAYFORT offers the following free gateway plugins to help you enable \u201cPayFort Payment Gateway\u201d easily to your e-Commerce store. So your customers will be able to complete their payments through PayFort gateway, Plus you can customize these plugins to meet your needs!","title":"Get Started With PayFort Plugins"},{"location":"redirection/","text":"Redirection process enables you to capture payments. PayFort Redirection consists of Authorization and Purchase processing. How it works? The Authorization operation hold an amount from the Customer\u2019s credit card account for a period of time until you capture or void the transaction. If no capture or void is processed during this period, the transaction will be voided automatically. In Purchase you will send one single request in order to authorize and capture the transaction amount. We offer you to Redirect your Customer from your website to PayFort\u2019s gateway page to fill out his credit card details during these operations. Looking to void a payment? You can void an authorized payment at any time. However, captured payments can only be refunded . Before you Start You are required to signup for test account by visiting this link for testing your sample integrations. You can also directly get started by signing up for the live account by visiting this link Try it out You can use the below URLS to test the redirection methods. Endpoints SandBox: POST https://sbcheckout.payfort.com/FortAPI/paymentPage Live: POST https://checkout.payfort.com/FortAPI/paymentPage How to add the Tokenization service on the Redirection channel? The Tokenization service is applicable to be integrated through the Redirection Channel through the below steps: The Customer enables the remember_me option displayed in the payment page. Processes the first PURCHASE/ AUTHORIZATION payment successfully. The Merchant will receive a token_name in the response. This token_name should be considered as a permanent token name, and it can be used in the future customer\u2019s payments by submitting the token_name in the next PURCHASE/ AUTHORIZATION payment. If the Customer wants to update/ delete his card, you should check Update Token section. Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"What is redirection?"},{"location":"redirection/#how-it-works","text":"The Authorization operation hold an amount from the Customer\u2019s credit card account for a period of time until you capture or void the transaction. If no capture or void is processed during this period, the transaction will be voided automatically. In Purchase you will send one single request in order to authorize and capture the transaction amount. We offer you to Redirect your Customer from your website to PayFort\u2019s gateway page to fill out his credit card details during these operations. Looking to void a payment? You can void an authorized payment at any time. However, captured payments can only be refunded .","title":"How it works?"},{"location":"redirection/#before-you-start","text":"You are required to signup for test account by visiting this link for testing your sample integrations. You can also directly get started by signing up for the live account by visiting this link","title":"Before you Start"},{"location":"redirection/#try-it-out","text":"You can use the below URLS to test the redirection methods.","title":"Try it out"},{"location":"redirection/#endpoints","text":"SandBox: POST https://sbcheckout.payfort.com/FortAPI/paymentPage Live: POST https://checkout.payfort.com/FortAPI/paymentPage","title":"Endpoints"},{"location":"redirection/#how-to-add-the-tokenization-service-on-the-redirection-channel","text":"The Tokenization service is applicable to be integrated through the Redirection Channel through the below steps: The Customer enables the remember_me option displayed in the payment page. Processes the first PURCHASE/ AUTHORIZATION payment successfully. The Merchant will receive a token_name in the response. This token_name should be considered as a permanent token name, and it can be used in the future customer\u2019s payments by submitting the token_name in the next PURCHASE/ AUTHORIZATION payment. If the Customer wants to update/ delete his card, you should check Update Token section.","title":"How to add the Tokenization service on the Redirection channel?"},{"location":"redirection/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"redirection/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"refund/","text":"Refund a payment This operation returns the entire amount of a transaction or part of it AFTER being captured. The request Use the details below to set up your request. Endpoints Live POST https://paymentservices.payfort.com/FortAPI/paymentApi Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi Request example JSON { 'command':'REFUND', 'access_code':'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier':'CycHZxVj', 'merchant_reference':' XYZ9239-yu898', 'amount':'10000', 'currency':'AED', 'language':'en', 'signature':'7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'fort_id':'149295435400084008', 'order_description':'iPhone 6-S', } The response If you receive status code 20064 with status code 04 it means your request for refund has been accepted by the PayFort Server. The response sent by the server will be in the format of JSON. Response examples {\"command\":\"REFUND\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239-yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"fort_id\":\"149295435400084008\", \"order_description\":\"iPhone 6-S\", \"response_message\":\"Success\", \"response_code\":\"20064\", status\":\"04\" } You can check out various transaction codes by visiting this link Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Refund Payment"},{"location":"refund/#refund-a-payment","text":"This operation returns the entire amount of a transaction or part of it AFTER being captured.","title":"Refund a payment"},{"location":"refund/#the-request","text":"Use the details below to set up your request.","title":"The request"},{"location":"refund/#endpoints","text":"","title":"Endpoints"},{"location":"refund/#live","text":"POST https://paymentservices.payfort.com/FortAPI/paymentApi","title":"Live"},{"location":"refund/#sandbox","text":"POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi","title":"Sandbox"},{"location":"refund/#request-example","text":"","title":"Request example"},{"location":"refund/#json","text":"{ 'command':'REFUND', 'access_code':'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier':'CycHZxVj', 'merchant_reference':' XYZ9239-yu898', 'amount':'10000', 'currency':'AED', 'language':'en', 'signature':'7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'fort_id':'149295435400084008', 'order_description':'iPhone 6-S', }","title":"JSON"},{"location":"refund/#the-response","text":"If you receive status code 20064 with status code 04 it means your request for refund has been accepted by the PayFort Server. The response sent by the server will be in the format of JSON.","title":"The response"},{"location":"refund/#response-examples","text":"{\"command\":\"REFUND\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239-yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"fort_id\":\"149295435400084008\", \"order_description\":\"iPhone 6-S\", \"response_message\":\"Success\", \"response_code\":\"20064\", status\":\"04\" } You can check out various transaction codes by visiting this link","title":"Response examples"},{"location":"refund/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"refund/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"testing/","text":"Testing Our testing environment provides you with opportunity to test your integration. You can sign up for test account and get started with testing your integrations. Test Card Details You want to test a transaction but you don\u2019t have a credit card or user credentials for our other payments options? Well we\u2019ve got your back, here you can find card numbers for any type of test you wish to do. Credit Cards Card Type Number Expiry Date CVV/CVC Visa 4005550000000001 05/21 123 MasterCard 5123456789012346 05/21 123 AMEX 345678901234564 05/21 1234 3-D Secure Credit Cards Card Type Number Expiry Date CVV/CVC Visa 4557012345678902 05/21 123 MasterCard 5313581000123430 05/21 123 AMEX 374200000000004 05/21 1234 Debit Cards Card Type Number Expiry Date CVV/CVC MADA 5297412542005689 05/21 350 MEEZA 9818950527886700002 10/23 422 MEEZA 5078036221028566 09/23 143 Local Payment Methods Payment Option Number Expiry Date CVV/CVC Knet 0000000001 09/21 1234 Payment Option Card Number Expiry Date OTP PIN Naps 4215375500883243 06/21 1234 1234 Payment Option Payment Id Password OTP Sadad sadadOlpTest 1234 112358 Payment Option Number Card Type E-dirhamm 4724439901004942 Gold Card Digital Wallets PAYMENT OPTION Number Expiry Date CVV/CVC MasterPass 4000000000000002 05/21 123 Visa Checkout 4000000000000002 05/21 123","title":"Testing"},{"location":"testing/#testing","text":"Our testing environment provides you with opportunity to test your integration. You can sign up for test account and get started with testing your integrations.","title":"Testing"},{"location":"testing/#test-card-details","text":"You want to test a transaction but you don\u2019t have a credit card or user credentials for our other payments options? Well we\u2019ve got your back, here you can find card numbers for any type of test you wish to do.","title":"Test Card Details"},{"location":"transactioncodes/","text":"Transaction Response Codes The Response code is made up of 5 digits; a combination of a 2-digit Status (Please see section Status Codes ) and a 3-digit Message (Please see section message codes ) Status Codes Status Code Description 00 Invalid Request. 01 Order Stored. 02 Authorization Success. 03 Authorization Failed. 04 Capture Success. 05 Capture failed. 06 Refund Success. 07 Refund Failed. 08 Authorization Voided Successfully. 09 Authorization Void Failed. 10 Incomplete. 11 Check status Failed. 12 Check status success. 13 Purchase Failure. 14 Purchase Success. 15 Uncertain Transaction. 17 Tokenization failed. 18 Tokenization success. 19 Transaction pending. 20 On hold. 21 SDK Token creation failure. 22 SDK Token creation success. 23 Failed to process Digital Wallet service. 24 Digital wallet order processed successfully. 27 Check card balance failed. 28 Check card balance success. 29 Redemption failed. 30 Redemption success. 31 Reverse Redemption transaction failed. 32 Reverse Redemption transaction success. 40 Transaction In review. 42 Currency conversion success. 43 Currency conversion failed. 44 3ds success. 45 3ds failed. 46 Bill creation success. 47 Bill creation failed. 48 Generating invoice payment link success. 49 Generating invoice payment link failed. 50 Batch file upload successfully. 51 Upload batch file failed. 52 Token created successfully. 53 Token creation failed. 54 Get Tokens Success. 55 Get Tokens Failed. 56 Reporting Request Success. 57 Reporting Request Failed. 58 Token updated successfully. 59 Token updated failed. 62 Get Installment Plans Successfully. 63 Get Installment plans Failed. 66 Delete Token Success. 70 Get batch results successfully. 71 Get batch results failed. 72 Batch processing success. 73 Batch processing failed. 74 Bank transfer successfully. 75 Bank transfer failed. 76 Batch validation successfully. 77 Batch validation failed. 80 Credit card verified successfully. 81 Failed to verify credit card. Message Codes Message Code Message Value 000 Success. 001 Missing parameter. 002 Invalid parameter format. 003 Payment option is not available for this merchant\u2019s account. 004 Invalid command. 005 Invalid amount. 006 Technical problem. 007 Duplicate order number. 008 Signature mismatch. 009 Invalid merchant identifier. 010 Invalid access code. 011 Order not saved. 012 Card expired. 013 Invalid currency. 014 Inactive payment option. 015 Inactive merchant account. 016 Invalid card number. 017 Operation not allowed by the acquirer. 018 Operation not allowed by processor. 019 Inactive acquirer. 020 Processor is inactive. 021 Payment option deactivated by acquirer. 023 Currency not accepted by acquirer. 024 Currency not accepted by processor. 025 Processor integration settings are missing. 026 Acquirer integration settings are missing. 027 Invalid extra parameters. 029 Insufficient funds. 030 Authentication failed. 031 Invalid issuer. 032 Invalid parameter length. 033 Parameter value not allowed. 034 Operation not allowed. 035 Order created successfully. 036 Order not found. 037 Missing return URL. 038 Token service inactive. 039 No active payment option found. 040 Invalid transaction source. 042 Operation amount exceeds the authorized amount. 043 Inactive Operation. 044 Token name does not exist. 046 Channel is not configured for the selected payment option. 047 Order already processed. 048 Operation amount exceeds captured amount. 049 Operation not valid for this payment option. 050 Merchant per transaction limit exceeded. 051 Technical error. 052 Consumer is not in OLP database. 053 Merchant is not found in OLP Engine DB. 054 Transaction cannot be processed at this moment. 055 OLP ID Alias is not valid. Please contact your bank. 056 OLP ID Alias does not exist. Please enter a valid OLP ID Alias. 057 Transaction amount exceeds the daily transaction limit. 058 Transaction amount exceeds the per transaction limit. 059 Merchant Name and SADAD Merchant ID do not match. 060 The entered OLP password is incorrect. Please provide a valid password. 062 Token has been created. 063 Token has been updated. 064 3-D Secure check requested. 065 Transaction waiting for customer\u2019s action. 066 Merchant reference already exists. 067 Dynamic Descriptor not configured for selected payment option. 068 SDK service is inactive. 069 Mapping not found for the given error code. 070 device_id mismatch. 071 Failed to initiate connection. 072 Transaction has been cancelled by the consumer. 073 Invalid request format. 074 Transaction failed. 075 Transaction failed. 076 Transaction not found in OLP. 077 Error transaction code not found. 078 Failed to check fraud screen. 079 Transaction challenged by fraud rules. 080 Invalid payment option. 082 Inactive fraud service. 083 Unexpected user behavior. 084 Transaction amount is either bigger than maximum or less than minimum amount accepted for the selected plan. 086 Installment plan is not configured for Merchant account. 087 Card BIN does not match accepted issuer bank. 088 Token name was not created for this transaction. 089 Failed to retrieve digital wallet details. 090 Transaction in review. 092 Invalid issuer code. 093 service inactive. 094 Invalid Plan Code. 095 Inactive Issuer. 096 Inactive Plan. 097 Operation not allowed for service. 098 Invalid or expired call_id. 099 Failed to execute service. 100 Invalid expiry date. 101 Bill number not found. 102 Apple Pay order has been expired. 103 Duplicate subscription ID. 104 No plans valid for request. 105 Invalid bank code. 106 Inactive bank. 107 Invalid transfer_date. 110 Contradicting parameters, please refer to the integration guide. 111 Service not applicable for payment option. 112 Service not applicable for payment operation. 113 Service not applicable for e-commerce indicator. 114 Token already exist. 115 Expired invoice payment link. 116 Inactive notification type. 117 Invoice payment link already processed. 118 Order bounced. 119 Request dropped. 120 Payment link terms and conditions not found. 121 Card number is not verified. 122 Invalid date interval. 123 You have exceeded the maximum number of attempts. 124 Account successfully created. 125 Invoice already paid. 126 Duplicate invoice ID. 127 Merchant reference is not generated yet. 128 The generated report is still pending, you can\u2019t download it now. 129 \u201cDownloaded report\u201d queue is full. Wait till its empty again. 134 Your search results have exceeded the maximum number of records. 136 The Batch file validation is failed. 137 Invalid Batch file execution date. 138 The Batch file still under validation. 140 The Batch file still under processing. 141 The Batch reference does not exist. 142 The Batch file header is invalid. 144 Invalid Batch file. 146 The Batch reference is already exist. 147 The Batch process request has been received. 148 Batch file will be processed. 149 Payment link request id not found. 150 Payment link is already open. 151 3ds_id does not exist. 152 3Ds verification doesn\u2019t match the request details. 154 You have reached the maximum number of upload retries. 155 The upload retries is not configured. 662 Operation not allowed. The specified order is not confirmed yet. 666 Transaction declined. 773 Transaction closed. 777 The transaction has been processed, but failed to receive confirmation. 778 Session timed-out. 779 Transformation error. 780 Transaction number transformation error. 781 Message or response code transformation error. 783 Installments service inactive. 784 Transaction still processing you can\u2019t make another transaction. 785 Transaction blocked by fraud check. 787 Failed to authenticate the user. 788 Invalid bill number. 789 Expired bill number. 790 Invalid bill type code. Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Transactioncodes"},{"location":"transactioncodes/#transaction-response-codes","text":"The Response code is made up of 5 digits; a combination of a 2-digit Status (Please see section Status Codes ) and a 3-digit Message (Please see section message codes )","title":"Transaction Response Codes"},{"location":"transactioncodes/#status-codes","text":"Status Code Description 00 Invalid Request. 01 Order Stored. 02 Authorization Success. 03 Authorization Failed. 04 Capture Success. 05 Capture failed. 06 Refund Success. 07 Refund Failed. 08 Authorization Voided Successfully. 09 Authorization Void Failed. 10 Incomplete. 11 Check status Failed. 12 Check status success. 13 Purchase Failure. 14 Purchase Success. 15 Uncertain Transaction. 17 Tokenization failed. 18 Tokenization success. 19 Transaction pending. 20 On hold. 21 SDK Token creation failure. 22 SDK Token creation success. 23 Failed to process Digital Wallet service. 24 Digital wallet order processed successfully. 27 Check card balance failed. 28 Check card balance success. 29 Redemption failed. 30 Redemption success. 31 Reverse Redemption transaction failed. 32 Reverse Redemption transaction success. 40 Transaction In review. 42 Currency conversion success. 43 Currency conversion failed. 44 3ds success. 45 3ds failed. 46 Bill creation success. 47 Bill creation failed. 48 Generating invoice payment link success. 49 Generating invoice payment link failed. 50 Batch file upload successfully. 51 Upload batch file failed. 52 Token created successfully. 53 Token creation failed. 54 Get Tokens Success. 55 Get Tokens Failed. 56 Reporting Request Success. 57 Reporting Request Failed. 58 Token updated successfully. 59 Token updated failed. 62 Get Installment Plans Successfully. 63 Get Installment plans Failed. 66 Delete Token Success. 70 Get batch results successfully. 71 Get batch results failed. 72 Batch processing success. 73 Batch processing failed. 74 Bank transfer successfully. 75 Bank transfer failed. 76 Batch validation successfully. 77 Batch validation failed. 80 Credit card verified successfully. 81 Failed to verify credit card.","title":"Status Codes"},{"location":"transactioncodes/#message-codes","text":"Message Code Message Value 000 Success. 001 Missing parameter. 002 Invalid parameter format. 003 Payment option is not available for this merchant\u2019s account. 004 Invalid command. 005 Invalid amount. 006 Technical problem. 007 Duplicate order number. 008 Signature mismatch. 009 Invalid merchant identifier. 010 Invalid access code. 011 Order not saved. 012 Card expired. 013 Invalid currency. 014 Inactive payment option. 015 Inactive merchant account. 016 Invalid card number. 017 Operation not allowed by the acquirer. 018 Operation not allowed by processor. 019 Inactive acquirer. 020 Processor is inactive. 021 Payment option deactivated by acquirer. 023 Currency not accepted by acquirer. 024 Currency not accepted by processor. 025 Processor integration settings are missing. 026 Acquirer integration settings are missing. 027 Invalid extra parameters. 029 Insufficient funds. 030 Authentication failed. 031 Invalid issuer. 032 Invalid parameter length. 033 Parameter value not allowed. 034 Operation not allowed. 035 Order created successfully. 036 Order not found. 037 Missing return URL. 038 Token service inactive. 039 No active payment option found. 040 Invalid transaction source. 042 Operation amount exceeds the authorized amount. 043 Inactive Operation. 044 Token name does not exist. 046 Channel is not configured for the selected payment option. 047 Order already processed. 048 Operation amount exceeds captured amount. 049 Operation not valid for this payment option. 050 Merchant per transaction limit exceeded. 051 Technical error. 052 Consumer is not in OLP database. 053 Merchant is not found in OLP Engine DB. 054 Transaction cannot be processed at this moment. 055 OLP ID Alias is not valid. Please contact your bank. 056 OLP ID Alias does not exist. Please enter a valid OLP ID Alias. 057 Transaction amount exceeds the daily transaction limit. 058 Transaction amount exceeds the per transaction limit. 059 Merchant Name and SADAD Merchant ID do not match. 060 The entered OLP password is incorrect. Please provide a valid password. 062 Token has been created. 063 Token has been updated. 064 3-D Secure check requested. 065 Transaction waiting for customer\u2019s action. 066 Merchant reference already exists. 067 Dynamic Descriptor not configured for selected payment option. 068 SDK service is inactive. 069 Mapping not found for the given error code. 070 device_id mismatch. 071 Failed to initiate connection. 072 Transaction has been cancelled by the consumer. 073 Invalid request format. 074 Transaction failed. 075 Transaction failed. 076 Transaction not found in OLP. 077 Error transaction code not found. 078 Failed to check fraud screen. 079 Transaction challenged by fraud rules. 080 Invalid payment option. 082 Inactive fraud service. 083 Unexpected user behavior. 084 Transaction amount is either bigger than maximum or less than minimum amount accepted for the selected plan. 086 Installment plan is not configured for Merchant account. 087 Card BIN does not match accepted issuer bank. 088 Token name was not created for this transaction. 089 Failed to retrieve digital wallet details. 090 Transaction in review. 092 Invalid issuer code. 093 service inactive. 094 Invalid Plan Code. 095 Inactive Issuer. 096 Inactive Plan. 097 Operation not allowed for service. 098 Invalid or expired call_id. 099 Failed to execute service. 100 Invalid expiry date. 101 Bill number not found. 102 Apple Pay order has been expired. 103 Duplicate subscription ID. 104 No plans valid for request. 105 Invalid bank code. 106 Inactive bank. 107 Invalid transfer_date. 110 Contradicting parameters, please refer to the integration guide. 111 Service not applicable for payment option. 112 Service not applicable for payment operation. 113 Service not applicable for e-commerce indicator. 114 Token already exist. 115 Expired invoice payment link. 116 Inactive notification type. 117 Invoice payment link already processed. 118 Order bounced. 119 Request dropped. 120 Payment link terms and conditions not found. 121 Card number is not verified. 122 Invalid date interval. 123 You have exceeded the maximum number of attempts. 124 Account successfully created. 125 Invoice already paid. 126 Duplicate invoice ID. 127 Merchant reference is not generated yet. 128 The generated report is still pending, you can\u2019t download it now. 129 \u201cDownloaded report\u201d queue is full. Wait till its empty again. 134 Your search results have exceeded the maximum number of records. 136 The Batch file validation is failed. 137 Invalid Batch file execution date. 138 The Batch file still under validation. 140 The Batch file still under processing. 141 The Batch reference does not exist. 142 The Batch file header is invalid. 144 Invalid Batch file. 146 The Batch reference is already exist. 147 The Batch process request has been received. 148 Batch file will be processed. 149 Payment link request id not found. 150 Payment link is already open. 151 3ds_id does not exist. 152 3Ds verification doesn\u2019t match the request details. 154 You have reached the maximum number of upload retries. 155 The upload retries is not configured. 662 Operation not allowed. The specified order is not confirmed yet. 666 Transaction declined. 773 Transaction closed. 777 The transaction has been processed, but failed to receive confirmation. 778 Session timed-out. 779 Transformation error. 780 Transaction number transformation error. 781 Message or response code transformation error. 783 Installments service inactive. 784 Transaction still processing you can\u2019t make another transaction. 785 Transaction blocked by fraud check. 787 Failed to authenticate the user. 788 Invalid bill number. 789 Expired bill number. 790 Invalid bill type code.","title":"Message Codes"},{"location":"transactioncodes/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"trusted/","text":"Trusted channel allows PCI certified Merchants to collect their customers' credit card details on the Merchant\u2019s checkout page. The Merchants are able to process (Ecommerce, Recurring and MOTO) transactions through the FORT using clear card data and credit card tokens. Trusted Channel Endpoints Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi Parameters Submission Type REST POST request using JSON. JSON Request Example { 'command':'PURCHASE', 'access_code':'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier':'CycHZxVj', 'merchant_reference':' XYZ9239-yu898', 'amount':'10000', 'currency':'AED', 'language':'en', 'customer_email': 'john_doe@abc.com', 'eci': 'MOTO', 'expiry_date': '2105', 'card_number': '4005550000000001', 'card_security_code': '123', 'customer_ip': '192.178.1.10', 'signature':'7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'card_holder_name': 'John Smith', 'token_name': 'Op9Vmp', 'payment_option': 'MASTERCARD', 'order_description':'iPhone 6-S', 'customer_name':'John Smith', 'phone_number': '00962797219966', 'settlement_reference': 'XYZ9239-yu898', 'merchant_extra': 'John Smith', 'merchant_extra1': 'John Smith', 'merchant_extra2': 'John Smith', 'merchant_extra3': 'John Smith', 'merchant_extra4': 'John Smith', 'merchant_extra5': 'John Smith', 'return_url': 'http://www.merchant.com' } Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. The Response You will receive sample response from the payfort server: {\"command\":\"PURCHASE\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"customer_email\":\"customer@domain.com\", \"eci\":\"MOTO\", \"expiry_date\":\"2105\", \"card_number\":\"400555*****0001\", \"customer_ip\":\"192.178.1.10\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"card_holder_name\":\" John Smith\", \"token_name\":\"Op9Vmp\", \"order_description\":\"iPhone6-S\", \"fort_id\":\"149295435400084008\", \"payment_option\":\"MASTERCARD\", \"customer_name\": \"John Smith\", \"merchant_extra\":\"JohnSmith\", \"merchant_extra1\":\"JohnSmith\", \"merchant_extra2\":\"JohnSmith\", \"merchant_extra3\":\"JohnSmith\", \"merchant_extra4\":\"JohnSmith\", \"merchant_extra5\":\"JohnSmith\", \"authorization_code\":\"P1000000000000372136\", \"response_message\":\"Success\", \"response_code\":\"20064\", \"status\":\"04\", \"3ds_url\":\"http://www.3dsecure.com\", \"phone_number\": \"00962797219966\", \"settlement_reference\":\"XYZ9239-yu898\" } Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"What is Trusted?"},{"location":"trusted/#trusted-channel-endpoints","text":"Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi","title":"Trusted Channel Endpoints"},{"location":"trusted/#parameters-submission-type","text":"REST POST request using JSON. JSON Request Example { 'command':'PURCHASE', 'access_code':'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier':'CycHZxVj', 'merchant_reference':' XYZ9239-yu898', 'amount':'10000', 'currency':'AED', 'language':'en', 'customer_email': 'john_doe@abc.com', 'eci': 'MOTO', 'expiry_date': '2105', 'card_number': '4005550000000001', 'card_security_code': '123', 'customer_ip': '192.178.1.10', 'signature':'7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'card_holder_name': 'John Smith', 'token_name': 'Op9Vmp', 'payment_option': 'MASTERCARD', 'order_description':'iPhone 6-S', 'customer_name':'John Smith', 'phone_number': '00962797219966', 'settlement_reference': 'XYZ9239-yu898', 'merchant_extra': 'John Smith', 'merchant_extra1': 'John Smith', 'merchant_extra2': 'John Smith', 'merchant_extra3': 'John Smith', 'merchant_extra4': 'John Smith', 'merchant_extra5': 'John Smith', 'return_url': 'http://www.merchant.com' } Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"Parameters Submission Type"},{"location":"trusted/#the-response","text":"You will receive sample response from the payfort server: {\"command\":\"PURCHASE\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"customer_email\":\"customer@domain.com\", \"eci\":\"MOTO\", \"expiry_date\":\"2105\", \"card_number\":\"400555*****0001\", \"customer_ip\":\"192.178.1.10\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"card_holder_name\":\" John Smith\", \"token_name\":\"Op9Vmp\", \"order_description\":\"iPhone6-S\", \"fort_id\":\"149295435400084008\", \"payment_option\":\"MASTERCARD\", \"customer_name\": \"John Smith\", \"merchant_extra\":\"JohnSmith\", \"merchant_extra1\":\"JohnSmith\", \"merchant_extra2\":\"JohnSmith\", \"merchant_extra3\":\"JohnSmith\", \"merchant_extra4\":\"JohnSmith\", \"merchant_extra5\":\"JohnSmith\", \"authorization_code\":\"P1000000000000372136\", \"response_message\":\"Success\", \"response_code\":\"20064\", \"status\":\"04\", \"3ds_url\":\"http://www.3dsecure.com\", \"phone_number\": \"00962797219966\", \"settlement_reference\":\"XYZ9239-yu898\" } Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones.","title":"The Response"},{"location":"trusted/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"trusted/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"voidauthorization/","text":"Void Authorization After a card payment has been authorized, the payment is not complete until it has been captured . If you do not wish to capture the payment, you can void it using the void API described below. The Request Use the details below to set up your request. Endpoints Live POST https://paymentservices.payfort.com/FortAPI/paymentApi Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi You can send \u201cmerchant_reference\u201d and/ or \u201cfort_id\u201d in the VOID_AUTHORIZATION request. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response even the optional ones. The Request Example JSON { 'command':'REFUND', 'access_code':'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier':'CycHZxVj', 'merchant_reference':' XYZ9239-yu898', 'amount':'10000', 'currency':'AED', 'language':'en', 'signature':'7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'fort_id':'149295435400084008', 'order_description':'iPhone 6-S' } The Response If you receive response code 20064 with status code 04 it means that your request to void authorization has been accepted by PayFort server. Response Example {\"command\":\"VOID_AUTHORIZATION\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239yu898\", \"language\":\"en\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone6-S\", \"fort_id\":\"149295435400084008\", \"response_message\":\"Success\", \"response_code\":\"20064\", \"status\":\"04\" } You can check out various transaction codes by visiting this link Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Void an Authorization"},{"location":"voidauthorization/#void-authorization","text":"After a card payment has been authorized, the payment is not complete until it has been captured . If you do not wish to capture the payment, you can void it using the void API described below.","title":"Void Authorization"},{"location":"voidauthorization/#the-request","text":"Use the details below to set up your request.","title":"The Request"},{"location":"voidauthorization/#endpoints","text":"","title":"Endpoints"},{"location":"voidauthorization/#live","text":"POST https://paymentservices.payfort.com/FortAPI/paymentApi","title":"Live"},{"location":"voidauthorization/#sandbox","text":"POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi You can send \u201cmerchant_reference\u201d and/ or \u201cfort_id\u201d in the VOID_AUTHORIZATION request. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response even the optional ones.","title":"Sandbox"},{"location":"voidauthorization/#the-request-example","text":"","title":"The Request Example"},{"location":"voidauthorization/#json","text":"{ 'command':'REFUND', 'access_code':'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier':'CycHZxVj', 'merchant_reference':' XYZ9239-yu898', 'amount':'10000', 'currency':'AED', 'language':'en', 'signature':'7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'fort_id':'149295435400084008', 'order_description':'iPhone 6-S' }","title":"JSON"},{"location":"voidauthorization/#the-response","text":"If you receive response code 20064 with status code 04 it means that your request to void authorization has been accepted by PayFort server.","title":"The Response"},{"location":"voidauthorization/#response-example","text":"{\"command\":\"VOID_AUTHORIZATION\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239yu898\", \"language\":\"en\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone6-S\", \"fort_id\":\"149295435400084008\", \"response_message\":\"Success\", \"response_code\":\"20064\", \"status\":\"04\" } You can check out various transaction codes by visiting this link","title":"Response Example"},{"location":"voidauthorization/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"voidauthorization/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"wallets/","text":"PayFort supports MasterPass, Visacheckout and ApplePay MasterPass PAYFORT provides MasterPass that gives you a chance to inject a bit of extra security and convenience payment experience to your customers. The MasterPass button appears on your website checkout page allows a consumer to interact with their MasterPass digital wallet seamlessly without having to leave your website. VisaCheckout Make your customer\u2019s online shopping experience more simple and convenient by implementing Visa checkout that securely stores the buyer\u2019s credit card details, shipping address and any other information.Visa checkout can be offered through easy integration. Apple Pay Apple Pay provides an easy way for users to buy goods and services using iPhone, iPad and Apple Watch through mobile application or website. Checking out is as easy as selecting \u201cApple Pay\u201d and placing a finger on the touch ID of an iPhone, iPad or simply double clicking the side button on the Apple Watch. It\u2019s quick, easy and secure! When using a credit or debit card with Apple Pay, the actual card numbers are not stored on the device, nor on Apple servers. Instead, a unique Device Account Number is assigned, encrypted and securely stored in the Secure Element on your device, where each transaction is authorized with a one-time unique dynamic security code. Setting Up Apple Pay Kindly visit developer.apple.com where you will Create a developer account, an Apple Pay Merchant ID and complete the Apple Pay certification (export the payment processing certificate in p12 file) Integrate Apple Pay in your app/website using the Apple Pay documentation found at https://developer.apple.com/apple-pay Submit the encrypted Apple Pay payload to PayFort\u2019s API for decryption / processing. Please contact integration@payfort.com for PayFort\u2019s integration documentation Test Your Wallet Integration You can checkout this link for testing your wallet integration Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Wallets"},{"location":"wallets/#masterpass","text":"PAYFORT provides MasterPass that gives you a chance to inject a bit of extra security and convenience payment experience to your customers. The MasterPass button appears on your website checkout page allows a consumer to interact with their MasterPass digital wallet seamlessly without having to leave your website.","title":"MasterPass"},{"location":"wallets/#visacheckout","text":"Make your customer\u2019s online shopping experience more simple and convenient by implementing Visa checkout that securely stores the buyer\u2019s credit card details, shipping address and any other information.Visa checkout can be offered through easy integration.","title":"VisaCheckout"},{"location":"wallets/#apple-pay","text":"Apple Pay provides an easy way for users to buy goods and services using iPhone, iPad and Apple Watch through mobile application or website. Checking out is as easy as selecting \u201cApple Pay\u201d and placing a finger on the touch ID of an iPhone, iPad or simply double clicking the side button on the Apple Watch. It\u2019s quick, easy and secure! When using a credit or debit card with Apple Pay, the actual card numbers are not stored on the device, nor on Apple servers. Instead, a unique Device Account Number is assigned, encrypted and securely stored in the Secure Element on your device, where each transaction is authorized with a one-time unique dynamic security code.","title":"Apple Pay"},{"location":"wallets/#setting-up-apple-pay","text":"Kindly visit developer.apple.com where you will Create a developer account, an Apple Pay Merchant ID and complete the Apple Pay certification (export the payment processing certificate in p12 file) Integrate Apple Pay in your app/website using the Apple Pay documentation found at https://developer.apple.com/apple-pay Submit the encrypted Apple Pay payload to PayFort\u2019s API for decryption / processing. Please contact integration@payfort.com for PayFort\u2019s integration documentation","title":"Setting Up Apple Pay"},{"location":"wallets/#test-your-wallet-integration","text":"You can checkout this link for testing your wallet integration","title":"Test Your Wallet Integration"},{"location":"wallets/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"wallets/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"}]}