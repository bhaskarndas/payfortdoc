{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Get Started With PayFORT If you are starting a new ecommerce or any other merchant site then you need a robust payment system that can capture not only customer's payment details but also helps you with various financial transaction needs of your customers such as recurring payments, financing purchase by the customer, one time payment etc. PayFORT helps you to build a robust payment system for your merchant site. With the help of PayFORT you can collect payment information conveniently and securely. It offers your customer the choice to pay in multiple currencies. Your customers can also select from available payment methods such as 3D secure, Apple Pay, Visa Checkout or MasterPass. You can signup for a PayFORT test account by navigating to this link If you want to integrate payment systems with your site then you can sign up for a live account by visiting this link PayFORT Payment Features With PayFORT you need not redirect your customers to third party website for payment and they will be able to pay on the payment page of your website. You are no longer required to get your website PCI-Compliant. Since PayFORT is PCI-DSS compliant it means your business transactions will be PCI-Compliant automatically. It offers payment solutions for various shopping cart applications including your own in house shopping cart application. \u200b Figure 1 \u200b Shopping cart applications supported by PayFort PayFORT Integration Type PayFORT offers you two approaches for integrations with your merchant site as mentioned below: By using PayFORT Merchant Page By using PayFORT Merchant Page 2 Using Merchant Page PayFORT Merchant Page integration uses iFrame or internal frame that helps you to create a customizable payment form. It gives the customer freedom to provide their payment details on your site's checkout page. For more details checkout the Merchant Page Integration. Merchant Page Integration Using Merchant Page 2 Merchant Page 2 provides you with the flexibility to develop your own custom form for collecting the customer's card details. For more details visit the Merchant Page 2 Integration. Merchant Page 2 Integration Get Started With Testing If you have developed your payment page then you can proceed with creation of a testing account by visiting link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Get Started With PayFORT"},{"location":"#get-started-with-payfort","text":"If you are starting a new ecommerce or any other merchant site then you need a robust payment system that can capture not only customer's payment details but also helps you with various financial transaction needs of your customers such as recurring payments, financing purchase by the customer, one time payment etc. PayFORT helps you to build a robust payment system for your merchant site. With the help of PayFORT you can collect payment information conveniently and securely. It offers your customer the choice to pay in multiple currencies. Your customers can also select from available payment methods such as 3D secure, Apple Pay, Visa Checkout or MasterPass. You can signup for a PayFORT test account by navigating to this link If you want to integrate payment systems with your site then you can sign up for a live account by visiting this link","title":"Get Started With PayFORT"},{"location":"#payfort-payment-features","text":"With PayFORT you need not redirect your customers to third party website for payment and they will be able to pay on the payment page of your website. You are no longer required to get your website PCI-Compliant. Since PayFORT is PCI-DSS compliant it means your business transactions will be PCI-Compliant automatically. It offers payment solutions for various shopping cart applications including your own in house shopping cart application. \u200b Figure 1 \u200b Shopping cart applications supported by PayFort","title":"PayFORT Payment Features"},{"location":"#payfort-integration-type","text":"PayFORT offers you two approaches for integrations with your merchant site as mentioned below: By using PayFORT Merchant Page By using PayFORT Merchant Page 2","title":"PayFORT Integration Type"},{"location":"#using-merchant-page","text":"PayFORT Merchant Page integration uses iFrame or internal frame that helps you to create a customizable payment form. It gives the customer freedom to provide their payment details on your site's checkout page. For more details checkout the Merchant Page Integration. Merchant Page Integration","title":"Using Merchant Page"},{"location":"#using-merchant-page-2","text":"Merchant Page 2 provides you with the flexibility to develop your own custom form for collecting the customer's card details. For more details visit the Merchant Page 2 Integration. Merchant Page 2 Integration","title":"Using Merchant Page 2"},{"location":"#get-started-with-testing","text":"If you have developed your payment page then you can proceed with creation of a testing account by visiting link","title":"Get Started With Testing"},{"location":"#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"androidsdk/","text":"Integrate Android SDK You can also enable Payment processing through your mobile app by integrating PayFORT payment gateway. This section helps you to integrate PayFORT Android SDK with your android project and develop a a payment system for your mobile application. To process a transaction using the FORT Mobile SDK, create a Mobile SDK Token and proceed through the following sections. Please refer to the SDK Token section by visiting this link About the PayFORT Android SDK List of Supported Platforms The FORT Mobile SDK supports all devices running Android 4.1.x (API level 16). ICE CREAM SANDWICH or higher are supported. This release supports Android Pie API 28. Localization Support The FORT Mobile SDK supports both English and Arabic languages. Screen Orientation Portrait is the only orientation supported within the FORT Mobile SDK. Supported Payment Methods Through the first version of the FORT Mobile SDK, the Merchant has the ability to process a CREDIT CARD transactions only. Supported Payment Options The supported credit card payment options are VISA , MASTERCARD , American Express (AMEX) , MADA and MEEZA . Android Integration Flow Placeholder : Explain the Integration Flow with diagram. Setting up Development Environment Prerequisites You are required to download the FORT android sdk from this link . You can select either eclipse or android studio for your development setup. You are also required to have some knowledge of mobile app development. You are also required to generate SDK Token. IDE Configurations To start using the FORT Mobile SDK, Please follow the steps: Placeholder: Provide the pic Download the SDK and extract the SDK. The folder contains Dependencies , Res and FORTSDKv1.5.aar-release . Dependencies folder includes: Eclipse folder : .jar files for the SDK dependencies. LINKS_README text file that contains a list for sources of the above jars and a list of required libraries to be added as dependencies as well (Manual configuration). AndroidStudio_gradle text file which adds the compile command for what your project does not include. Res folder : Layout Layout-ar FORTSDKv1.5.aar-release Please make sure to read our notes according to the IDE you are using whether it\u2019s the Android Studio or Eclipse. Android Studio Project Setup Once you have downloaded and extracted the PayFORT SDK as explained above you can next setup the Android Studio. To continue the integration, please proceed with the following steps: Go to File \u2192 New \u2192 New Module. Placeholder: Pictures of Android Studio for each step. Select \u201cImport .JAR/.AAR Package\u201d and click next. Enter the path to .aar file and click finish. Browse to the dependencies folder and open the \u201cAndroidStudio_gradle\u201d text file. Copy and paste the implementation/ api lines that are NOT already supported in your dependency block. (All listed dependencies are required). Click the \u201cSync the project with gradle files\u201d button. Clean the project. The SDK is now ready for your use. Eclipse Project Setup Incase you are using Eclipse instead of Android Studio then you can ignore the above section and follow the instructions in this section. The integration will include two main steps. For the first step, you need to create a library project by following the below steps: Create a new project (from this time it\u2019s called \u201clibrary project\u201d) in your workspace. Placeholder: Provide picture of Eclipse platform for each step. Do not forget to mark it as library. Clear the src folder of the library project. Unzip the .aar file. You can rename it to zip and then unzip it or use any tool. Copy the classes.jar file to libs folder on the library project. Replace the res folder on library project with the res folder of the .aar file. Project Configuration Once the IDEs have been installed, next we will configure the project. This section discusses the steps to configure the Project. The configuration will help to integrate the PayFORT android SDK with the IDE. The project you have created contains almost everything you need. Now let\u2019s start configuring your project to reference this library project by following the below points: Placeholder: Provide pictures for project configuration. In the target project, use the library created in step one (mentioned above) as a dependency. Open the AndroidManifest.xml file inside .aar file and make sure to copy everything it takes (permissions, activities, services, receivers \u2026) in the AndroidManifest.xml file of the target project. Copy the entire contents (if any) inside the assets folder of the .aar file to the assets folder of the target project. Copy the entire contents (if any) inside the libs folder of the .aar file to the libs folder of the target project. Open the dependencies file \u2192 Eclipse, then copy all .jar files and add them to the libs folder of the target project. Check if your target project has the project dependencies included in the LINKS_README text file under the LINKS_README text file under the libraries (Projects/aar). Otherwise use the links included in the previously mentioned file and add them as a dependency project on your target project. Clean and rebuild your target project. OS Permissions The PayFORT android SDK requires the following android OS permissions to work properly as shown by the following code. You are required to include the below code in your project. <uses-permission android:name=\"android.permission.INTERNET\"/> <uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/> Using the FORT Mobile SDK Collect the FORT Mobile SDK Request Through a Java Bean You can create a Java bean class for the PayFORT Mobile SDK request as shown below: // FORT Mobile SDK request public class FortRequest implements Serializable{ private Map<String, Object> requestMap; private boolean showResponsePage; public Map<String, Object> getRequestMap() { return requestMap; } public void setRequestMap(Map<String, Object> requestMap) { this.requestMap = requestMap; } public boolean isShowResponsePage() { return showResponsePage; } public void setShowResponsePage(boolean showResponsePage) { this.showResponsePage = showResponsePage; } } The following are the Mobile SDK Call Parameters: The \u201crequestMap\u201d will contain all the PayFORT parameters of the order/ transaction. \u201cshowResponsePage\u201d is the Boolean field where you can determine if you want the FORT response page to be displayed or not. Define a Callback Manager Define and initialize an instance of the FortCallBackManager in your activity as shown below: // FORT Callback Manager Instance private FortCallBackManager fortCallback = null; fortCallback = FortCallback.Factory.create(); Attach the Callback to the Activity You need to add the statement that appears below to the onActivityResult function. //Callback Statement @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); fortCallback.onActivityResult(requestCode,resultCode,data); } Call the FORT Mobile SDK For every transaction that needs to be processed, do the call as shown below and handle the callback methods upon your business flow. The FORT Mobile SDK Call registers a new callback for a new request. The registerCallBack requires the inputs as shown below. //FORT Mobile SDK Call FortSdk.getInstance().registerCallback(this,fortRequest,5, fortCallback, showLoading, new FortInterfaces.OnTnxProcessed() { @Override public void onCancel(Map<String, Object> requestParamsMap,Map<String, Object> responseMap) { //TODO: handle me } @Override public void onSuccess(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me } @Override public void onFailure(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me } @Override public void onSuccess(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me } }); Register Callback Request //The registerCallBack Request public void registerCallback( Activity context, final FortRequest fortRequest, String environment, final int requestCode, final FortCallBackManager callbackManager, boolean showLoading, final FortInterfaces.OnTnxProcessed callback) Call the Fort SDK Function //FortSDK function String device_id = FortSdk.getDeviceId(this); FORT Mobile SDK Device ID Value Please Make sure to use the FortSDK function as shown above to generate the device_id parameter value that must be used for creating the sdk_token from your business security server. The Merchant can choose to display the FORT response page by passing \u201cshowResponsePage\u201d value as \u201cTrue\u201d. Customizing the Mobile SDK Payment Layout We provide you with the res folder that includes the source code of the pages in order to customize the design, themes, etc. You can customize both English and Arabic layouts as needed. However, please take the following tips into consideration: Placeholder: Provide Android UI flow diagrams and Android based mobile screenshots. Don\u2019t change the layout name because it\u2019s considered an override process. Make sure to use all the views that has the ID property in order to avoid the NullPointerException. Redesign the view for portrait orientation. Note that Landscape orientation isn\u2019t supported. You can support as much layout densities as you want. Don\u2019t forget to redesign the layout-ar file too (right-to-left). Don\u2019t change, rename, or remove onClick functions. Our Mobile SDK v 1.5 consists one of the following three main activities design: activity_cc_payment.xml activity_cc_response.xml activity_init_secure_conn Every file is available for both English and Arabic alignments; layout and layout-ar. The files Hierarchy and Content might change in our SDK\u2019s future versions. Design Customization Codes: The following code was used to customize the way the \u201cAmount\u201d is displayed in the Standard Mobile SDK Payment Page: <TextView android:id=\u201c@+id/amountTV\u201d android:layout_width=\u201cmatch_parent\u201d android:layout_height=\u201c@dimen/pf_payment_type_header_height\u201d android:background=\u201c@color/pf_light_gray\u201d android:gravity=\u201ccenter_horizontal|center_vertical\u201d android:textColor=\u201c@android:color/black\u201d android:textSize=\u201c@dimen/pf_15_txt_size\u201d /> The following code is used to customize the way the \u201cAmount\u201d is displayed in the Customized Mobile SDK Payment Page: LinearLayout android:layout_width=\u201cmatch_parent\u201d android:layout_height=\u201cwrap_content\u201d android:orientation=\u201chorizontal\u201d android:padding=\u201c10dp\u201d android:background=\u201c@android:color/white\u201d> <ImageView android:layout_width=\u201c40dp\u201d android:layout_height=\u201c40dp\u201d android:src=\u201c@drawable/merchant_logo\u201d/> <TextView android:fontFamily=\u201csans-serif-medium\u201d android:text=\u201cMerchant name\u201d android:layout_margin=\u201c10dp\u201d android:textColor=\u201c@android:color/holo_blue_dark\u201d android:layout_width=\u201cwrap_content\u201d android:layout_gravity=\u201ccenter_vertical\u201d android:layout_height=\u201cwrap_content\u201d android:src=\u201c@drawable/merchant_logo\u201d/> <TextView android:id=\u201c@+id/amountTV\u201d android:layout_width=\u201cmatch_parent\u201d android:layout_height=\u201c@dimen/pf_payment_type_header_height\u201d android:gravity=\u201cright|center_vertical\u201d android:textColor=\u201c@android:color/black\u201d android:text=\u201c100 UDS\u201d android:textSize=\u201c@dimen/pf_15_txt_size\u201d /> </LinearLayout> As appears in the previous codes, elements with IDs haven\u2019t been changed in type or removed. For example: android:id=\u201c@+id/amountTV\u201d. We were able to add static elements such as: ImageView element that contains the Merchant\u2019s logo, and TextView that contains the Merchant\u2019s name. To sum up, you can add any static elements or redesign the view, while keeping the views\u2019 elements used in the Standard layout that hold IDs. Make sure to retest your custom design, for example, by showing the error messages on fields and applying the changes to the Arabic layout. (Refer to the points mentioned under the **Customizing the Mobile SDK Payment Layout** section). The customized XML file should be added to the layout file in the target project (Merchant Application) to override the SDK file. PayFORT Android SDK Operations Once you have done the project setup and installation, you will be performing the Operations for authorization and purchase done through mobile application. These operations helps your mobile application to process Authorization and Purchase operations. You will be sending the request parameters in your code which will be sent to the PayFORT server and your application will receive response from the PayFORT server. Sample Code public class PayFortSdkSample extends Activity { private FortCallBackManager fortCallback = null; String deviceId = \u201c\u201d, sdkToken = \u201c\u201d; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // create Fort callback instance fortCallback = FortCallback.Factory.create(); // Generating deviceId deviceId = FortSdk.getDeviceId(PayFortSdkSample.this); Log.d(\u201cDeviceId \u201d, deviceId); // prepare payment request FortRequest fortrequest = new FortRequest(); fortrequest.setRequestMap(collectRequestMap(\u201cPASS_THE_GENERATED_SDK_TOKEN_ HERE\u201d)); fortrequest.setShowResponsePage(true); // to [display/use] the SDK response page // execute payment request callSdk(fortrequest); } private Map<String, Object> collectRequestMap(String sdkToken) { Map<String, Object> requestMap = new HashMap<>(); requestMap.put(\u201ccommand\u201d, \u201cPURCHASE\u201d); requestMap.put(\u201ccustomer_email\u201d, \u201cSam@gmail.com\u201d); requestMap.put(\u201ccurrency\u201d, \u201cSAR\u201d); requestMap.put(\u201camount\u201d, \u201c100\u201d); requestMap.put(\u201clanguage\u201d, \u201cen\u201d); requestMap.put(\u201cmerchant_reference\u201d, \u201cORD-0000007682\u201d); requestMap.put(\u201ccustomer_name\u201d, \u201cSam\u201d); requestMap.put(\u201ccustomer_ip\u201d, \u201c172.150.16.10\u201d); requestMap.put(\u201cpayment_option\u201d, \u201cVISA\u201d); requestMap.put(\u201ceci\u201d, \u201cECOMMERCE\u201d); requestMap.put(\u201corder_description\u201d, \u201cDESCRIPTION\u201d); requestMap.put(\u201csdk_token\u201d, sdkToken); return requestMap; } private void callSdk(FortRequest fortrequest) { try { FortSdk.getInstance().registerCallback(PayFortSdkSample.this, fortrequest, FortSdk.ENVIRONMENT.TEST, 5, fortCallback, new FortInterfaces.OnTnxProcessed() { @Override public void onCancel(Map<String, Object> requestParamsMap, Map<String, Object> responseMap) { //TODO: handle me Log.d(\u201cCancelled \u201d, responseMap.toString()); } @Override public void onSuccess(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me Log.i(\u201cSuccess \u201d, fortResponseMap.toString()); } @Override public void onFailure(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me Log.e(\u201cFailure \u201d, fortResponseMap.toString()); } }); } catch (Exception e) { Log.e(\u201cexecute Payment\u201d, \u201ccall FortSdk\u201d, e); } } @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); fortCallback.onActivityResult(requestCode, resultCode, data); } Placeholder for sample response from the PayFORT server. You can check out the request and response parameters by visiting this link . PayFORT Android SDK \u2013 Device ID permission This section helps the developers to understand the need and usage of the permission requested by the PayFORT Payment SDK to generate a unique device ID. You might not face this issue through your payment flow. It depends on the time you are requesting the getDeviceID function and ask about the permission for the first time. A part of the FORT mobile SDK flow is to get a unique ID for the device. Generating the ID based on more than one input (collecting as much as possible will lead to a real unique ID). The Telephone manager is one of these sources. Accessing the Telephone manager need the use of \u2018android.permission.READ_PHONE_STATE\u2019 permission. According to Android that\u2019s a dangerous permission to be used. Getting the needed permission through the flow on the case of getting the client granted that will produce a miss match device ID on the 1st SDK call. To avoid the mismatch flow we are suggesting you the following solutions: Handle the 1st SDK call in the onActivityResults(). Since The FORT SDK is a module running within the main application context the requested permission response will be returned to the merchant context. Once the activity that called geDeviceId for the 1st received a call-back in the onActivityResult() with request code = 222 you can for sure starts the payment flow of creating an SDK token and calling the SDK afterwards. Call getDeviceID on a previous activity or in your application class to make sure that the permission request was triggered before you reach the payment step. Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Integrate Android SDK"},{"location":"androidsdk/#integrate-android-sdk","text":"You can also enable Payment processing through your mobile app by integrating PayFORT payment gateway. This section helps you to integrate PayFORT Android SDK with your android project and develop a a payment system for your mobile application. To process a transaction using the FORT Mobile SDK, create a Mobile SDK Token and proceed through the following sections. Please refer to the SDK Token section by visiting this link","title":"Integrate Android SDK"},{"location":"androidsdk/#about-the-payfort-android-sdk","text":"","title":"About the PayFORT Android SDK"},{"location":"androidsdk/#list-of-supported-platforms","text":"The FORT Mobile SDK supports all devices running Android 4.1.x (API level 16). ICE CREAM SANDWICH or higher are supported. This release supports Android Pie API 28.","title":"List of Supported Platforms"},{"location":"androidsdk/#localization-support","text":"The FORT Mobile SDK supports both English and Arabic languages.","title":"Localization Support"},{"location":"androidsdk/#screen-orientation","text":"Portrait is the only orientation supported within the FORT Mobile SDK.","title":"Screen Orientation"},{"location":"androidsdk/#supported-payment-methods","text":"Through the first version of the FORT Mobile SDK, the Merchant has the ability to process a CREDIT CARD transactions only.","title":"Supported Payment Methods"},{"location":"androidsdk/#supported-payment-options","text":"The supported credit card payment options are VISA , MASTERCARD , American Express (AMEX) , MADA and MEEZA .","title":"Supported Payment Options"},{"location":"androidsdk/#android-integration-flow","text":"Placeholder : Explain the Integration Flow with diagram.","title":"Android Integration Flow"},{"location":"androidsdk/#setting-up-development-environment","text":"Prerequisites You are required to download the FORT android sdk from this link . You can select either eclipse or android studio for your development setup. You are also required to have some knowledge of mobile app development. You are also required to generate SDK Token. IDE Configurations To start using the FORT Mobile SDK, Please follow the steps: Placeholder: Provide the pic Download the SDK and extract the SDK. The folder contains Dependencies , Res and FORTSDKv1.5.aar-release . Dependencies folder includes: Eclipse folder : .jar files for the SDK dependencies. LINKS_README text file that contains a list for sources of the above jars and a list of required libraries to be added as dependencies as well (Manual configuration). AndroidStudio_gradle text file which adds the compile command for what your project does not include. Res folder : Layout Layout-ar FORTSDKv1.5.aar-release Please make sure to read our notes according to the IDE you are using whether it\u2019s the Android Studio or Eclipse.","title":"Setting up Development Environment"},{"location":"androidsdk/#android-studio-project-setup","text":"Once you have downloaded and extracted the PayFORT SDK as explained above you can next setup the Android Studio. To continue the integration, please proceed with the following steps: Go to File \u2192 New \u2192 New Module. Placeholder: Pictures of Android Studio for each step. Select \u201cImport .JAR/.AAR Package\u201d and click next. Enter the path to .aar file and click finish. Browse to the dependencies folder and open the \u201cAndroidStudio_gradle\u201d text file. Copy and paste the implementation/ api lines that are NOT already supported in your dependency block. (All listed dependencies are required). Click the \u201cSync the project with gradle files\u201d button. Clean the project. The SDK is now ready for your use.","title":"Android Studio Project Setup"},{"location":"androidsdk/#eclipse-project-setup","text":"Incase you are using Eclipse instead of Android Studio then you can ignore the above section and follow the instructions in this section. The integration will include two main steps. For the first step, you need to create a library project by following the below steps: Create a new project (from this time it\u2019s called \u201clibrary project\u201d) in your workspace. Placeholder: Provide picture of Eclipse platform for each step. Do not forget to mark it as library. Clear the src folder of the library project. Unzip the .aar file. You can rename it to zip and then unzip it or use any tool. Copy the classes.jar file to libs folder on the library project. Replace the res folder on library project with the res folder of the .aar file.","title":"Eclipse Project Setup"},{"location":"androidsdk/#project-configuration","text":"Once the IDEs have been installed, next we will configure the project. This section discusses the steps to configure the Project. The configuration will help to integrate the PayFORT android SDK with the IDE. The project you have created contains almost everything you need. Now let\u2019s start configuring your project to reference this library project by following the below points: Placeholder: Provide pictures for project configuration. In the target project, use the library created in step one (mentioned above) as a dependency. Open the AndroidManifest.xml file inside .aar file and make sure to copy everything it takes (permissions, activities, services, receivers \u2026) in the AndroidManifest.xml file of the target project. Copy the entire contents (if any) inside the assets folder of the .aar file to the assets folder of the target project. Copy the entire contents (if any) inside the libs folder of the .aar file to the libs folder of the target project. Open the dependencies file \u2192 Eclipse, then copy all .jar files and add them to the libs folder of the target project. Check if your target project has the project dependencies included in the LINKS_README text file under the LINKS_README text file under the libraries (Projects/aar). Otherwise use the links included in the previously mentioned file and add them as a dependency project on your target project. Clean and rebuild your target project.","title":"Project Configuration"},{"location":"androidsdk/#os-permissions","text":"The PayFORT android SDK requires the following android OS permissions to work properly as shown by the following code. You are required to include the below code in your project. <uses-permission android:name=\"android.permission.INTERNET\"/> <uses-permission android:name=\"android.permission.READ_PHONE_STATE\"/> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>","title":"OS Permissions"},{"location":"androidsdk/#using-the-fort-mobile-sdk","text":"Collect the FORT Mobile SDK Request Through a Java Bean You can create a Java bean class for the PayFORT Mobile SDK request as shown below: // FORT Mobile SDK request public class FortRequest implements Serializable{ private Map<String, Object> requestMap; private boolean showResponsePage; public Map<String, Object> getRequestMap() { return requestMap; } public void setRequestMap(Map<String, Object> requestMap) { this.requestMap = requestMap; } public boolean isShowResponsePage() { return showResponsePage; } public void setShowResponsePage(boolean showResponsePage) { this.showResponsePage = showResponsePage; } } The following are the Mobile SDK Call Parameters: The \u201crequestMap\u201d will contain all the PayFORT parameters of the order/ transaction. \u201cshowResponsePage\u201d is the Boolean field where you can determine if you want the FORT response page to be displayed or not. Define a Callback Manager Define and initialize an instance of the FortCallBackManager in your activity as shown below: // FORT Callback Manager Instance private FortCallBackManager fortCallback = null; fortCallback = FortCallback.Factory.create(); Attach the Callback to the Activity You need to add the statement that appears below to the onActivityResult function. //Callback Statement @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); fortCallback.onActivityResult(requestCode,resultCode,data); } Call the FORT Mobile SDK For every transaction that needs to be processed, do the call as shown below and handle the callback methods upon your business flow. The FORT Mobile SDK Call registers a new callback for a new request. The registerCallBack requires the inputs as shown below. //FORT Mobile SDK Call FortSdk.getInstance().registerCallback(this,fortRequest,5, fortCallback, showLoading, new FortInterfaces.OnTnxProcessed() { @Override public void onCancel(Map<String, Object> requestParamsMap,Map<String, Object> responseMap) { //TODO: handle me } @Override public void onSuccess(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me } @Override public void onFailure(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me } @Override public void onSuccess(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me } }); Register Callback Request //The registerCallBack Request public void registerCallback( Activity context, final FortRequest fortRequest, String environment, final int requestCode, final FortCallBackManager callbackManager, boolean showLoading, final FortInterfaces.OnTnxProcessed callback) Call the Fort SDK Function //FortSDK function String device_id = FortSdk.getDeviceId(this); FORT Mobile SDK Device ID Value Please Make sure to use the FortSDK function as shown above to generate the device_id parameter value that must be used for creating the sdk_token from your business security server. The Merchant can choose to display the FORT response page by passing \u201cshowResponsePage\u201d value as \u201cTrue\u201d.","title":"Using the FORT Mobile SDK"},{"location":"androidsdk/#customizing-the-mobile-sdk-payment-layout","text":"We provide you with the res folder that includes the source code of the pages in order to customize the design, themes, etc. You can customize both English and Arabic layouts as needed. However, please take the following tips into consideration: Placeholder: Provide Android UI flow diagrams and Android based mobile screenshots. Don\u2019t change the layout name because it\u2019s considered an override process. Make sure to use all the views that has the ID property in order to avoid the NullPointerException. Redesign the view for portrait orientation. Note that Landscape orientation isn\u2019t supported. You can support as much layout densities as you want. Don\u2019t forget to redesign the layout-ar file too (right-to-left). Don\u2019t change, rename, or remove onClick functions. Our Mobile SDK v 1.5 consists one of the following three main activities design: activity_cc_payment.xml activity_cc_response.xml activity_init_secure_conn Every file is available for both English and Arabic alignments; layout and layout-ar. The files Hierarchy and Content might change in our SDK\u2019s future versions. Design Customization Codes: The following code was used to customize the way the \u201cAmount\u201d is displayed in the Standard Mobile SDK Payment Page: <TextView android:id=\u201c@+id/amountTV\u201d android:layout_width=\u201cmatch_parent\u201d android:layout_height=\u201c@dimen/pf_payment_type_header_height\u201d android:background=\u201c@color/pf_light_gray\u201d android:gravity=\u201ccenter_horizontal|center_vertical\u201d android:textColor=\u201c@android:color/black\u201d android:textSize=\u201c@dimen/pf_15_txt_size\u201d /> The following code is used to customize the way the \u201cAmount\u201d is displayed in the Customized Mobile SDK Payment Page: LinearLayout android:layout_width=\u201cmatch_parent\u201d android:layout_height=\u201cwrap_content\u201d android:orientation=\u201chorizontal\u201d android:padding=\u201c10dp\u201d android:background=\u201c@android:color/white\u201d> <ImageView android:layout_width=\u201c40dp\u201d android:layout_height=\u201c40dp\u201d android:src=\u201c@drawable/merchant_logo\u201d/> <TextView android:fontFamily=\u201csans-serif-medium\u201d android:text=\u201cMerchant name\u201d android:layout_margin=\u201c10dp\u201d android:textColor=\u201c@android:color/holo_blue_dark\u201d android:layout_width=\u201cwrap_content\u201d android:layout_gravity=\u201ccenter_vertical\u201d android:layout_height=\u201cwrap_content\u201d android:src=\u201c@drawable/merchant_logo\u201d/> <TextView android:id=\u201c@+id/amountTV\u201d android:layout_width=\u201cmatch_parent\u201d android:layout_height=\u201c@dimen/pf_payment_type_header_height\u201d android:gravity=\u201cright|center_vertical\u201d android:textColor=\u201c@android:color/black\u201d android:text=\u201c100 UDS\u201d android:textSize=\u201c@dimen/pf_15_txt_size\u201d /> </LinearLayout> As appears in the previous codes, elements with IDs haven\u2019t been changed in type or removed. For example: android:id=\u201c@+id/amountTV\u201d. We were able to add static elements such as: ImageView element that contains the Merchant\u2019s logo, and TextView that contains the Merchant\u2019s name. To sum up, you can add any static elements or redesign the view, while keeping the views\u2019 elements used in the Standard layout that hold IDs. Make sure to retest your custom design, for example, by showing the error messages on fields and applying the changes to the Arabic layout. (Refer to the points mentioned under the **Customizing the Mobile SDK Payment Layout** section). The customized XML file should be added to the layout file in the target project (Merchant Application) to override the SDK file.","title":"Customizing the Mobile SDK Payment Layout"},{"location":"androidsdk/#payfort-android-sdk-operations","text":"Once you have done the project setup and installation, you will be performing the Operations for authorization and purchase done through mobile application. These operations helps your mobile application to process Authorization and Purchase operations. You will be sending the request parameters in your code which will be sent to the PayFORT server and your application will receive response from the PayFORT server. Sample Code public class PayFortSdkSample extends Activity { private FortCallBackManager fortCallback = null; String deviceId = \u201c\u201d, sdkToken = \u201c\u201d; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // create Fort callback instance fortCallback = FortCallback.Factory.create(); // Generating deviceId deviceId = FortSdk.getDeviceId(PayFortSdkSample.this); Log.d(\u201cDeviceId \u201d, deviceId); // prepare payment request FortRequest fortrequest = new FortRequest(); fortrequest.setRequestMap(collectRequestMap(\u201cPASS_THE_GENERATED_SDK_TOKEN_ HERE\u201d)); fortrequest.setShowResponsePage(true); // to [display/use] the SDK response page // execute payment request callSdk(fortrequest); } private Map<String, Object> collectRequestMap(String sdkToken) { Map<String, Object> requestMap = new HashMap<>(); requestMap.put(\u201ccommand\u201d, \u201cPURCHASE\u201d); requestMap.put(\u201ccustomer_email\u201d, \u201cSam@gmail.com\u201d); requestMap.put(\u201ccurrency\u201d, \u201cSAR\u201d); requestMap.put(\u201camount\u201d, \u201c100\u201d); requestMap.put(\u201clanguage\u201d, \u201cen\u201d); requestMap.put(\u201cmerchant_reference\u201d, \u201cORD-0000007682\u201d); requestMap.put(\u201ccustomer_name\u201d, \u201cSam\u201d); requestMap.put(\u201ccustomer_ip\u201d, \u201c172.150.16.10\u201d); requestMap.put(\u201cpayment_option\u201d, \u201cVISA\u201d); requestMap.put(\u201ceci\u201d, \u201cECOMMERCE\u201d); requestMap.put(\u201corder_description\u201d, \u201cDESCRIPTION\u201d); requestMap.put(\u201csdk_token\u201d, sdkToken); return requestMap; } private void callSdk(FortRequest fortrequest) { try { FortSdk.getInstance().registerCallback(PayFortSdkSample.this, fortrequest, FortSdk.ENVIRONMENT.TEST, 5, fortCallback, new FortInterfaces.OnTnxProcessed() { @Override public void onCancel(Map<String, Object> requestParamsMap, Map<String, Object> responseMap) { //TODO: handle me Log.d(\u201cCancelled \u201d, responseMap.toString()); } @Override public void onSuccess(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me Log.i(\u201cSuccess \u201d, fortResponseMap.toString()); } @Override public void onFailure(Map<String, Object> requestParamsMap, Map<String, Object> fortResponseMap) { //TODO: handle me Log.e(\u201cFailure \u201d, fortResponseMap.toString()); } }); } catch (Exception e) { Log.e(\u201cexecute Payment\u201d, \u201ccall FortSdk\u201d, e); } } @Override public void onActivityResult(int requestCode, int resultCode, Intent data) { super.onActivityResult(requestCode, resultCode, data); fortCallback.onActivityResult(requestCode, resultCode, data); } Placeholder for sample response from the PayFORT server. You can check out the request and response parameters by visiting this link .","title":"PayFORT Android SDK Operations"},{"location":"androidsdk/#payfort-android-sdk-device-id-permission","text":"This section helps the developers to understand the need and usage of the permission requested by the PayFORT Payment SDK to generate a unique device ID. You might not face this issue through your payment flow. It depends on the time you are requesting the getDeviceID function and ask about the permission for the first time. A part of the FORT mobile SDK flow is to get a unique ID for the device. Generating the ID based on more than one input (collecting as much as possible will lead to a real unique ID). The Telephone manager is one of these sources. Accessing the Telephone manager need the use of \u2018android.permission.READ_PHONE_STATE\u2019 permission. According to Android that\u2019s a dangerous permission to be used. Getting the needed permission through the flow on the case of getting the client granted that will produce a miss match device ID on the 1st SDK call. To avoid the mismatch flow we are suggesting you the following solutions: Handle the 1st SDK call in the onActivityResults(). Since The FORT SDK is a module running within the main application context the requested permission response will be returned to the merchant context. Once the activity that called geDeviceId for the 1st received a call-back in the onActivityResult() with request code = 222 you can for sure starts the payment flow of creating an SDK token and calling the SDK afterwards. Call getDeviceID on a previous activity or in your application class to make sure that the permission request was triggered before you reach the payment step.","title":"PayFORT Android SDK \u2013 Device ID permission"},{"location":"androidsdk/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"androidsdk/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"androidsdkoperations/","text":"Android SDK Operations command (String, mandatory) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic customer_email (alphanumeric, mandatory) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric, optional) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. sdk_token (alphanumeric, mandatory) Maximum Length Example Description 100 Dwp78q3 An SDK Token to enable using the FORT Mobile SDK. payment_option (String, optional) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - SADAD (for Purchase operations only) - NAPS (for Purchase operations only) - KNET(for Purchase operations only) - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. eci (String, optional) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. customer_ip (Alphanumeric, optional) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String, optional) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. merchant_extra (alphanumeric, optional) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. remember_me (alpha, optional) Maximum Length Possible/ expected values Description 2 -YES -No This parameter provides you with an indication to whether to save this token for the user based on the user selection. phone_number (numeric, optional) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric, optional) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. SDK Operations response command (String) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. customer_email (alphanumeric) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. fort_id (alphanumeric) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. sdk_token (alphanumeric) Maximum Length Example Description 100 Dwp78q3 An SDK Token to enable using the FORT Mobile SDK. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. payment_option (String) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - SADAD (for Purchase operations only) - NAPS (for Purchase operations only) - KNET(for Purchase operations only) - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. eci (String) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. authorization_code (alphanumeric) Maximum Length Example Description 100 P1000000000000372136 The authorization code returned from the 3rd party. order_description (Alphanumeric) Maximum Length Example Special Characters Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. response_message (Alphanumeric) Maximum Length Possible/Expected values Description 150 Please refer to section messages The message description of the response code; it returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . customer_ip (Alphanumeric) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. expiry_date (numeric) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric) Maximum Length Example Description 16 400555 * 0001 The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. *AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. status (numeric) Maximum Length Possible/Expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. merchant_extra (alphanumeric) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. phone_number (numeric) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"Android SDK Parameters"},{"location":"androidsdkoperations/#android-sdk-operations","text":"command (String, mandatory) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic customer_email (alphanumeric, mandatory) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric, optional) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. sdk_token (alphanumeric, mandatory) Maximum Length Example Description 100 Dwp78q3 An SDK Token to enable using the FORT Mobile SDK. payment_option (String, optional) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - SADAD (for Purchase operations only) - NAPS (for Purchase operations only) - KNET(for Purchase operations only) - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. eci (String, optional) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. customer_ip (Alphanumeric, optional) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String, optional) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. merchant_extra (alphanumeric, optional) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. remember_me (alpha, optional) Maximum Length Possible/ expected values Description 2 -YES -No This parameter provides you with an indication to whether to save this token for the user based on the user selection. phone_number (numeric, optional) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric, optional) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"Android SDK Operations"},{"location":"androidsdkoperations/#sdk-operations-response","text":"command (String) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. customer_email (alphanumeric) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. fort_id (alphanumeric) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. sdk_token (alphanumeric) Maximum Length Example Description 100 Dwp78q3 An SDK Token to enable using the FORT Mobile SDK. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. payment_option (String) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - SADAD (for Purchase operations only) - NAPS (for Purchase operations only) - KNET(for Purchase operations only) - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. eci (String) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. authorization_code (alphanumeric) Maximum Length Example Description 100 P1000000000000372136 The authorization code returned from the 3rd party. order_description (Alphanumeric) Maximum Length Example Special Characters Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. response_message (Alphanumeric) Maximum Length Possible/Expected values Description 150 Please refer to section messages The message description of the response code; it returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . customer_ip (Alphanumeric) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. expiry_date (numeric) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric) Maximum Length Example Description 16 400555 * 0001 The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. *AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. status (numeric) Maximum Length Possible/Expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. merchant_extra (alphanumeric) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. phone_number (numeric) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"SDK Operations response"},{"location":"backoffice/","text":"","title":"Backoffice"},{"location":"billpresentment/","text":"Cash Payment Accept cash payments using the same integration process you use for card payments. Through this service your customers can pay to any authorized PayFORT's payment partners for their order by showing a unique bill number that is displayed by your site or sent to them by you. This service allows you to generate a unique bill numbers for your Customer\u2019s orders using the PayFORT API. Endpoints Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi Supported Schemes Fawry Features Details Countries supported Egypt Type voucher Clearing and Settlement Instant Processing currencies EGP Default settlement currency USD Refunds Yes Partial Refunds Yes Placeholder: If more than one scheme is supported then toggable tab is required which will contain a table for each tab similar to the above. Fawry Payment Start accepting payments using Fawry, a favorite payment method in Egypt. To start accepting Fawry payments, please contact your customer success manager. Request a Fawry payment The Request Use the details below to set up your request. Endpoints Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi Body parameters The table below describes the minimum recommended fields. You can find the full list, as well as complete request and response examples, in our API reference service_command (String,mandatory,) Maximum Length Possible/ expected values Special Characters Description 20 BILL_PRESENTMENT _ A command for payFORT server to understand. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic request_expiry_date (alphanumeric, mandatory) Maximum Length Example Special Characters Description 25 2017-12-20T15:36:55+03:00 - + : The date when the bill expires. *The merchant will hold the item till the expiry date. If the customer didn\u2019t pay, the holding will be canceled. payment_partner (String, mandatory) Maximum Length Possible/Expected values Special Characters Description 5 FAWRY - + : A financial corporation that generate bills to the customer. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature customer_name (alpha, optional) Maximum Length Example Special Characters Description 50 John Smith _ \\ / - . ' Space The customer\u2019s name customer_email (alphanumeric, optional) Maximum Length Example Special Characters Description 254 customer@domain.com _ - . @ + The customer\u2019s email. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. Response service_command (String) Maximum Length Possible/ expected values Special Characters Description 20 BILL_PRESENTMENT _ A command for payFORT server to understand. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic bill_number (numeric) Maximum Length Example Description 14 14823285500005 A unique number generated by PayFort to pay bills. request_expiry_date (alphanumeric) Maximum Length Example Special Characters Description 25 2017-12-20T15:36:55+03:00 - + : The date when the bill expires. *The merchant will hold the item till the expiry date. If the customer didn\u2019t pay, the holding will be canceled. payment_partner (String) Maximum Length Possible/Expected values Special Characters Description 5 FAWRY - + : A financial corporation that generate bills to the customer. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature customer_name (alpha) Maximum Length Example Special Characters Description 50 John Smith _ \\ / - . ' Space The customer\u2019s name customer_email (alphanumeric) Maximum Length Example Special Characters Description 254 customer@domain.com _ - . @ + The customer\u2019s email. response_message (alphanumeric) Maximum Length Possible/Expected value Description 150 Please refer to section messages Message description of the response code. It returns according to the request language. response_code (numeric) Maximum Length Example Description 5 46000 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/Expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Cash Payment"},{"location":"billpresentment/#cash-payment","text":"Accept cash payments using the same integration process you use for card payments. Through this service your customers can pay to any authorized PayFORT's payment partners for their order by showing a unique bill number that is displayed by your site or sent to them by you. This service allows you to generate a unique bill numbers for your Customer\u2019s orders using the PayFORT API.","title":"Cash Payment"},{"location":"billpresentment/#endpoints","text":"Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi","title":"Endpoints"},{"location":"billpresentment/#supported-schemes","text":"Fawry Features Details Countries supported Egypt Type voucher Clearing and Settlement Instant Processing currencies EGP Default settlement currency USD Refunds Yes Partial Refunds Yes Placeholder: If more than one scheme is supported then toggable tab is required which will contain a table for each tab similar to the above.","title":"Supported Schemes"},{"location":"billpresentment/#fawry-payment","text":"Start accepting payments using Fawry, a favorite payment method in Egypt. To start accepting Fawry payments, please contact your customer success manager.","title":"Fawry Payment"},{"location":"billpresentment/#request-a-fawry-payment","text":"","title":"Request a Fawry payment"},{"location":"billpresentment/#the-request","text":"Use the details below to set up your request.","title":"The Request"},{"location":"billpresentment/#endpoints_1","text":"Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi","title":"Endpoints"},{"location":"billpresentment/#body-parameters","text":"The table below describes the minimum recommended fields. You can find the full list, as well as complete request and response examples, in our API reference service_command (String,mandatory,) Maximum Length Possible/ expected values Special Characters Description 20 BILL_PRESENTMENT _ A command for payFORT server to understand. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic request_expiry_date (alphanumeric, mandatory) Maximum Length Example Special Characters Description 25 2017-12-20T15:36:55+03:00 - + : The date when the bill expires. *The merchant will hold the item till the expiry date. If the customer didn\u2019t pay, the holding will be canceled. payment_partner (String, mandatory) Maximum Length Possible/Expected values Special Characters Description 5 FAWRY - + : A financial corporation that generate bills to the customer. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature customer_name (alpha, optional) Maximum Length Example Special Characters Description 50 John Smith _ \\ / - . ' Space The customer\u2019s name customer_email (alphanumeric, optional) Maximum Length Example Special Characters Description 254 customer@domain.com _ - . @ + The customer\u2019s email. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"Body parameters"},{"location":"billpresentment/#response","text":"service_command (String) Maximum Length Possible/ expected values Special Characters Description 20 BILL_PRESENTMENT _ A command for payFORT server to understand. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic bill_number (numeric) Maximum Length Example Description 14 14823285500005 A unique number generated by PayFort to pay bills. request_expiry_date (alphanumeric) Maximum Length Example Special Characters Description 25 2017-12-20T15:36:55+03:00 - + : The date when the bill expires. *The merchant will hold the item till the expiry date. If the customer didn\u2019t pay, the holding will be canceled. payment_partner (String) Maximum Length Possible/Expected values Special Characters Description 5 FAWRY - + : A financial corporation that generate bills to the customer. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature customer_name (alpha) Maximum Length Example Special Characters Description 50 John Smith _ \\ / - . ' Space The customer\u2019s name customer_email (alphanumeric) Maximum Length Example Special Characters Description 254 customer@domain.com _ - . @ + The customer\u2019s email. response_message (alphanumeric) Maximum Length Possible/Expected value Description 150 Please refer to section messages Message description of the response code. It returns according to the request language. response_code (numeric) Maximum Length Example Description 5 46000 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/Expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones","title":"Response"},{"location":"billpresentment/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"billpresentment/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"bypass/","text":"","title":"Bypass"},{"location":"capturepayment/","text":"Capture a payment The redirection process allows you to authorize a purchase and after a purchase has been approved you can capture a payment. This operation allows you to capture the authorized amount to your account. The capture could be partial or full depending on your requirements and request. Our two-step authorization and capture process enables you to capture payments either automatically or manually. The request Use the details below to set up your request. Endpoints Live POST https://paymentservices.payfort.com/FortAPI/paymentApi Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi You can send \"merchant_reference\" and/or \"fort_id\" in the CAPTURE request. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response even the optional ones. Capture Payment Request Here are the sample codes for requests posted to PayFORT server to authorize payment and capture the payment. Check out the request parameters by visiting this link Sample Request Here are the sample request you are required to send authorizing a purchase. Php Python Ruby Java cURL error_reporting(E_ALL); ini_set('display_errors', '1'); $url = 'https://sbpaymentservices.payfort.com/FortAPI/paymentApi'; $arrData = array( 'command' => 'CAPTURE', 'access_code' => 'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier' => 'CycHZxVj', 'merchant_reference' => 'XYZ9239-yu898', 'amount' => '10000', 'currency' => 'AED', 'language' => 'en', 'fort_id' => '149295435400084008', 'signature' => '7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'order_description' => 'iPhone 6-S', ); $ch = curl_init( $url ); # Setup request to send json via POST. $data = json_encode($arrData); curl_setopt( $ch, CURLOPT_POSTFIELDS, $data ); curl_setopt( $ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); # Return response instead of printing. curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true ); # Send request. $result = curl_exec($ch); curl_close($ch); # Print response. echo \"<pre>$result</pre>\"; import urllib import urllib2 import json url = 'https://sbpaymentservices.payfort.com/FortAPI/paymentApi'; arrData = { 'command':'CAPTURE', 'access_code':'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier':'CycHZxVj', 'merchant_reference':'XYZ9239-yu898', 'amount':'10000', 'currency':'AED', 'language':'en', 'fort_id':'149295435400084008', 'signature':'7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'order_description':'iPhone 6-S', }; values = json.dumps(arrData) data = urllib.urlencode(values) req = urllib2.Request(url, data) response = urllib2.urlopen(req) page = response.read() print page + '\\n\\n' ``` </div><div id=\"python\" class=\"tab-pane fade\"> import urllib import urllib2 import json url = 'https://sbpaymentservices.payfort.com/FortAPI/paymentApi'; arrData = { 'command':'CAPTURE', 'access_code':'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier':'CycHZxVj', 'merchant_reference':'XYZ9239-yu898', 'amount':'10000', 'currency':'AED', 'language':'en', 'fort_id':'149295435400084008', 'signature':'7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'order_description':'iPhone 6-S', }; values = json.dumps(arrData) data = urllib.urlencode(values) req = urllib2.Request(url, data) response = urllib2.urlopen(req) page = response.read() print page + '\\n\\n' ``` require 'json' require 'net/http' require 'net/https' require 'uri' require 'openssl' arrData = { 'command' => 'CAPTURE', 'access_code' => 'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier' => 'CycHZxVj', 'merchant_reference' => 'XYZ9239-yu898', 'amount' => '10000', 'currency' => 'AED', 'language' => 'en', 'fort_id' => '149295435400084008', 'signature' => '7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'order_description' => 'iPhone 6-S', }; arrData = arrData.to_json uri = URI.parse(\"https://sbpaymentservices.payfort.com/FortAPI/paymentApi\") http = Net::HTTP.new(uri.host, uri.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request = Net::HTTP::Post.new(\"/v1.1/auth\") request.add_field('Content-Type', 'application/json') request.body = arrData response = http.request(request) String jsonRequestString = \"{\\\"command\\\" : \\\"CAPTURE\\\" , \\\"access_code\\\" : \\\"zx0IPmPy5jp1vAz8Kpg7\\\", \\\"merchant_identifier\\\" : \\\"CycHZxVj\\\", \" + \"\\\"merchant_reference\\\" : \\\"XYZ9239-yu898\\\", \\\"amount\\\" : \\\"10000\\\", \\\"currency\\\" : \\\"AED\\\",\" + \"\\\"language\\\" : \\\"en\\\", \\\"fort_id\\\" : \\\"149295435400084008\\\", \" + \"\\\"signature\\\" : \\\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\\\", \\\"order_description\\\" : \\\"iPhone 6-S\\\"}\"; // Define and Initialize HttpClient HttpClient httpClient = HttpClientBuilder.create().build(); // Intialize HttpPOST with FORT Payment services URL HttpPost request = new HttpPost(\"https://sbpaymentservices.payfort.com/FortAPI/paymentApi\"); // Setup Http POST entity with JSON String StringEntity params = new StringEntity(jsonRequestString); // Setup request type as JSON request.addHeader(\"content-type\", \"application/json\"); request.setEntity(params); // Post request to FORT HttpResponse response = httpClient.execute(request); // Read response using StringBuilder StringBuilder sb = new StringBuilder(); BufferedReader reader = new BufferedReader(new InputStreamReader( response.getEntity().getContent()), 65728); String line = null; while ((line = reader.readLine()) != null) { sb.append(line); } // Print response System.out.println(sb.toString()); curl -H \"Content-Type: application/json\" -d '{\"command\":\"CAPTURE\",\"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\",\"merchant_identifier\":\"CycHZxVj\",\"merchant_reference\":\"XYZ9239-yu898\",\"amount\":\"10000\",\"currency\":\"AED\",\"language\":\"en\",\"fort_id\":\"149295435400084008\",\"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\",\"order_description\":\"iPhone6-S\"}' https://sbpaymentservices.payfort.com/FortAPI/paymentApi Capture Payment response If you receive response code 20064 with status code 04 then your request to capture a payment has been accepted by the PayFort Server. Below is the sample response that you will receive from PayFORT in JSON format. Response Sample \u200b json {\"command\":\"CAPTURE\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239-yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"fort_id\":\"149295435400084008\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone 6-S\", \"response_message\":\"Success\", \"response_code\":\"20064\", status\":\"04\" } You can check out various transaction codes by visiting this link Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Capture Payment"},{"location":"capturepayment/#capture-a-payment","text":"The redirection process allows you to authorize a purchase and after a purchase has been approved you can capture a payment. This operation allows you to capture the authorized amount to your account. The capture could be partial or full depending on your requirements and request. Our two-step authorization and capture process enables you to capture payments either automatically or manually.","title":"Capture a payment"},{"location":"capturepayment/#the-request","text":"Use the details below to set up your request.","title":"The request"},{"location":"capturepayment/#endpoints","text":"","title":"Endpoints"},{"location":"capturepayment/#live","text":"POST https://paymentservices.payfort.com/FortAPI/paymentApi","title":"Live"},{"location":"capturepayment/#sandbox","text":"POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi You can send \"merchant_reference\" and/or \"fort_id\" in the CAPTURE request. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response even the optional ones.","title":"Sandbox"},{"location":"capturepayment/#capture-payment-request","text":"Here are the sample codes for requests posted to PayFORT server to authorize payment and capture the payment. Check out the request parameters by visiting this link","title":"Capture Payment Request"},{"location":"capturepayment/#capture-payment-response","text":"If you receive response code 20064 with status code 04 then your request to capture a payment has been accepted by the PayFort Server. Below is the sample response that you will receive from PayFORT in JSON format.","title":"Capture Payment response"},{"location":"capturepayment/#response-sample","text":"\u200b json {\"command\":\"CAPTURE\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239-yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"fort_id\":\"149295435400084008\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone 6-S\", \"response_message\":\"Success\", \"response_code\":\"20064\", status\":\"04\" } You can check out various transaction codes by visiting this link","title":"Response Sample"},{"location":"capturepayment/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"capturepayment/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"cards/","text":"With PayFort you can accept card payments from all major global providers and many local payment methods Endpoints Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi Supported card schemes We support the following international and domestic card schemes: International Visa Mastercard American Express Discover Diners Club JCB UnionPay Local Capture the opportunity to expand your business reach by accepting Mada cards to enhance the customer experience on your checkout page. Payfort has partnered with MADA under the supervision of SAMA in taking a strategic initiative to enable all MADA cards for online buyers to enjoy a convenient way to digitalize cash and increase the spend through their existing MADA cards through various KSA e-commerce merchants. There are around 30 million MADA debit cards being issued by 16 member banks in KSA. PAYFORT gateway also supports Sadad for Merchants residing in the Kingdom of Saudi Arabia (KSA). More and more Saudi businesses are beginning to rely on online payment processes that\u2019s why the addition of SADAD account to PAYFORT will provide businesses with the means to accept payments. At the moment Payfort supports following local payment methods: Sadad KNET Mada NAPS Oman NET MEEZA User Countries Middle East/North Africa: Saudi Arabia Clearing and settlement: Instant Processing currencies: Saudi Riyal Default settlement currency: Saudi Riyal Refunds: YES Partial refunds: YES User Countries Middle East/North Africa: Kuwait Clearing and settlement: Instant Processing currencies: KWD Default settlement currency: KWD Refunds: YES Partial refunds: YES User Countries Middle East/North Africa: Saudi Arabia Clearing and settlement: Instant Processing currencies: SAR Default settlement currency: SAR Refunds: YES Partial refunds: YES User Countries Middle East/North Africa: Qatar Clearing and settlement: Instant Processing currencies: Qatari Riyal Default settlement currency: Qatari Riyal Refunds: YES Partial refunds: YES User Countries Middle East/North Africa: Oman Clearing and settlement: Instant Processing currencies: Oman Riyal Default settlement currency: Oman Riyal Refunds: YES Partial refunds: YES User Countries Middle East/North Africa: Egypt Clearing and settlement: Instant Processing currencies: EGP Default settlement currency: EGP Refunds: YES Partial refunds: YES SADAD Start accepting payments using SADAD, the payment method in Saudi Arabia. The request Placeholder: Input Parameters to be added here for SADAD The Response Placeholder: The response sample KNET Start accepting payments using KNET, the leading payment method in Kuwait. The request Placeholder: Input Parameters to be added here for KNET The Response Placeholder: The response sample MADA Start accepting payments using Mada, the leading payment method in Saudi Arabia. The request Placeholder: Input Parameters to be added here for MADA The Response Placeholder: The response sample NAPS Start accepting payments using NAPS, the leading payment method in QATAR. The request Placeholder: Input Parameters to be added here for NAPS The Response Placeholder: The response sample OMAN NET Start accepting payments using OMAN NET, the leading payment method in OMAN. The request Placeholder: Input Parameters to be added here for OMAN The Response Placeholder: The response sample MEEZA Start accepting payments using MEEZA, the leading payment method in EGYPT. The request Placeholder: Input Parameters to be added here for OMAN The Response Placeholder: The response sample Test Your Card Integration You can checkout this link for testing your card integration. Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Cards"},{"location":"cards/#endpoints","text":"Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi","title":"Endpoints"},{"location":"cards/#supported-card-schemes","text":"We support the following international and domestic card schemes:","title":"Supported card schemes"},{"location":"cards/#international","text":"Visa Mastercard American Express Discover Diners Club JCB UnionPay","title":"International"},{"location":"cards/#local","text":"Capture the opportunity to expand your business reach by accepting Mada cards to enhance the customer experience on your checkout page. Payfort has partnered with MADA under the supervision of SAMA in taking a strategic initiative to enable all MADA cards for online buyers to enjoy a convenient way to digitalize cash and increase the spend through their existing MADA cards through various KSA e-commerce merchants. There are around 30 million MADA debit cards being issued by 16 member banks in KSA. PAYFORT gateway also supports Sadad for Merchants residing in the Kingdom of Saudi Arabia (KSA). More and more Saudi businesses are beginning to rely on online payment processes that\u2019s why the addition of SADAD account to PAYFORT will provide businesses with the means to accept payments. At the moment Payfort supports following local payment methods: Sadad KNET Mada NAPS Oman NET MEEZA","title":"Local"},{"location":"cards/#sadad","text":"Start accepting payments using SADAD, the payment method in Saudi Arabia. The request Placeholder: Input Parameters to be added here for SADAD The Response Placeholder: The response sample","title":"SADAD"},{"location":"cards/#knet","text":"Start accepting payments using KNET, the leading payment method in Kuwait. The request Placeholder: Input Parameters to be added here for KNET The Response Placeholder: The response sample","title":"KNET"},{"location":"cards/#mada","text":"Start accepting payments using Mada, the leading payment method in Saudi Arabia. The request Placeholder: Input Parameters to be added here for MADA The Response Placeholder: The response sample","title":"MADA"},{"location":"cards/#naps","text":"Start accepting payments using NAPS, the leading payment method in QATAR. The request Placeholder: Input Parameters to be added here for NAPS The Response Placeholder: The response sample","title":"NAPS"},{"location":"cards/#oman-net","text":"Start accepting payments using OMAN NET, the leading payment method in OMAN. The request Placeholder: Input Parameters to be added here for OMAN The Response Placeholder: The response sample","title":"OMAN NET"},{"location":"cards/#meeza","text":"Start accepting payments using MEEZA, the leading payment method in EGYPT. The request Placeholder: Input Parameters to be added here for OMAN The Response Placeholder: The response sample","title":"MEEZA"},{"location":"cards/#test-your-card-integration","text":"You can checkout this link for testing your card integration.","title":"Test Your Card Integration"},{"location":"cards/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"cards/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"collection/","text":"","title":"Collect"},{"location":"declinecodes/","text":"","title":"Decline Codes"},{"location":"dummy/","text":"Prestashop Get Started Github Repo Woocommerce Get Started Github Repo Magento Get Started Github Repo Magento 2 Get Started Github Repo Cs Cart 3 Get Started Github Repo Cs Cart 4 Get Started Github Repo Open Cart Get Started Github Repo Open Cart 2 Get Started Github Repo Php Get Started","title":"Dummy Testing"},{"location":"fawry/","text":"Fawry Payment Request a Fawry payment The Request Endpoints Body parameters Fawry Payment Start accepting payments using Fawry, a favorite payment method in Egypt. To start accepting Fawry payments, please contact your customer success manager. Request a Fawry payment The Request Use the details below to set up your request. Endpoints Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi Body parameters The table below describes the minimum recommended fields. You can find the full list, as well as complete request and response examples, in our API reference service_command (String,mandatory,) Maximum Length Possible/ expected values Special Characters Description 20 BILL_PRESENTMENT _ A command for payFORT server to understand. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic request_expiry_date (alphanumeric, mandatory) Maximum Length Example Special Characters Description 25 2017-12-20T15:36:55+03:00 - + : The date when the bill expires. *The merchant will hold the item till the expiry date. If the customer didn\u2019t pay, the holding will be canceled. payment_partner (String, mandatory) Maximum Length Possible/Expected values Special Characters Description 5 FAWRY - + : A financial corporation that generate bills to the customer. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature customer_name (alpha, optional) Maximum Length Example Special Characters Description 50 John Smith _ \\ / - . ' Space The customer\u2019s name customer_email (alphanumeric, optional) Maximum Length Example Special Characters Description 254 customer@domain.com _ - . @ + The customer\u2019s email.","title":"Fawry"},{"location":"fawry/#fawry-payment","text":"Start accepting payments using Fawry, a favorite payment method in Egypt. To start accepting Fawry payments, please contact your customer success manager.","title":"Fawry Payment"},{"location":"fawry/#request-a-fawry-payment","text":"","title":"Request a Fawry payment"},{"location":"fawry/#the-request","text":"Use the details below to set up your request.","title":"The Request"},{"location":"fawry/#endpoints","text":"Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi","title":"Endpoints"},{"location":"fawry/#body-parameters","text":"The table below describes the minimum recommended fields. You can find the full list, as well as complete request and response examples, in our API reference service_command (String,mandatory,) Maximum Length Possible/ expected values Special Characters Description 20 BILL_PRESENTMENT _ A command for payFORT server to understand. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic request_expiry_date (alphanumeric, mandatory) Maximum Length Example Special Characters Description 25 2017-12-20T15:36:55+03:00 - + : The date when the bill expires. *The merchant will hold the item till the expiry date. If the customer didn\u2019t pay, the holding will be canceled. payment_partner (String, mandatory) Maximum Length Possible/Expected values Special Characters Description 5 FAWRY - + : A financial corporation that generate bills to the customer. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature customer_name (alpha, optional) Maximum Length Example Special Characters Description 50 John Smith _ \\ / - . ' Space The customer\u2019s name customer_email (alphanumeric, optional) Maximum Length Example Special Characters Description 254 customer@domain.com _ - . @ + The customer\u2019s email.","title":"Body parameters"},{"location":"fraudbasic/","text":"","title":"Fraud Basic(Protect)"},{"location":"glossary/","text":"Glossary of Terms Used Number 3-D Secure URL - An XML -based protocol designed to be an additional security layer for online credit and debit card transactions. A ACS - Access Control Server running on the bank side that authenticates e-commerce transactions through the 3D Secure URL. P PCI-DSS - Payment Card Industry Data Security Standard. A set of security standards which forms the compliance scheme. The compliance aims to secure credit and debit card transactions against payment frauds. R Redirection - Routing to other site (bank or financial institution) or webpage through the action on the page for authentication purpose. The action could be submit button. U URL - Uniform Resource locator. Example : https:\\www.example.com","title":"Glossary"},{"location":"glossary/#glossary-of-terms-used","text":"","title":"Glossary of Terms Used"},{"location":"glossary/#number","text":"3-D Secure URL - An XML -based protocol designed to be an additional security layer for online credit and debit card transactions.","title":"Number"},{"location":"glossary/#a","text":"ACS - Access Control Server running on the bank side that authenticates e-commerce transactions through the 3D Secure URL.","title":"A"},{"location":"glossary/#p","text":"PCI-DSS - Payment Card Industry Data Security Standard. A set of security standards which forms the compliance scheme. The compliance aims to secure credit and debit card transactions against payment frauds.","title":"P"},{"location":"glossary/#r","text":"Redirection - Routing to other site (bank or financial institution) or webpage through the action on the page for authentication purpose. The action could be submit button.","title":"R"},{"location":"glossary/#u","text":"URL - Uniform Resource locator. Example : https:\\www.example.com","title":"U"},{"location":"index-1/","text":"Get Started With PayFORT If you are starting out a new ecommerce or any other merchant site then you need a robust payment system that can capture not only customer's payment details but also helps you with various financial transactions needs of your customers such as recurring payments, financing purchase by the customer, one time payment etc. PayFORT helps you to build a robust payment system for your merchant site. With the help of PayFORT you can collect payment information conveniently and securely. It offers your customer the choice to pay in multiple currencies. Your customers can also select from available payment methods such as 3D secure, Apple Pay, Visa Checkout or MasterPass. You can get started with a PayFORT test account by signing up using this link If you want to integrate payment systems with your site then you can sign up for a live account by visiting this link Endpoints An endpoint is one end of a communication channel and your merchant site will communicate with the PayFORT resources using Endpoints. For PayFORT APIs , an endpoint includes a URL of PayFORT server or service. Sandbox POST https://sbcheckout.payfort.com/FortAPI/paymentPage Live POST https://checkout.payfort.com/FortAPI/paymentPage Give It a Try Use one of our test cards and corresponding CVV to try iFrames out for yourself. You can use any expiry date (`mm/yy`), as long as it's in the future. PayFORT offers you two approaches for integrations with your merchant site as mentioned below: Merchant Page Integration There are two ways to integrate Merchant pages Merchant Page 1 Merchant Page 2 What is iFrame for Web? You can setup payment form and start accepting payments within few minutes with the help of iFrame. PayFORT provides easy to use iFrame which can be easily integrated with your payment form. It takes the look and feel of your merchant site and accepts payments from major credit cards including MADA, VISA, Mastercard, etc. You develop your site in any technology of your choice and integrate the iFrame in your html based checkout page. The PayFORT iframe takes the look and feel as that of your website. Figure 1 - Using PayFORT iFrame for web How it Works? Your checkout page will display an integrated PayFORT iFrame to your Customer that has the same look and feel as that of your website. Customer fills his/her payment details in the checkout page. PayFORT server receives the payment details and validates the same. PayFORT then sends a token to your checkout page to complete the transaction. You have the option to redirect the Customer directly to the checkout page. For more details on Tokens and Tokenization process visit the Link Integration Flow Figure 2 : Integration Flow using iFrame Here is the description of the PayFORT iFrame Integration workflow : The customer begins the checkout process on your website. The payment page with integrated iFrame is displayed. The Customer then enters the card\u2019s details on the payment page. PayFORT checks the card details. PayFORT creates a token for the Customer transaction and sends it to the payment page. The Payment page then sends a JSON request along with the token to PayFORT. In case your page receives from PayFORT server a 3-D Secure URL 3ds_url , and response indicating that a 3ds check is required then: Your payment page redirects the Customer to the ACS to check his card enrollment. The Customer enters authentication data on the ACS platform. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFORT. PayFORT completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFORT sends the payment results to your site. In case of 3ds secure check, PayFort returns status 20: On hold and message 064: 3-D Secure check requested message.For example, PayFort is waiting for your payment page to authenticate the Customer. If you include the token_name parameter in the request and this Token already has a successful Authorization, then the card number (masked) and expiry date will be displayed in their allocated fields. If the Token is sent by you, it will be generated with the same name as sent by your page. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. For more details on Tokens and Tokenization process visit the Link Integrate iFrames to Payment Page If you are planning to use PayFORT iFrames then you can use the endpoints Endpoints for testing and and also for going live. You can use programming language of your choice or what your site uses and can use the iFrame in your html based check out page. Before you start Make sure you have your access_code . Refer to Figure 3 . You can find it in the backoffice , under Integration Settings > Security Settings > Access Code . If you don't have an account with us yet, you can create a test account by visiting the Link . You can also get started with an active account by visiting this link . Once you signup you will get the access to the Backoffice. You can check out more about navigating through backoffice by visiting this link Figure 3 : Access Code Generation The Payment Page Template available in the backoffice provides you the feature to create a payment processing page using PayFort iFrame. Refer to the Figure 4 Figure 4 : Use Payment Settings to create a payment form Sample iFrame code snippet The following sample code snippet is the start of the payment process and allows you to tokenize a customer's sensitive card information using iFrames. <html> </head> <body> <iframe style=\"border:5px dotted red\" name=\"myframe\" src = \"\" width=\"400\" height=\"600\"> </iframe> <form action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\" method=\"post\" id=\"\" target=\"myframe\"> <INPUT type=\"hidden\" NAME=\"service_command\" value=\"TOKENIZATION\"> <INPUT type=\"hidden\" NAME=\"language\" value=\" \"> <INPUT type=\"hidden\" NAME=\"merchant_identifier\" value=\"\"> <INPUT type=\"hidden\" NAME=\"access_code\" value=\"\"> <INPUT type=\"hidden\" NAME=\"signature\" value=\"\"> <INPUT type=\"hidden\" NAME=\"return_url\" value=\"\"> <INPUT type=\"hidden\" NAME=\"merchant_reference\" value=\"\"> <input value=\"Send\" type=\"submit\" id=\"form1\"> </form> </body> </html> The above code snippet is an HTML based form that will post a request to PayFORT server. The request parameters are also added in the input tag of the code. However, If you are not familiar with HTML tags and forms then you can checkout this site The parameters are mandatory and are required by PayFORT server to validate, authenticate and provide the tokens for processing of payment The form consists of iframe tag which specifies the style, name of the style (you can give any name to your style), source code location, width and height of the iframe. All these are customizable values which you can provide. The form action tag consists of the endpoints . This will come handy whenever submit action is performed on the page. Once the form is submitted the parameters provided in the form would be sent to the PayFORT server and Endpoints will serve as communication link between your page and PayFORT server. Here is the description of the input parameters: The very first input parameter is the service command Tokenization. This service command will provide the server with a valid command that it should perform once it receives the request. The second input parameter denotes the language. There are two options which you can use. The languages supported by our platform are en/ar . You can provide either english(en) or arabic(ar) in the input parameter value. The third input parameter is merchant identifier and the value of the same can be check in the [backoffice](backoffice.md) The fourth input parameter is the access code and again its value can be found in backoffice. The fifth input parameter is the signature which is a SHA based and can be generated in the backoffice. The sixth input parameter is the return url which the url of the page where you would like to receive the response of the PayFORT server or the response to your request The seventh input parameter is the merchant reference which is nothing but unique order number You need to provide the values of all the input parameters in the value field before your payment page can send request to the PayFORT server Finally the laster input parameter would be a submit parameter which would submit the form and the request would be forwarded to the PayFORT server For more details on Tokens and Tokenization process visit the link Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam. PayFORT Payment Features With PayFORT you need not redirect your customers to third party website for payment and they will be able to pay on the payment page of your website. You are no longer required to get your website PCI-Compliant. Since PayFORT is PCI-DSS compliant it means your business transactions will be PCI-Compliant automatically. It offers payment solutions for various shopping cart applications including your own in house shopping cart application. \u200b Figure 1 \u200b Shopping cart applications supported by PayFort Using PayFORT iFrame PayFORT iFrame * helps you to create a customizable payment form. It gives the customer freedom to provide their payment details on your site's checkout page. Once the details are entered PayFORT generates a secure single use token through tokenization process. This token can be used to request a payment without the need to store any customer's payment information in your site. PayFORT processes the transaction and returns the results back to the your site through invisible redirection. check out iframe for web here Using Custom Payment Form You can also design and develop your own custom form for collecting the card details. The card details are sent directly to PayFORT and substituted with Token. You can then use this Token to complete the transaction. custom payment form Get Started With Testing If you have developed your payment page then you can proceed with creation of a testing account by visiting link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Get Started With PayFORT"},{"location":"index-1/#get-started-with-payfort","text":"If you are starting out a new ecommerce or any other merchant site then you need a robust payment system that can capture not only customer's payment details but also helps you with various financial transactions needs of your customers such as recurring payments, financing purchase by the customer, one time payment etc. PayFORT helps you to build a robust payment system for your merchant site. With the help of PayFORT you can collect payment information conveniently and securely. It offers your customer the choice to pay in multiple currencies. Your customers can also select from available payment methods such as 3D secure, Apple Pay, Visa Checkout or MasterPass. You can get started with a PayFORT test account by signing up using this link If you want to integrate payment systems with your site then you can sign up for a live account by visiting this link","title":"Get Started With PayFORT"},{"location":"index-1/#payfort-payment-features","text":"With PayFORT you need not redirect your customers to third party website for payment and they will be able to pay on the payment page of your website. You are no longer required to get your website PCI-Compliant. Since PayFORT is PCI-DSS compliant it means your business transactions will be PCI-Compliant automatically. It offers payment solutions for various shopping cart applications including your own in house shopping cart application. \u200b Figure 1 \u200b Shopping cart applications supported by PayFort","title":"PayFORT Payment Features"},{"location":"index-1/#using-payfort-iframe","text":"PayFORT iFrame * helps you to create a customizable payment form. It gives the customer freedom to provide their payment details on your site's checkout page. Once the details are entered PayFORT generates a secure single use token through tokenization process. This token can be used to request a payment without the need to store any customer's payment information in your site. PayFORT processes the transaction and returns the results back to the your site through invisible redirection. check out iframe for web here","title":"Using PayFORT iFrame"},{"location":"index-1/#using-custom-payment-form","text":"You can also design and develop your own custom form for collecting the card details. The card details are sent directly to PayFORT and substituted with Token. You can then use this Token to complete the transaction. custom payment form","title":"Using Custom Payment Form"},{"location":"index-1/#get-started-with-testing","text":"If you have developed your payment page then you can proceed with creation of a testing account by visiting link","title":"Get Started With Testing"},{"location":"index-1/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"installments/","text":"","title":"Installments"},{"location":"iossdk/","text":"image source : medium.com Integrate iOS SDK The PayFort iOS SDK makes it faster and easy to build a perfect payment experience in your iOS app. PayFort offers powerful and customizable UI screens and elements that can be used out-of-the-box to collect your users\u2019 payment details. We also expose the low-level APIs that power those UIs so that you can build fully custom experiences. About the Software Supported Platforms PayFort iOS SDK is supported on all the apple devices running iOS 8 and above. Localization The FORT Mobile SDK supports both English and Arabic languages. Screen Orientation Portrait is the only orientation supported within the FORT Mobile SDK. Supported Payment Methods Through the first version of the FORT Mobile SDK, the Merchant has the ability to process a CREDIT CARD transactions only. Supported Payment Options The supported credit card payment options are VISA , MASTERCARD , American Express (AMEX) , MADA and MEEZA . Mobile SDK integration workflow image source : medium.com placeholder for Integration flow description and Integration flow diagram. Project Setup Include the PayFORT iOS SDK to your Xcode Project The following steps describe how to setup an Xcode project for iOS development environment using the FORT iOS SDK. The prerequisites are the apple machine. You can chose to write the program either in Objective-C or in Swift programming which is the latest programming by the apple development community. The below steps describes the project setup for both objective-c and swift programming. Placeholder: please provide pics for every step described in this section. Download the sdk from this link and extract it. Drag the PayFortSDK.framework & PayFortSDK.bundle to Frameworks in Project Navigator. Create a new group Frameworks if it does not exist: Choose Create groups for any added folders. Make Sure to select Copy files if needed. Set -ObjC in the Other Linker Flags in the Target \u2192 Build Settings Tab. For Swift Projects add the following code In your Bridge-Header.h: #import <PayFortSDK/PayFortSDK.h> Ensure the option 'Link With Standard Libraries' is set to Yes or just drag the PayFortSDK to Embedded Binaries in the general tab in the project settings. In Xcode, click your project\u2019s .plist file and select Open As \u2192 Source Code. Insert the following XML snippet into the body of your file just before the final: </dict>element <key>NSAppTransportSecurity</key> <dict> <key>NSAllowsArbitraryLoads</key><true/> </dict> To ensure that the application is not disconnected go to background make sure to add this code:Objective C (void)applicationDidEnterBackground:(UIApplication *)application { __block UIBackgroundTaskIdentifier backgroundTask; backgroundTask = [application beginBackgroundTaskWithExpirationHandler: ^ { [application endBackgroundTask:backgroundTask]; backgroundTask = UIBackgroundTaskInvalid; }]; Swift func applicationDidEnterBackground(_ application: UIApplication) { var bgTask: UIBackgroundTaskIdentifier = 0 bgTask = application.beginBackgroundTask(expirationHandler: { application.endBackgroundTask(bgTask) bgTask = UIBackgroundTaskInvalid }) } Installation of PayFORT SDK When you register for Payfort, you will receive separate keys for testing and production environment. Placeholder: please provide pics for every step described in this section. Import the PayFort Library. #import <PayFortSDK/PayFortSDK.h> Initialize PayFortController with targeted environment, You set the target environment by setting one the two ENUM KPayFortEnviromentSandBox or KPayFortEnviromentProduction . Objective C PayFortController *payFort = [[PayFortControlleralloc]initWithEnviroment:KPayFortEnviromentSandBox]; Swift let payFort = PayFortController.init(enviroment: KPayFortEnviromentSandBox) Set Dictionary contain all keys and values for SDK. Objective C NSMutableDictionary *request = [[NSMutableDictionary alloc]init]; [request setValue:@\u201c10000\u201d forKey:@\u201camount\u201d]; [request setValue:@\u201cAUTHORIZATION\u201d forKey:@\u201ccommand\u201d]; [request setValue:@\u201cUSD\u201d forKey:@\u201ccurrency\u201d]; [request setValue:@ \u201cemail@domain.com\u201d forKey:@\u201ccustomer_email\u201d]; [request setValue:@\u201cen\u201d forKey:@\u201clanguage\u201d]; [request setValue:@\u201c112233682686\u201d forKey:@\u201cmerchant_reference\u201d]; [request setValue:`SDK TOKEN GOES HERE` forKey:@\u201csdk_token\u201d]; [request setValue:@\u201c\u201d forKey:@\u201cpayment_option\u201d]; [request setValue:@\u201cgr66zzwW9\u201d forKey:@\u201ctoken_name\"]; Swift let request = NSMutableDictionary.init() request.setValue(\u201c1000\u201d, forKey: \u201camount\u201d) request.setValue(\u201cAUTHORIZATION\u201d, forKey: \u201ccommand\u201d) request.setValue(\u201cUSD\u201d, forKey: \u201ccurrency\u201d) request.setValue(\u201cemail@domain.com\u201d, forKey: \u201ccustomer_email\u201d) request.setValue(\u201cen\u201d, forKey: \u201clanguage\u201d) request.setValue(\u201c112233682686\u201d, forKey: \u201cmerchant_reference\u201d) request.setValue(\u201ctoken\u201d , forKey: \u201csdk_token\u201d) Call PayFort and Response callback Objective C [payFort callPayFortWithRequest:request currentViewController:self Success:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cSuccess\u201d); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Canceled:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cCanceled\u201d); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Faild:^(NSDictionary *requestDic, NSDictionary *responeDic, NSString *message) { NSLog(@\u201cFaild\u201d); NSLog(@\u201cresponeDic=%@\u201d,responeDic); }]; Swift PayFort.callPayFort(withRequest: request, currentViewController: self, success: { (requestDic, responeDic) in print(\u201csuccess\u201d) }, canceled: { (requestDic, responeDic) in print(\u201ccanceled\u201d) }, faild: { (requestDic, responeDic, message) in print(\u201cfaild\u201d) }) SDK - Response Once you send your SDK request to PayFORT you will receive a response which will be a dictionary which displays the request parameters being sent in addition to the status, response message and response code. The response(along with message success, failed or cancelled) will be already in the registered call back handler. The response can be viewed in the log as shown below for both objective C and swift programming: Objective C [payFort callPayFortWithRequest:request currentViewController:self Success:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cSuccess\u201d); NSLog(@\u201crequestDic=%@\u201d,requestDic); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Canceled:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cCanceled\u201d); NSLog(@\u201crequestDic=%@\u201d,requestDic); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Faild:^(NSDictionary *requestDic, NSDictionary *responeDic, NSString *message) { NSLog(@\u201cFaild\u201d); NSLog(@\u201crequestDic=%@\u201d,requestDic); NSLog(@\u201cresponeDic=%@\u201d,responeDic); NSLog(@\u201cmessage=%@\u201d,message); }]; Swift PayFort.callPayFort(withRequest: request, currentViewController: self, success: { (requestDic, responeDic) in print(\u201csuccess\u201d) print(\u201cresponeDic=(responeDic)\u201d) print(\u201cresponeDic=(responeDic)\u201d) }, canceled: { (requestDic, responeDic) in print(\u201ccanceled\u201d) print(\u201crequestDic=(requestDic)\u201d) print(\u201cresponeDic=(responeDic)\u201d) }, faild: { (requestDic, responeDic, message) in print(\u201cfaild\u201d) print(\u201crequestDic=(requestDic)\u201d) print(\u201cresponeDic=(responeDic)\u201d) print(\u201cmessage=(message)\u201d) }) If you do not want to investigate logs for response message you have the option to show response in the view directly in an elegant manner by displaying the response results as success or failed. You can check the sample code in objective c and swift programming to display the response message as shown below: Objective C PayFort.IsShowResponsePage = YES; Swift PayFort.IsShowResponsePage = true; Hidden PayFort loading There is an option to hide loading view when SDK initializes the connection request. You can disable the loading view by setting HideLoading option to yes or true as shown in the sample code. If you are using Objective C then you have to set it to yes and if you are using swift you have to set it to true. Please refer to below piece of code. Objective C PayFort.HideLoading = YES; Swift PayFort.HideLoading = true; Custom Payment Designing The payment view is what your customer will see when they open your merchant app on their cellphone and payment view will help them to make payment through your application. You can create your own custom UI theme for the payment view by the following ways: Create your nibFile .xib and set the name of Arabic xib same name with English one with suffix -ar. Link the xib with PayFortView and bind all the IBOutlets in interface section as shown in the code example below IBOutlet UILabel *titleLbl; IBOutlet UIButton *BackBtn; IBOutlet UILabel *PriceLbl; IBOutlet JVFloatLabeledTextField *CardNameTxt; IBOutlet JVFloatLabeledTextField *CardNumberTxt; IBOutlet JVFloatLabeledTextField *CVCNumberTxt; IBOutlet JVFloatLabeledTextField *ExpDateTxt; IBOutlet UILabel *cardNumberErrorlbl; IBOutlet UILabel *cVCNumberErrorlbl; IBOutlet UILabel *expDateErrorlbl; IBOutlet UISwitch *savedCardSwitch; IBOutlet UIButton *paymentBtn; IBOutlet UILabel *saveCardLbl; IBOutlet UIImageView *imageCard; Placeholder: please provide UI flow diagram alongwith iphone screenshot for the same. Assign new created xib file to PayFort Controller. [payFort setPayFortCustomViewNib:@\u201cPayFortView2\u201d]; If you call Arabic view and the Arabic view does not exist then the application will crash. Don\u2019t forget to set the custom view field in the identity inspector. PayFORT iOS SDK Operations Once you have done the project setup and installation, you will be performing the Operations for authorization and purchase done through mobile application. These operations helps your mobile application to process Authorization and Purchase operations. You will be sending the request parameters in your code which will be sent to the PayFORT server and your application will receive response from the PayFORT server. Placeholder for operations' ios sample code. Placeholder for sample response from the PayFORT server. You can check out the request and response parameters by visiting this link . Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Integrate iOS SDK"},{"location":"iossdk/#integrate-ios-sdk","text":"The PayFort iOS SDK makes it faster and easy to build a perfect payment experience in your iOS app. PayFort offers powerful and customizable UI screens and elements that can be used out-of-the-box to collect your users\u2019 payment details. We also expose the low-level APIs that power those UIs so that you can build fully custom experiences.","title":"Integrate iOS SDK"},{"location":"iossdk/#about-the-software","text":"","title":"About the Software"},{"location":"iossdk/#supported-platforms","text":"PayFort iOS SDK is supported on all the apple devices running iOS 8 and above.","title":"Supported Platforms"},{"location":"iossdk/#localization","text":"The FORT Mobile SDK supports both English and Arabic languages.","title":"Localization"},{"location":"iossdk/#screen-orientation","text":"Portrait is the only orientation supported within the FORT Mobile SDK.","title":"Screen Orientation"},{"location":"iossdk/#supported-payment-methods","text":"Through the first version of the FORT Mobile SDK, the Merchant has the ability to process a CREDIT CARD transactions only.","title":"Supported Payment Methods"},{"location":"iossdk/#supported-payment-options","text":"The supported credit card payment options are VISA , MASTERCARD , American Express (AMEX) , MADA and MEEZA .","title":"Supported Payment Options"},{"location":"iossdk/#mobile-sdk-integration-workflow","text":"image source : medium.com placeholder for Integration flow description and Integration flow diagram.","title":"Mobile SDK integration workflow"},{"location":"iossdk/#project-setup","text":"Include the PayFORT iOS SDK to your Xcode Project The following steps describe how to setup an Xcode project for iOS development environment using the FORT iOS SDK. The prerequisites are the apple machine. You can chose to write the program either in Objective-C or in Swift programming which is the latest programming by the apple development community. The below steps describes the project setup for both objective-c and swift programming. Placeholder: please provide pics for every step described in this section. Download the sdk from this link and extract it. Drag the PayFortSDK.framework & PayFortSDK.bundle to Frameworks in Project Navigator. Create a new group Frameworks if it does not exist: Choose Create groups for any added folders. Make Sure to select Copy files if needed. Set -ObjC in the Other Linker Flags in the Target \u2192 Build Settings Tab. For Swift Projects add the following code In your Bridge-Header.h: #import <PayFortSDK/PayFortSDK.h> Ensure the option 'Link With Standard Libraries' is set to Yes or just drag the PayFortSDK to Embedded Binaries in the general tab in the project settings. In Xcode, click your project\u2019s .plist file and select Open As \u2192 Source Code. Insert the following XML snippet into the body of your file just before the final: </dict>element <key>NSAppTransportSecurity</key> <dict> <key>NSAllowsArbitraryLoads</key><true/> </dict> To ensure that the application is not disconnected go to background make sure to add this code:Objective C (void)applicationDidEnterBackground:(UIApplication *)application { __block UIBackgroundTaskIdentifier backgroundTask; backgroundTask = [application beginBackgroundTaskWithExpirationHandler: ^ { [application endBackgroundTask:backgroundTask]; backgroundTask = UIBackgroundTaskInvalid; }]; Swift func applicationDidEnterBackground(_ application: UIApplication) { var bgTask: UIBackgroundTaskIdentifier = 0 bgTask = application.beginBackgroundTask(expirationHandler: { application.endBackgroundTask(bgTask) bgTask = UIBackgroundTaskInvalid }) }","title":"Project Setup"},{"location":"iossdk/#installation-of-payfort-sdk","text":"When you register for Payfort, you will receive separate keys for testing and production environment. Placeholder: please provide pics for every step described in this section. Import the PayFort Library. #import <PayFortSDK/PayFortSDK.h> Initialize PayFortController with targeted environment, You set the target environment by setting one the two ENUM KPayFortEnviromentSandBox or KPayFortEnviromentProduction . Objective C PayFortController *payFort = [[PayFortControlleralloc]initWithEnviroment:KPayFortEnviromentSandBox]; Swift let payFort = PayFortController.init(enviroment: KPayFortEnviromentSandBox) Set Dictionary contain all keys and values for SDK. Objective C NSMutableDictionary *request = [[NSMutableDictionary alloc]init]; [request setValue:@\u201c10000\u201d forKey:@\u201camount\u201d]; [request setValue:@\u201cAUTHORIZATION\u201d forKey:@\u201ccommand\u201d]; [request setValue:@\u201cUSD\u201d forKey:@\u201ccurrency\u201d]; [request setValue:@ \u201cemail@domain.com\u201d forKey:@\u201ccustomer_email\u201d]; [request setValue:@\u201cen\u201d forKey:@\u201clanguage\u201d]; [request setValue:@\u201c112233682686\u201d forKey:@\u201cmerchant_reference\u201d]; [request setValue:`SDK TOKEN GOES HERE` forKey:@\u201csdk_token\u201d]; [request setValue:@\u201c\u201d forKey:@\u201cpayment_option\u201d]; [request setValue:@\u201cgr66zzwW9\u201d forKey:@\u201ctoken_name\"]; Swift let request = NSMutableDictionary.init() request.setValue(\u201c1000\u201d, forKey: \u201camount\u201d) request.setValue(\u201cAUTHORIZATION\u201d, forKey: \u201ccommand\u201d) request.setValue(\u201cUSD\u201d, forKey: \u201ccurrency\u201d) request.setValue(\u201cemail@domain.com\u201d, forKey: \u201ccustomer_email\u201d) request.setValue(\u201cen\u201d, forKey: \u201clanguage\u201d) request.setValue(\u201c112233682686\u201d, forKey: \u201cmerchant_reference\u201d) request.setValue(\u201ctoken\u201d , forKey: \u201csdk_token\u201d) Call PayFort and Response callback Objective C [payFort callPayFortWithRequest:request currentViewController:self Success:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cSuccess\u201d); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Canceled:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cCanceled\u201d); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Faild:^(NSDictionary *requestDic, NSDictionary *responeDic, NSString *message) { NSLog(@\u201cFaild\u201d); NSLog(@\u201cresponeDic=%@\u201d,responeDic); }]; Swift PayFort.callPayFort(withRequest: request, currentViewController: self, success: { (requestDic, responeDic) in print(\u201csuccess\u201d) }, canceled: { (requestDic, responeDic) in print(\u201ccanceled\u201d) }, faild: { (requestDic, responeDic, message) in print(\u201cfaild\u201d) })","title":"Installation of PayFORT SDK"},{"location":"iossdk/#sdk-response","text":"Once you send your SDK request to PayFORT you will receive a response which will be a dictionary which displays the request parameters being sent in addition to the status, response message and response code. The response(along with message success, failed or cancelled) will be already in the registered call back handler. The response can be viewed in the log as shown below for both objective C and swift programming: Objective C [payFort callPayFortWithRequest:request currentViewController:self Success:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cSuccess\u201d); NSLog(@\u201crequestDic=%@\u201d,requestDic); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Canceled:^(NSDictionary *requestDic, NSDictionary *responeDic) { NSLog(@\u201cCanceled\u201d); NSLog(@\u201crequestDic=%@\u201d,requestDic); NSLog(@\u201cresponeDic=%@\u201d,responeDic); } Faild:^(NSDictionary *requestDic, NSDictionary *responeDic, NSString *message) { NSLog(@\u201cFaild\u201d); NSLog(@\u201crequestDic=%@\u201d,requestDic); NSLog(@\u201cresponeDic=%@\u201d,responeDic); NSLog(@\u201cmessage=%@\u201d,message); }]; Swift PayFort.callPayFort(withRequest: request, currentViewController: self, success: { (requestDic, responeDic) in print(\u201csuccess\u201d) print(\u201cresponeDic=(responeDic)\u201d) print(\u201cresponeDic=(responeDic)\u201d) }, canceled: { (requestDic, responeDic) in print(\u201ccanceled\u201d) print(\u201crequestDic=(requestDic)\u201d) print(\u201cresponeDic=(responeDic)\u201d) }, faild: { (requestDic, responeDic, message) in print(\u201cfaild\u201d) print(\u201crequestDic=(requestDic)\u201d) print(\u201cresponeDic=(responeDic)\u201d) print(\u201cmessage=(message)\u201d) }) If you do not want to investigate logs for response message you have the option to show response in the view directly in an elegant manner by displaying the response results as success or failed. You can check the sample code in objective c and swift programming to display the response message as shown below: Objective C PayFort.IsShowResponsePage = YES; Swift PayFort.IsShowResponsePage = true;","title":"SDK - Response"},{"location":"iossdk/#hidden-payfort-loading","text":"There is an option to hide loading view when SDK initializes the connection request. You can disable the loading view by setting HideLoading option to yes or true as shown in the sample code. If you are using Objective C then you have to set it to yes and if you are using swift you have to set it to true. Please refer to below piece of code. Objective C PayFort.HideLoading = YES; Swift PayFort.HideLoading = true;","title":"Hidden PayFort loading"},{"location":"iossdk/#custom-payment-designing","text":"The payment view is what your customer will see when they open your merchant app on their cellphone and payment view will help them to make payment through your application. You can create your own custom UI theme for the payment view by the following ways: Create your nibFile .xib and set the name of Arabic xib same name with English one with suffix -ar. Link the xib with PayFortView and bind all the IBOutlets in interface section as shown in the code example below IBOutlet UILabel *titleLbl; IBOutlet UIButton *BackBtn; IBOutlet UILabel *PriceLbl; IBOutlet JVFloatLabeledTextField *CardNameTxt; IBOutlet JVFloatLabeledTextField *CardNumberTxt; IBOutlet JVFloatLabeledTextField *CVCNumberTxt; IBOutlet JVFloatLabeledTextField *ExpDateTxt; IBOutlet UILabel *cardNumberErrorlbl; IBOutlet UILabel *cVCNumberErrorlbl; IBOutlet UILabel *expDateErrorlbl; IBOutlet UISwitch *savedCardSwitch; IBOutlet UIButton *paymentBtn; IBOutlet UILabel *saveCardLbl; IBOutlet UIImageView *imageCard; Placeholder: please provide UI flow diagram alongwith iphone screenshot for the same. Assign new created xib file to PayFort Controller. [payFort setPayFortCustomViewNib:@\u201cPayFortView2\u201d]; If you call Arabic view and the Arabic view does not exist then the application will crash. Don\u2019t forget to set the custom view field in the identity inspector.","title":"Custom Payment Designing"},{"location":"iossdk/#payfort-ios-sdk-operations","text":"Once you have done the project setup and installation, you will be performing the Operations for authorization and purchase done through mobile application. These operations helps your mobile application to process Authorization and Purchase operations. You will be sending the request parameters in your code which will be sent to the PayFORT server and your application will receive response from the PayFORT server. Placeholder for operations' ios sample code. Placeholder for sample response from the PayFORT server. You can check out the request and response parameters by visiting this link .","title":"PayFORT iOS SDK Operations"},{"location":"iossdk/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"iossdk/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"iossdkoperations/","text":"iOS SDK Operations command (String, mandatory) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic customer_email (alphanumeric, mandatory) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric, optional) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. sdk_token (alphanumeric, mandatory) Maximum Length Example Description 100 Dwp78q3 An SDK Token to enable using the FORT Mobile SDK. payment_option (String, optional) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - SADAD (for Purchase operations only) - NAPS (for Purchase operations only) - KNET(for Purchase operations only) - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. eci (String, optional) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. customer_ip (Alphanumeric, optional) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String, optional) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. merchant_extra (alphanumeric, optional) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. remember_me (alpha, optional) Maximum Length Possible/ expected values Description 2 -YES -No This parameter provides you with an indication to whether to save this token for the user based on the user selection. phone_number (numeric, optional) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric, optional) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. SDK Operations response command (String) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. customer_email (alphanumeric) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. fort_id (alphanumeric) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. sdk_token (alphanumeric) Maximum Length Example Description 100 Dwp78q3 An SDK Token to enable using the FORT Mobile SDK. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. payment_option (String) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - SADAD (for Purchase operations only) - NAPS (for Purchase operations only) - KNET(for Purchase operations only) - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. eci (String) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. authorization_code (alphanumeric) Maximum Length Example Description 100 P1000000000000372136 The authorization code returned from the 3rd party. order_description (Alphanumeric) Maximum Length Example Special Characters Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. response_message (Alphanumeric) Maximum Length Possible/Expected values Description 150 Please refer to section messages The message description of the response code; it returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . customer_ip (Alphanumeric) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. expiry_date (numeric) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric) Maximum Length Example Description 16 400555 * 0001 The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. *AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. status (numeric) Maximum Length Possible/Expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. merchant_extra (alphanumeric) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. phone_number (numeric) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"iOS SDK Parameters"},{"location":"iossdkoperations/#ios-sdk-operations","text":"command (String, mandatory) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic customer_email (alphanumeric, mandatory) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric, optional) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. sdk_token (alphanumeric, mandatory) Maximum Length Example Description 100 Dwp78q3 An SDK Token to enable using the FORT Mobile SDK. payment_option (String, optional) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - SADAD (for Purchase operations only) - NAPS (for Purchase operations only) - KNET(for Purchase operations only) - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. eci (String, optional) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. customer_ip (Alphanumeric, optional) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String, optional) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. merchant_extra (alphanumeric, optional) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. remember_me (alpha, optional) Maximum Length Possible/ expected values Description 2 -YES -No This parameter provides you with an indication to whether to save this token for the user based on the user selection. phone_number (numeric, optional) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric, optional) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"iOS SDK Operations"},{"location":"iossdkoperations/#sdk-operations-response","text":"command (String) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. customer_email (alphanumeric) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. fort_id (alphanumeric) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. sdk_token (alphanumeric) Maximum Length Example Description 100 Dwp78q3 An SDK Token to enable using the FORT Mobile SDK. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. payment_option (String) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - SADAD (for Purchase operations only) - NAPS (for Purchase operations only) - KNET(for Purchase operations only) - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. eci (String) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. authorization_code (alphanumeric) Maximum Length Example Description 100 P1000000000000372136 The authorization code returned from the 3rd party. order_description (Alphanumeric) Maximum Length Example Special Characters Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. response_message (Alphanumeric) Maximum Length Possible/Expected values Description 150 Please refer to section messages The message description of the response code; it returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . customer_ip (Alphanumeric) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. expiry_date (numeric) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric) Maximum Length Example Description 16 400555 * 0001 The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. *AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. status (numeric) Maximum Length Possible/Expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. merchant_extra (alphanumeric) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. phone_number (numeric) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"SDK Operations response"},{"location":"lendservice/","text":"PayFort has partnered with ValU in Egypt to offer consumer financing services. Now your customer's can purchase on short-term financing and repay the amount over a specific installment plan at an interest rate offered by ValU. Its simple and secure financing platform. How it works? Customer verification Your site sends request to verify whether the customer is a ValU registered customer or not. The customer's phone number is verified against the ValU registered user database. Based on the customer's phone number ValU's system validates whether customer is registered on its platform or not. OTP Generation If your customer is already registered on the ValU' platform then on the checkout page the customer will provide the phone number. The ValU will generate OTP code and send it to the customer via SMS. Verify OTP Once the customer fills the OTP in the checkout page it is verified. Purchase Once OTP is verified the customer can proceed to purchase the selected items. Your site should be integrated with ValU consumer finance Your customer should be registered with ValU's platform in order to have this benefit of installments Endpoints Use the below Endpoints for testing your integration and going live. Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi Live POST https://paymentservices.payfort.com/FortAPI/paymentApi Parameter Submission Type For All Request Submission REST POST request using JSON is sent for OTP generation request submission. Customer Verification The very first step in the ValU integration is the customer verification. Customer Verification Request Sample Here is the sample JSON based customer verification request that you need to send to PayFort { \"service_command\":\"CUSTOMER_VERIFY\", \"merchant_reference\":\"XYZ9239-yu898\", \"merchant_identifier\":\"CycHZxVj\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"language\":\"en\", \"payment_option\":\"VALU\", \"phone_number\":\"00008557694\", \"signature\":\"54efbd76bd644e9ef237c39137bf5d2304dc1bfdf6f6302065b448f2456a07a7\" } Customer Verification Response Sample Here is the sample of JSON based customer verification response that you will receive from PayFort { \"response_code\":\"90000\", \"response_message\":\"Success\", \"service_command\":\"CUSTOMER_VERIFY\", \"signature\":\"27c1303138f8718e56f311d1b3d823b5a644e6bcd4fac43d5454955b13b5b337\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ2939-yu898\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"payment_option\":\"VALU\", \"language\":\"en\", \"phone_number\":\"00008557694\", \"status\":\"90\" } OTP Generation For the customer already registered on the ValU platform, they need to provide their phone number on your site's check out page. After phone number is added, OTP would be generated by the ValU platform and the same would be provided to your customer through SMS. Use the Endpoints provided on this page to test your OTP generation process and also to go live. OTP Generation Request Sample Here is the sample JSON based OTP generation request sample. Request sent to PayFort must also include the product parameters as shown here. { \"merchant_reference\":\"XYZ9239-yu898\", \"merchant_identifier\":\"CycHZxVj\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"signature\":\"fb1a8978eff0df5700007f3a0ca7964f61eb4b3c17de0a43029851b84687699d\", \"service_command\":\"OTP_GENERATE\", \"language\":\"en\", \"payment_option\":\"VALU\", \"phone_number\":\"00008557694\", \"merchant_order_id\":\"Valu123\", \"amount\":\"10000\", \"currency\":\"EGP\", \"products\":[ { \"product_name\":\"iphone\", \"product_price\":\"10000\", \"product_category\":\"phone\" } ] } OTP Generation Response Sample Here is the sample JSON based OTP generation response sample { \"transaction_id\":\"240719641384\", \"amount\":\"10000\", \"currency\":\"EGP\", \"response_code\":\"88000\", \"merchant_order_id\":\"Valu123\", \"signature\":\"2304c9a011630db5286712903e7877a53aa96aa7cfe2151fd7c6cc350ec38c12\", \"merchant_identifier\":\"CycHZxVj\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"payment_option\":\"VALU\", \"language\":\"en\", \"response_message\":\"Success\", \"service_command\":\"OTP_GENERATE\", \"merchant_reference\":\"XYZ2939-yu898\", \"total_down_payment\":\"1200\", \"phone_number\":\"00008557694\", \"otp_status\":\"1\", \"tenure\":\"6-9-12-15-18\", \"status\":\"88\" } OTP Verification Once the customer receives OTP through SMS, they will provide the same on your site's checkout page. This OTP is then verified against the ValU server Use the Endpoints provided on this page to test your OTP verification process and also to go live. OTP Verification Request Sample Inorder to send OTP verification request you can refer to the sample as shown below { \"signature\":\"d5c9c93166c34efbf72c71c9f780ce7bc336f68f9d35d63dba014175fd44af58\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239-yu898\", \"merchant_order_id\":\"Valu123\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"language\":\"en\", \"amount\":\"1000\", \"currency\":\"EGP\", \"payment_option\":\"VALU\", \"service_command\":\"OTP_VERIFY\", \"total_downpayment\":1200, \"otp\":\"123456\", \"phone_number\":\"00008557694\" } OTP Verification Response Sample The sample response sent by PayFort will also contain tenure of the EMI. Here is the tenure sample Tenure Sample \"tenure\":{ \"TENURE_VM\":[ { \"EMI\":\"2118\", \"TENURE\":\"3\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"1105\", \"TENURE\":\"6\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"768\", \"TENURE\":\"9\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"600\", \"TENURE\":\"12\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"500\", \"TENURE\":\"15\", \"InterestRate\":\"1.76\" }, ] }, Here is the sample JSON response sent from PayFORT server. { \"amount\":\"10000\", \"currency\":\"EGP\", \"response_code\":\"92182\", \"merchant_order_id\":\"Valu123\", \"signature\":\"4bfc2476c6e42b6c1fc9539dbf5092bbc8a2493820816800f98f110c4453b5cd\", \"merchant_identifier\":\"CycHZxVj\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"payment_option\":\"VALU\", \"language\":\"en\", \"total_downpayment\":\"0\", \"service_command\":\"OTP_VERIFY\", \"response_message\":\"OTP verification success\", \"merchant_reference\":\"XYZ2939-yu898\", \"phone_number\":\"00008557694\", \"otp_status\":\"1\", \"tenure\":{ \"TENURE_VM\":[ { \"EMI\":\"2118\", \"TENURE\":\"3\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"1105\", \"TENURE\":\"6\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"768\", \"TENURE\":\"9\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"600\", \"TENURE\":\"12\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"500\", \"TENURE\":\"15\", \"InterestRate\":\"1.76\" }, ] }, \"status\":\"92\" } Purchase Once the OTP has been verified the customer can purchase the selected product. Your site will forward the purchase request to PayFort. Use the Endpoints provided on this page to test your Purchase process and also to go live. Purchase Request Sample Here is the JSON sample of purchase request sent to PayFort. { \"merchant_reference\":\"XYZ9239-yu898\", \"merchant_identifier\":\"CycHZxVj\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"signature\":\"b574e362cc08d7504d8277e71400132f06064ee1537cd570717569b583dec0b5\", \"command\":\"PURCHASE\", \"language\":\"en\", \"payment_option\":\"VALU\", \"phone_number\":\"00008557694\", \"amount\":\"10000\", \"currency\":\"EGP\", \"customer_email\":\"customer@domain.com\", \"customer_code\":\"12348557694\", \"merchant_order_id\":\"Valu123\", \"transaction_id\":\"050819724899\", \"otp\":\"123456\", \"tenure\":\"6\", \"total_down_payment\":\"1200\", \"purchase_description\":\"Test\" } Purchase Response Sample Here is the response sample sent from PayFort { \"amount\":\"10000\", \"response_code\":\"14000\", \"signature\":\"afac5bd50250743cbd87ce208b1aabcae1080b9060bdb7212cf2c36e201cd6d0\", \"merchant_identifier\":\"CycHZxVj\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"payment_option\":\"VALU\", \"customer_ip\":\"192.178.1.10\", \"language\":\"en\", \"eci\":\"ECOMMERCE\", \"fort_id\":\"149295435400084008\", \"command\":\"PURCHASE\", \"response_message\":\"Success\", \"merchant_reference\":\"XYZ2939-yu898\", \"customer_email\":\"customer@domain.com\", \"currency\":\"EGP\", \"phone_number\":\"00008557694\", \"status\":\"14\" } Signature SHA algorithm generates a digital signature which is used to authenticate the sender and receiver of the message. It allows the receiver to verify the Integrity of the message. In this case your site acts as sender while PayFort server acts as a receiver thus by passing the signature parameter it is ensured that high level of security is in place when the message is sent and received. It also ensures that all the messages sent are encrypted using the signature. Below table describes the signature details Signature Description Name Values Description SHA Type * SHA-256 * SHA-512 The Secure Hash Algorithm is a family of cryptographic hash functions published by the National Institute of Standards and Technology (NIST) as a U.S. Federal Information Processing Standard (FIPS), including: SHA-0, SHA-1, SHA-2, SHA-3. SHA Request Phrase Dynamic value defined by the Merchant This value is used when the Merchant generates the request signature. SHA Response Phrase Dynamic value defined by the Merchant This value is used by our system to generate the response signature for the Merchant's Request. Signature Pattern The below steps describe the signature pattern: Sort all PayFort requests parameters (both mandatory and optional) in an ascending alphabetical order based on the parameters names. Concatenate the parameter name with the value separated by '=' (param_name=param_value). Concatenate all the parameters directly without any separator. (param_name1=param_value1param_name2=param_value2). Add the Merchant's Passphrase at the beginning and end of the parameters string. (REQUESTPHRASEparam_name1=param_value1param_name2=param_value2REQUESTP HRASE). Use the SHA function to generate the SHA value of the resulted string depending on the type of SHA selected by the Merchant. The following is an example for the Customer Verification - Request signature calculations : Assume you have the below parameters included in the request of customer verification: service_command = CUSTOMER_VERIFY merchant_identifier = CycHZxVj merchant_reference = XYZ9239-yu898 access_code = zx0IPmPy5jp1vAz8Kpg7 language = en payment_option = VALU phone_number = 00008557694 Below are the Merchant signature settings from the back-office: SHA Request Phrase: PASS SHA-Type: SHA-256 The string to hash should be prepared for the above request is the following \u201cstep 4 of the Signature Pattern\u201d: PASSaccess_code=zx0IPmPy5jp1vAz8Kpg7language=enmerchant_identifier=CycHZxVjmerchant_reference=X YZ9239- yu898payment_option=VALUphone_number=00008557694service_command=CUSTOMER_VERIFYPASS After applying step 5 of the Signature pattern, the result will be as follows: Signature = f0c49b9dae92b3da04d82689f698189ac65f62596280cd253cb24130ce5a1ed6 The following is an example for the OTP Generation \u2013 Request signature calculations: Assume you have the below parameters included in the request of generate OTP: service_command = OTP_GENERATE access_code = zx0IPmPy5jp1vAz8Kpg7 merchant_identifier = CycHZxVj merchant_reference = XYZ9239-yu898 payment_option = VALU phone_number = 00008557694 merchant_order_id = Valu123 amount = 10000 currency = EGP products = [ { \"product_name\":\"iphone\", \"product_price\":\"10000\", \"product_category\":\"phone\" } ] Below are the Merchant signature settings from the back-office: SHA Request Phrase: PASS SHA-Type: SHA-256 The string to hash should be prepared for the above request is the following \u201cstep 4 of the Signature Pattern\u201d: To calculate the products parameter in the signature: products = [ {\"product_name\":\"iphone\", \"product_price\":\"10000\", \"product_category\":\"phone\" } ] It should look like as shown below: products=[{product_name=iphone, product_price=10000, product_category=phone}] PASSaccess_code=zx0IPmPy5jp1vAz8Kpg7amount=10000currency=EGPlanguage=enmerchant_identifier=Cy cHZxVjmerchant_order_id=Valu123merchant_reference=XYZ9239- yu898payment_option=VALUphone_number=00008557694products=[{product_name=iphone, product_price=10000, product_category=phone}]service_command=OTP_GENERATEPASS After applying step 5 of the Signature pattern, the result will be as follows: Signature = c9a58adbe7fa5311b79a6362f28aa3e02c10cde5a37f10456e1caa6bd06a6951 Transaction\u2019s Response Codes Please visit the link to check the transaction codes and messages related to ValU service. Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Lend"},{"location":"lendservice/#how-it-works","text":"Customer verification Your site sends request to verify whether the customer is a ValU registered customer or not. The customer's phone number is verified against the ValU registered user database. Based on the customer's phone number ValU's system validates whether customer is registered on its platform or not. OTP Generation If your customer is already registered on the ValU' platform then on the checkout page the customer will provide the phone number. The ValU will generate OTP code and send it to the customer via SMS. Verify OTP Once the customer fills the OTP in the checkout page it is verified. Purchase Once OTP is verified the customer can proceed to purchase the selected items. Your site should be integrated with ValU consumer finance Your customer should be registered with ValU's platform in order to have this benefit of installments","title":"How it works?"},{"location":"lendservice/#endpoints","text":"Use the below Endpoints for testing your integration and going live. Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi Live POST https://paymentservices.payfort.com/FortAPI/paymentApi Parameter Submission Type For All Request Submission REST POST request using JSON is sent for OTP generation request submission.","title":"Endpoints"},{"location":"lendservice/#customer-verification","text":"The very first step in the ValU integration is the customer verification. Customer Verification Request Sample Here is the sample JSON based customer verification request that you need to send to PayFort { \"service_command\":\"CUSTOMER_VERIFY\", \"merchant_reference\":\"XYZ9239-yu898\", \"merchant_identifier\":\"CycHZxVj\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"language\":\"en\", \"payment_option\":\"VALU\", \"phone_number\":\"00008557694\", \"signature\":\"54efbd76bd644e9ef237c39137bf5d2304dc1bfdf6f6302065b448f2456a07a7\" } Customer Verification Response Sample Here is the sample of JSON based customer verification response that you will receive from PayFort { \"response_code\":\"90000\", \"response_message\":\"Success\", \"service_command\":\"CUSTOMER_VERIFY\", \"signature\":\"27c1303138f8718e56f311d1b3d823b5a644e6bcd4fac43d5454955b13b5b337\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ2939-yu898\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"payment_option\":\"VALU\", \"language\":\"en\", \"phone_number\":\"00008557694\", \"status\":\"90\" }","title":"Customer Verification"},{"location":"lendservice/#otp-generation","text":"For the customer already registered on the ValU platform, they need to provide their phone number on your site's check out page. After phone number is added, OTP would be generated by the ValU platform and the same would be provided to your customer through SMS. Use the Endpoints provided on this page to test your OTP generation process and also to go live. OTP Generation Request Sample Here is the sample JSON based OTP generation request sample. Request sent to PayFort must also include the product parameters as shown here. { \"merchant_reference\":\"XYZ9239-yu898\", \"merchant_identifier\":\"CycHZxVj\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"signature\":\"fb1a8978eff0df5700007f3a0ca7964f61eb4b3c17de0a43029851b84687699d\", \"service_command\":\"OTP_GENERATE\", \"language\":\"en\", \"payment_option\":\"VALU\", \"phone_number\":\"00008557694\", \"merchant_order_id\":\"Valu123\", \"amount\":\"10000\", \"currency\":\"EGP\", \"products\":[ { \"product_name\":\"iphone\", \"product_price\":\"10000\", \"product_category\":\"phone\" } ] } OTP Generation Response Sample Here is the sample JSON based OTP generation response sample { \"transaction_id\":\"240719641384\", \"amount\":\"10000\", \"currency\":\"EGP\", \"response_code\":\"88000\", \"merchant_order_id\":\"Valu123\", \"signature\":\"2304c9a011630db5286712903e7877a53aa96aa7cfe2151fd7c6cc350ec38c12\", \"merchant_identifier\":\"CycHZxVj\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"payment_option\":\"VALU\", \"language\":\"en\", \"response_message\":\"Success\", \"service_command\":\"OTP_GENERATE\", \"merchant_reference\":\"XYZ2939-yu898\", \"total_down_payment\":\"1200\", \"phone_number\":\"00008557694\", \"otp_status\":\"1\", \"tenure\":\"6-9-12-15-18\", \"status\":\"88\" }","title":"OTP Generation"},{"location":"lendservice/#otp-verification","text":"Once the customer receives OTP through SMS, they will provide the same on your site's checkout page. This OTP is then verified against the ValU server Use the Endpoints provided on this page to test your OTP verification process and also to go live. OTP Verification Request Sample Inorder to send OTP verification request you can refer to the sample as shown below { \"signature\":\"d5c9c93166c34efbf72c71c9f780ce7bc336f68f9d35d63dba014175fd44af58\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239-yu898\", \"merchant_order_id\":\"Valu123\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"language\":\"en\", \"amount\":\"1000\", \"currency\":\"EGP\", \"payment_option\":\"VALU\", \"service_command\":\"OTP_VERIFY\", \"total_downpayment\":1200, \"otp\":\"123456\", \"phone_number\":\"00008557694\" } OTP Verification Response Sample The sample response sent by PayFort will also contain tenure of the EMI. Here is the tenure sample Tenure Sample \"tenure\":{ \"TENURE_VM\":[ { \"EMI\":\"2118\", \"TENURE\":\"3\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"1105\", \"TENURE\":\"6\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"768\", \"TENURE\":\"9\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"600\", \"TENURE\":\"12\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"500\", \"TENURE\":\"15\", \"InterestRate\":\"1.76\" }, ] }, Here is the sample JSON response sent from PayFORT server. { \"amount\":\"10000\", \"currency\":\"EGP\", \"response_code\":\"92182\", \"merchant_order_id\":\"Valu123\", \"signature\":\"4bfc2476c6e42b6c1fc9539dbf5092bbc8a2493820816800f98f110c4453b5cd\", \"merchant_identifier\":\"CycHZxVj\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"payment_option\":\"VALU\", \"language\":\"en\", \"total_downpayment\":\"0\", \"service_command\":\"OTP_VERIFY\", \"response_message\":\"OTP verification success\", \"merchant_reference\":\"XYZ2939-yu898\", \"phone_number\":\"00008557694\", \"otp_status\":\"1\", \"tenure\":{ \"TENURE_VM\":[ { \"EMI\":\"2118\", \"TENURE\":\"3\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"1105\", \"TENURE\":\"6\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"768\", \"TENURE\":\"9\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"600\", \"TENURE\":\"12\", \"InterestRate\":\"1.76\" }, { \"EMI\":\"500\", \"TENURE\":\"15\", \"InterestRate\":\"1.76\" }, ] }, \"status\":\"92\" }","title":"OTP Verification"},{"location":"lendservice/#purchase","text":"Once the OTP has been verified the customer can purchase the selected product. Your site will forward the purchase request to PayFort. Use the Endpoints provided on this page to test your Purchase process and also to go live. Purchase Request Sample Here is the JSON sample of purchase request sent to PayFort. { \"merchant_reference\":\"XYZ9239-yu898\", \"merchant_identifier\":\"CycHZxVj\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"signature\":\"b574e362cc08d7504d8277e71400132f06064ee1537cd570717569b583dec0b5\", \"command\":\"PURCHASE\", \"language\":\"en\", \"payment_option\":\"VALU\", \"phone_number\":\"00008557694\", \"amount\":\"10000\", \"currency\":\"EGP\", \"customer_email\":\"customer@domain.com\", \"customer_code\":\"12348557694\", \"merchant_order_id\":\"Valu123\", \"transaction_id\":\"050819724899\", \"otp\":\"123456\", \"tenure\":\"6\", \"total_down_payment\":\"1200\", \"purchase_description\":\"Test\" } Purchase Response Sample Here is the response sample sent from PayFort { \"amount\":\"10000\", \"response_code\":\"14000\", \"signature\":\"afac5bd50250743cbd87ce208b1aabcae1080b9060bdb7212cf2c36e201cd6d0\", \"merchant_identifier\":\"CycHZxVj\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"payment_option\":\"VALU\", \"customer_ip\":\"192.178.1.10\", \"language\":\"en\", \"eci\":\"ECOMMERCE\", \"fort_id\":\"149295435400084008\", \"command\":\"PURCHASE\", \"response_message\":\"Success\", \"merchant_reference\":\"XYZ2939-yu898\", \"customer_email\":\"customer@domain.com\", \"currency\":\"EGP\", \"phone_number\":\"00008557694\", \"status\":\"14\" }","title":"Purchase"},{"location":"lendservice/#signature","text":"SHA algorithm generates a digital signature which is used to authenticate the sender and receiver of the message. It allows the receiver to verify the Integrity of the message. In this case your site acts as sender while PayFort server acts as a receiver thus by passing the signature parameter it is ensured that high level of security is in place when the message is sent and received. It also ensures that all the messages sent are encrypted using the signature. Below table describes the signature details Signature Description Name Values Description SHA Type * SHA-256 * SHA-512 The Secure Hash Algorithm is a family of cryptographic hash functions published by the National Institute of Standards and Technology (NIST) as a U.S. Federal Information Processing Standard (FIPS), including: SHA-0, SHA-1, SHA-2, SHA-3. SHA Request Phrase Dynamic value defined by the Merchant This value is used when the Merchant generates the request signature. SHA Response Phrase Dynamic value defined by the Merchant This value is used by our system to generate the response signature for the Merchant's Request. Signature Pattern The below steps describe the signature pattern: Sort all PayFort requests parameters (both mandatory and optional) in an ascending alphabetical order based on the parameters names. Concatenate the parameter name with the value separated by '=' (param_name=param_value). Concatenate all the parameters directly without any separator. (param_name1=param_value1param_name2=param_value2). Add the Merchant's Passphrase at the beginning and end of the parameters string. (REQUESTPHRASEparam_name1=param_value1param_name2=param_value2REQUESTP HRASE). Use the SHA function to generate the SHA value of the resulted string depending on the type of SHA selected by the Merchant. The following is an example for the Customer Verification - Request signature calculations : Assume you have the below parameters included in the request of customer verification: service_command = CUSTOMER_VERIFY merchant_identifier = CycHZxVj merchant_reference = XYZ9239-yu898 access_code = zx0IPmPy5jp1vAz8Kpg7 language = en payment_option = VALU phone_number = 00008557694 Below are the Merchant signature settings from the back-office: SHA Request Phrase: PASS SHA-Type: SHA-256 The string to hash should be prepared for the above request is the following \u201cstep 4 of the Signature Pattern\u201d: PASSaccess_code=zx0IPmPy5jp1vAz8Kpg7language=enmerchant_identifier=CycHZxVjmerchant_reference=X YZ9239- yu898payment_option=VALUphone_number=00008557694service_command=CUSTOMER_VERIFYPASS After applying step 5 of the Signature pattern, the result will be as follows: Signature = f0c49b9dae92b3da04d82689f698189ac65f62596280cd253cb24130ce5a1ed6 The following is an example for the OTP Generation \u2013 Request signature calculations: Assume you have the below parameters included in the request of generate OTP: service_command = OTP_GENERATE access_code = zx0IPmPy5jp1vAz8Kpg7 merchant_identifier = CycHZxVj merchant_reference = XYZ9239-yu898 payment_option = VALU phone_number = 00008557694 merchant_order_id = Valu123 amount = 10000 currency = EGP products = [ { \"product_name\":\"iphone\", \"product_price\":\"10000\", \"product_category\":\"phone\" } ] Below are the Merchant signature settings from the back-office: SHA Request Phrase: PASS SHA-Type: SHA-256 The string to hash should be prepared for the above request is the following \u201cstep 4 of the Signature Pattern\u201d: To calculate the products parameter in the signature: products = [ {\"product_name\":\"iphone\", \"product_price\":\"10000\", \"product_category\":\"phone\" } ] It should look like as shown below: products=[{product_name=iphone, product_price=10000, product_category=phone}] PASSaccess_code=zx0IPmPy5jp1vAz8Kpg7amount=10000currency=EGPlanguage=enmerchant_identifier=Cy cHZxVjmerchant_order_id=Valu123merchant_reference=XYZ9239- yu898payment_option=VALUphone_number=00008557694products=[{product_name=iphone, product_price=10000, product_category=phone}]service_command=OTP_GENERATEPASS After applying step 5 of the Signature pattern, the result will be as follows: Signature = c9a58adbe7fa5311b79a6362f28aa3e02c10cde5a37f10456e1caa6bd06a6951 Transaction\u2019s Response Codes Please visit the link to check the transaction codes and messages related to ValU service.","title":"Signature"},{"location":"lendservice/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"lendservice/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"maintenance/","text":"Maintenance Operations can be performed only on the authorized amount. Once the redirection process has been successfully completed and the amount has been authorized then the maintenace operation is carried out. Capture Payment Once the purchase has been authorized in the redirection process, you can capture the payment. Visit Capture Payment section for more details. Capture a Payment Void Authorization If a payment has been authorized, the same can be voided through void authorization. Visit Void Authorization section for more details. Void an Authorization Refund Payment If the payment has been captured the same can be refunded using the refund payment process. Visit Refund Payment section for more details. Refund a Payment Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"What is Maintenance?"},{"location":"maintenance/#capture-payment","text":"Once the purchase has been authorized in the redirection process, you can capture the payment. Visit Capture Payment section for more details. Capture a Payment","title":"Capture Payment"},{"location":"maintenance/#void-authorization","text":"If a payment has been authorized, the same can be voided through void authorization. Visit Void Authorization section for more details. Void an Authorization","title":"Void Authorization"},{"location":"maintenance/#refund-payment","text":"If the payment has been captured the same can be refunded using the refund payment process. Visit Refund Payment section for more details. Refund a Payment","title":"Refund Payment"},{"location":"maintenance/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"maintenance/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"maintenanceparameters/","text":"Maintenance Operations Parameters Capture Payment Request Parameters command (String, mandatory) Maximum Length Possible/ expected values Description 20 CAPTURE A command for payFORT server to understand. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. fort_id (numeric, optional) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. You can send \u201cmerchant_reference\u201d and/ or \u201cfort_id\u201d in the CAPTURE request. Capture Payment Response command (String) Maximum Length Possible/ expected values Description 20 CAPTURE A command for payFORT server to understand. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature order_description (Alphanumeric) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. fort_id (numeric) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. response_message (alphanumeric) Maximum Length Possible/ expected values Description 150 Please refer to section messages The message description of the response code; it returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/ expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Please refer to section Transactions Response Codes for more details about operation\u2019s statuses Void Payment Request Parameters command (String, mandatory) Maximum Length Possible/ expected values Description 20 VOID_AUTHORIZATION A command for payFORT server to understand. fort_id (numeric, optional) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. You can send \u201cmerchant_reference\u201d and/ or \u201cfort_id\u201d in the VOID_AUTHORIZATION request. Void Payment Response command (String) Maximum Length Possible/ expected values Description 20 VOID_AUTHORIZATION A command for payFORT server to understand. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature order_description (Alphanumeric) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. fort_id (numeric) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. response_message (alphanumeric) Maximum Length Possible/ expected values Description 150 Please refer to section messages The message description of the response code; it returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/ expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Please refer to section Transactions Response Codes for more details about operation\u2019s statuses Refund Payment Request Parameters command (String, mandatory) Maximum Length Possible/ expected values Description 20 REFUND A command for payFORT server to understand. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. fort_id (numeric, optional) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. maintenance_reference (alphanumeric, optional) Maximum Length Example Special Characters Description 200 customer123 - _ . The Refund\u2019s unique order number. * You will be able to retry on the refund request using the same maintenance reference if the refund transaction was declined. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. You can send \u201cmerchant_reference\u201d and/ or \u201cfort_id\u201d in the REFUND request. Refund Payment Response command (String) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature order_description (Alphanumeric) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. maintenance_reference (alphanumeric) Maximum Length Example Description 200 customer123 The Refund\u2019s unique order number. * You will be able to retry on the refund request using the same maintenance reference if the refund transaction was declined. fort_id (numeric) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. response_message (alphanumeric) Maximum Length Possible/ expected values Description 150 Please refer to section messages The message description of the response code; it returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/ expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Please refer to section Transactions Response Codes for more details about operation\u2019s statuses","title":"Maintenance Parameters"},{"location":"maintenanceparameters/#maintenance-operations-parameters","text":"","title":"Maintenance Operations Parameters"},{"location":"maintenanceparameters/#capture-payment-request-parameters","text":"command (String, mandatory) Maximum Length Possible/ expected values Description 20 CAPTURE A command for payFORT server to understand. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. fort_id (numeric, optional) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. You can send \u201cmerchant_reference\u201d and/ or \u201cfort_id\u201d in the CAPTURE request.","title":"Capture Payment  Request Parameters"},{"location":"maintenanceparameters/#capture-payment-response","text":"command (String) Maximum Length Possible/ expected values Description 20 CAPTURE A command for payFORT server to understand. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature order_description (Alphanumeric) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. fort_id (numeric) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. response_message (alphanumeric) Maximum Length Possible/ expected values Description 150 Please refer to section messages The message description of the response code; it returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/ expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Please refer to section Transactions Response Codes for more details about operation\u2019s statuses","title":"Capture Payment Response"},{"location":"maintenanceparameters/#void-payment-request-parameters","text":"command (String, mandatory) Maximum Length Possible/ expected values Description 20 VOID_AUTHORIZATION A command for payFORT server to understand. fort_id (numeric, optional) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. You can send \u201cmerchant_reference\u201d and/ or \u201cfort_id\u201d in the VOID_AUTHORIZATION request.","title":"Void Payment  Request Parameters"},{"location":"maintenanceparameters/#void-payment-response","text":"command (String) Maximum Length Possible/ expected values Description 20 VOID_AUTHORIZATION A command for payFORT server to understand. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature order_description (Alphanumeric) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. fort_id (numeric) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. response_message (alphanumeric) Maximum Length Possible/ expected values Description 150 Please refer to section messages The message description of the response code; it returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/ expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Please refer to section Transactions Response Codes for more details about operation\u2019s statuses","title":"Void Payment Response"},{"location":"maintenanceparameters/#refund-payment-request-parameters","text":"command (String, mandatory) Maximum Length Possible/ expected values Description 20 REFUND A command for payFORT server to understand. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. fort_id (numeric, optional) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. maintenance_reference (alphanumeric, optional) Maximum Length Example Special Characters Description 200 customer123 - _ . The Refund\u2019s unique order number. * You will be able to retry on the refund request using the same maintenance reference if the refund transaction was declined. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. You can send \u201cmerchant_reference\u201d and/ or \u201cfort_id\u201d in the REFUND request.","title":"Refund Payment Request Parameters"},{"location":"maintenanceparameters/#refund-payment-response","text":"command (String) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature order_description (Alphanumeric) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. maintenance_reference (alphanumeric) Maximum Length Example Description 200 customer123 The Refund\u2019s unique order number. * You will be able to retry on the refund request using the same maintenance reference if the refund transaction was declined. fort_id (numeric) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. response_message (alphanumeric) Maximum Length Possible/ expected values Description 150 Please refer to section messages The message description of the response code; it returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/ expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Please refer to section Transactions Response Codes for more details about operation\u2019s statuses","title":"Refund Payment Response"},{"location":"merchantpage1/","text":"What is Merchant Page Integration? You can setup payment form and start accepting payments within few minutes with the help of PayFORT Merchant Page. Merchant Page Integration uses PayFORT iFrame which can be easily integrated with your payment form. It takes the look and feel of your merchant site and accepts payments from major credit cards including MADA, VISA, Mastercard, etc. You develop your site in any technology of your choice and integrate the iFrame in your html based checkout page. Figure 1 - Using PayFORT iFrame for web How it Works? Your checkout page will display an integrated PayFORT iFrame to your Customer that has the same look and feel as that of your website. Customer fills his/her payment details in the checkout page. PayFORT server receives the payment details and validates the same. PayFORT then sends a confirmation to your checkout page to complete the transaction. You have the option to redirect the Customer directly to the checkout page. Integration Flow Figure 2 : Integration Flow using iFrame Here is the description of the PayFORT iFrame Integration workflow : The customer begins the checkout process on your website. The payment page with integrated iFrame is displayed to the customer on the your site. The Customer then enters the card\u2019s details on the payment page. PayFORT checks the card details. PayFORT creates a token for the Customer transaction and sends it to the payment page. The Payment page then sends a JSON request along with the token to PayFORT. In case your page receives from PayFORT server a 3-D Secure URL 3ds_url , and response indicating that a 3ds check is required then: Your payment page redirects the Customer to the ACS to check his card enrollment. The Customer enters authentication data on the ACS platform. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFORT. PayFORT completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFORT sends the payment results to your site. In case of 3ds secure check, PayFort returns status 20: On hold and message 064: 3-D Secure check requested message.For example, PayFort is waiting for your payment page to authenticate the Customer. If you include the token_name parameter in the request and this Token already has a successful Authorization, then the card number (masked) and expiry date will be displayed in their allocated fields. If the Token is sent by you, it will be generated with the same name as sent by your page. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. For more details on Tokens and Tokenization process visit the link Give It a Try Use one of our test cards and corresponding CVV to try iFrames out for yourself. You can use any expiry date ( mm/yy ), as long as it's in the future. Endpoints An endpoint is one end of a communication channel and your merchant site will communicate with the PayFORT resources using Endpoints. For PayFORT APIs , an endpoint includes a URL of PayFORT server or service. Sandbox POST https://sbcheckout.payfort.com/FortAPI/paymentPage Live POST https://checkout.payfort.com/FortAPI/paymentPage Integrate iFrames to Payment Page If you are planning to use PayFORT iFrames then you can use the endpoints for testing and and also for going live. You can use programming language of your choice or what your site uses and can use the iFrame in your html based check out page. Before you start Make sure you have your access_code . Refer to Figure 3 . You can find it in the backoffice , under Integration Settings > Security Settings > Access Code . If you don't have an account with us yet, you can create a test account by visiting the link . You can also get started with a live account by visiting this link . Once you signup you will get the access to the Backoffice. You can check out more about navigating through backoffice by visiting this link . Figure 3 : Access Code Generation The Payment Page Template available in the backoffice provides you the feature to create a payment processing page using PayFort iFrame. Refer to the Figure 4 Figure 4 : Use Payment Settings to create a payment form Sample iFrame code snippet The following sample code snippet is the start of the payment process and allows you to tokenize a customer's sensitive card information using iFrames. <iframe style=\"border:5px dotted red\" name=\"myframe\" src = \"\" width=\"400\" height=\"600\"> </iframe> <form action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\" method=\"post\" id=\"\" target=\"myframe\"> <INPUT type=\"hidden\" NAME=\"service_command\" value=\"TOKENIZATION\"> The above sample code is an HTML based form that will post a request to PayFORT server. The request parameters are also added in the input tag of the code. However, If you are not familiar with HTML tags and forms then you can checkout this site . The form consists of iframe tag which specifies the style, name of the style (you can give any name to your style), source code location, width and height of the iframe. All these are customizable values which you can provide. The form action tag consists of the endpoints . This will come handy whenever submit action is performed on the page. Once the form is submitted the parameters provided in the form would be sent to the PayFORT server and Endpoints will serve as communication link between your page and PayFORT server. Request Parameters The parameters are mandatory and are required by PayFORT server to validate, authenticate and provide the tokens for processing of payment Please refer to the section Merchant Page Parameters for request parameters. Response Parameters The PayFORT server will return the response in JSON format. Here is the sample response along with the parameters returned by PayFORT server. [{ \"service_command\": \"TOKENIZATION\", \"access_code\": \"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\": \"CycHZxVj\", \"merchant_reference\": \"XYZ9239-yu898\", \"language\": \"en\", \"signature\": \"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"token_name\": \"Op9Vmp\", \"expiry_date\": \"2105\", \"card_number\": \"400555*****0001\", \"response_message\": \"012\", \"response_code\": \"11012\", \"status\": \"11\", \"card_bin\": \"478773\", \"return_url\": \"http://www.merchant.com\" }] Please refer to the section Merchant Page Parameters for reponse parameters. Go to Full API Check out our full API by visiting this link For more details on Tokens and Tokenization process visit the link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Merchant Page 1"},{"location":"merchantpage1/#what-is-merchant-page-integration","text":"You can setup payment form and start accepting payments within few minutes with the help of PayFORT Merchant Page. Merchant Page Integration uses PayFORT iFrame which can be easily integrated with your payment form. It takes the look and feel of your merchant site and accepts payments from major credit cards including MADA, VISA, Mastercard, etc. You develop your site in any technology of your choice and integrate the iFrame in your html based checkout page. Figure 1 - Using PayFORT iFrame for web","title":"What is Merchant Page Integration?"},{"location":"merchantpage1/#how-it-works","text":"Your checkout page will display an integrated PayFORT iFrame to your Customer that has the same look and feel as that of your website. Customer fills his/her payment details in the checkout page. PayFORT server receives the payment details and validates the same. PayFORT then sends a confirmation to your checkout page to complete the transaction. You have the option to redirect the Customer directly to the checkout page.","title":"How it Works?"},{"location":"merchantpage1/#integration-flow","text":"Figure 2 : Integration Flow using iFrame Here is the description of the PayFORT iFrame Integration workflow : The customer begins the checkout process on your website. The payment page with integrated iFrame is displayed to the customer on the your site. The Customer then enters the card\u2019s details on the payment page. PayFORT checks the card details. PayFORT creates a token for the Customer transaction and sends it to the payment page. The Payment page then sends a JSON request along with the token to PayFORT. In case your page receives from PayFORT server a 3-D Secure URL 3ds_url , and response indicating that a 3ds check is required then: Your payment page redirects the Customer to the ACS to check his card enrollment. The Customer enters authentication data on the ACS platform. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFORT. PayFORT completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFORT sends the payment results to your site. In case of 3ds secure check, PayFort returns status 20: On hold and message 064: 3-D Secure check requested message.For example, PayFort is waiting for your payment page to authenticate the Customer. If you include the token_name parameter in the request and this Token already has a successful Authorization, then the card number (masked) and expiry date will be displayed in their allocated fields. If the Token is sent by you, it will be generated with the same name as sent by your page. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. For more details on Tokens and Tokenization process visit the link","title":"Integration Flow"},{"location":"merchantpage1/#give-it-a-try","text":"Use one of our test cards and corresponding CVV to try iFrames out for yourself. You can use any expiry date ( mm/yy ), as long as it's in the future.","title":"Give It a Try"},{"location":"merchantpage1/#endpoints","text":"An endpoint is one end of a communication channel and your merchant site will communicate with the PayFORT resources using Endpoints. For PayFORT APIs , an endpoint includes a URL of PayFORT server or service. Sandbox POST https://sbcheckout.payfort.com/FortAPI/paymentPage Live POST https://checkout.payfort.com/FortAPI/paymentPage","title":"Endpoints"},{"location":"merchantpage1/#integrate-iframes-to-payment-page","text":"If you are planning to use PayFORT iFrames then you can use the endpoints for testing and and also for going live. You can use programming language of your choice or what your site uses and can use the iFrame in your html based check out page. Before you start Make sure you have your access_code . Refer to Figure 3 . You can find it in the backoffice , under Integration Settings > Security Settings > Access Code . If you don't have an account with us yet, you can create a test account by visiting the link . You can also get started with a live account by visiting this link . Once you signup you will get the access to the Backoffice. You can check out more about navigating through backoffice by visiting this link . Figure 3 : Access Code Generation The Payment Page Template available in the backoffice provides you the feature to create a payment processing page using PayFort iFrame. Refer to the Figure 4 Figure 4 : Use Payment Settings to create a payment form Sample iFrame code snippet The following sample code snippet is the start of the payment process and allows you to tokenize a customer's sensitive card information using iFrames. <iframe style=\"border:5px dotted red\" name=\"myframe\" src = \"\" width=\"400\" height=\"600\"> </iframe> <form action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\" method=\"post\" id=\"\" target=\"myframe\"> <INPUT type=\"hidden\" NAME=\"service_command\" value=\"TOKENIZATION\"> The above sample code is an HTML based form that will post a request to PayFORT server. The request parameters are also added in the input tag of the code. However, If you are not familiar with HTML tags and forms then you can checkout this site . The form consists of iframe tag which specifies the style, name of the style (you can give any name to your style), source code location, width and height of the iframe. All these are customizable values which you can provide. The form action tag consists of the endpoints . This will come handy whenever submit action is performed on the page. Once the form is submitted the parameters provided in the form would be sent to the PayFORT server and Endpoints will serve as communication link between your page and PayFORT server.","title":"Integrate iFrames to Payment Page"},{"location":"merchantpage1/#request-parameters","text":"The parameters are mandatory and are required by PayFORT server to validate, authenticate and provide the tokens for processing of payment Please refer to the section Merchant Page Parameters for request parameters.","title":"Request Parameters"},{"location":"merchantpage1/#response-parameters","text":"The PayFORT server will return the response in JSON format. Here is the sample response along with the parameters returned by PayFORT server. [{ \"service_command\": \"TOKENIZATION\", \"access_code\": \"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\": \"CycHZxVj\", \"merchant_reference\": \"XYZ9239-yu898\", \"language\": \"en\", \"signature\": \"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"token_name\": \"Op9Vmp\", \"expiry_date\": \"2105\", \"card_number\": \"400555*****0001\", \"response_message\": \"012\", \"response_code\": \"11012\", \"status\": \"11\", \"card_bin\": \"478773\", \"return_url\": \"http://www.merchant.com\" }] Please refer to the section Merchant Page Parameters for reponse parameters.","title":"Response Parameters"},{"location":"merchantpage1/#go-to-full-api","text":"Check out our full API by visiting this link For more details on Tokens and Tokenization process visit the link","title":"Go to Full API"},{"location":"merchantpage1/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"merchantpage2/","text":"What is Merchant Page 2 integration? You can also build your own custom payment form without using default payment template provided by PayFoRT and collect customer's payment details and send it to PayFORT server for further processing. Figure 1 How it works? You develop your own custom payment details form that collects the card details (credit card number, expiry date, CVV). Customer fills his/her payment details in the custom payment checkout page. PayFORT server receives the payment details and validates the same. PayFORT then sends a confirmation to your checkout page to complete the transaction which includes Token. You use the token to complete the Authorization or Purchase operation . You should develop a form that does not send data to your website but directly submits the form to PayFORT. Integration Flow Figure 2 Here is the Integration flow description The customer begins the checkout process on your website. Your website displays the custom payment form to collect the card\u2019s details. Then the Customer enters the card\u2019s details on the payment page. PayFORT checks the card details. PayFORT creates a token for the Customer transaction and sends it to the payment page. The merchant site sends a payment request along with the Token to PayFORT In case your page receives from PayFORT server a 3-D Secure URL 3ds_url , and response indicating that a 3ds check is required then: Your payment page redirects the Customer to the ACS to check his card enrollment. The Customer enters authentication data on the ACS platform. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFORT. PayFORT completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFORT sends the payment results to your site. In case of 3ds secure check, PayFort returns status 20: On hold and message 064: 3-D Secure check requested message.For example, PayFort is waiting for your payment page to authenticate the Customer. If the Token is sent by the payment page, it will be generated with the same name sent by the website. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. For more details on Tokens and Tokenization process visit the link Give It a Try Use one of our test cards and corresponding CVV to try out for yourself. You can use any expiry date ( mm/yy ), as long as it's in the future. Endpoints Endpoints for Merchant Page is also applicable for Merchant 2 Integration. You can check the Endpoints by visiting this link Before you start Make sure you have your access_code . Refer figure 3. You can find it in the backoffice , under Integration Settings Security Settings > Access Code . If you don't have an account with us yet, you can create a test account by visiting the link . You can also get started with an active account by visiting this link Figure 3 : Uploading custom template The Payment Page Template available in the backoffice provides you the feature to create a custom payment processing page. Refer to the figure 4. Once you upload your custom payment page our support team will validate the same. Figure 4: Generating Access Code. Sample Code The following code snippet shown here is an example of the start of the payment process. You can refer to this example, replacing the supplied acccess_code with your own. The card token will be posted via the URL specified in the form's action attribute. <form method=\"post\" action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\" id=form1 name=form1> <input type=\"hidden\" NAME=\"service_command\" value=\"TOKENIZATION\"> <input type=\"submit\" value=\"\" id=\"submit2\" name=\"\"> The above code snippet is an HTML based form that will post a request to PayFORT server. The request parameters are also added in the input tag of the code. However, If you are not familiar with HTML tags and forms then you can checkout this site . The form action tag consists of the endpoints. This will come handy whenever submit action is performed on the page. Once the form is submitted the parameters provided in the form would be sent to the PayFORT server and Endpoints will serve as communication link between your page and PayFORT server. Request Parameters The parameters are mandatory and are required by PayFORT server to validate, authenticate and provide the tokens for processing of payment Please refer to the section Merchant Page 2 Request Parameters for request parameters. Response Parameters The PayFORT server will return the response in JSON format. Here is the sample response along with the parameters returned by PayFORT server. [{ \"service_command\": \"TOKENIZATION\", \"access_code\": \"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\": \"CycHZxVj\", \"merchant_reference\": \"XYZ9239-yu898\", \"language\": \"en\", \"signature\": \"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"token_name\": \"Op9Vmp\", \"expiry_date\": \"2105\", \"card_number\": \"400555*****0001\", \"response_message\": \"012\", \"response_code\": \"11012\", \"status\": \"11\", \"card_bin\": \"478773\", \"card_holder_name\": \"John Smith\", \"remember_me\": \"No\", \"return_url\": \"http://www.merchant.com\" }] Please refer to the section Merchant Page 2 Response for reponse parameters. Payment Page Customization When you begin designing your own custom payment page you will also need to style your custom payment page so that it is in line with the look and feel of your website. Inorder to style your custom payment page you will require CSS files and within those files you need use the css classes. If you are new to HTML and CSS don't worry you can visit this link to learn about HTML/CSS. This is a list with all customizable CSS classes on the basic payment page: The Wrapper class It is responsible for the total width of the form container and the background. The Container class It is responsible for the form\u2019s shape and width. The Popover class It is responsible for the error messages. The Half-container class It is used to merge the date and CVV fields into one block if needed. The Input class It is the container of each single input field. The Pay class It is responsible for the submit button. The Visa/ MasterCard classes It is used to change the color of the Visa/ MasterCard colors. You can always create multiple theme files that will enable you to switch freely and easily between them when necessary.Theme files offer you the flexibility to change the look and feel of your page. Theme files can be uploaded from the back-office using the Payment Page template screen. Go to Full API Check out our full API by visiting this link To learn more about Tokens and Tokenization process visit this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Merchant Page 2"},{"location":"merchantpage2/#what-is-merchant-page-2-integration","text":"You can also build your own custom payment form without using default payment template provided by PayFoRT and collect customer's payment details and send it to PayFORT server for further processing. Figure 1","title":"What is Merchant Page 2 integration?"},{"location":"merchantpage2/#how-it-works","text":"You develop your own custom payment details form that collects the card details (credit card number, expiry date, CVV). Customer fills his/her payment details in the custom payment checkout page. PayFORT server receives the payment details and validates the same. PayFORT then sends a confirmation to your checkout page to complete the transaction which includes Token. You use the token to complete the Authorization or Purchase operation . You should develop a form that does not send data to your website but directly submits the form to PayFORT.","title":"How it works?"},{"location":"merchantpage2/#integration-flow","text":"Figure 2 Here is the Integration flow description The customer begins the checkout process on your website. Your website displays the custom payment form to collect the card\u2019s details. Then the Customer enters the card\u2019s details on the payment page. PayFORT checks the card details. PayFORT creates a token for the Customer transaction and sends it to the payment page. The merchant site sends a payment request along with the Token to PayFORT In case your page receives from PayFORT server a 3-D Secure URL 3ds_url , and response indicating that a 3ds check is required then: Your payment page redirects the Customer to the ACS to check his card enrollment. The Customer enters authentication data on the ACS platform. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFORT. PayFORT completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFORT sends the payment results to your site. In case of 3ds secure check, PayFort returns status 20: On hold and message 064: 3-D Secure check requested message.For example, PayFort is waiting for your payment page to authenticate the Customer. If the Token is sent by the payment page, it will be generated with the same name sent by the website. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. For more details on Tokens and Tokenization process visit the link","title":"Integration Flow"},{"location":"merchantpage2/#give-it-a-try","text":"Use one of our test cards and corresponding CVV to try out for yourself. You can use any expiry date ( mm/yy ), as long as it's in the future.","title":"Give It a Try"},{"location":"merchantpage2/#endpoints","text":"Endpoints for Merchant Page is also applicable for Merchant 2 Integration. You can check the Endpoints by visiting this link","title":"Endpoints"},{"location":"merchantpage2/#before-you-start","text":"Make sure you have your access_code . Refer figure 3. You can find it in the backoffice , under Integration Settings Security Settings > Access Code . If you don't have an account with us yet, you can create a test account by visiting the link . You can also get started with an active account by visiting this link Figure 3 : Uploading custom template The Payment Page Template available in the backoffice provides you the feature to create a custom payment processing page. Refer to the figure 4. Once you upload your custom payment page our support team will validate the same. Figure 4: Generating Access Code.","title":"Before you start"},{"location":"merchantpage2/#sample-code","text":"The following code snippet shown here is an example of the start of the payment process. You can refer to this example, replacing the supplied acccess_code with your own. The card token will be posted via the URL specified in the form's action attribute. <form method=\"post\" action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\" id=form1 name=form1> <input type=\"hidden\" NAME=\"service_command\" value=\"TOKENIZATION\"> <input type=\"submit\" value=\"\" id=\"submit2\" name=\"\"> The above code snippet is an HTML based form that will post a request to PayFORT server. The request parameters are also added in the input tag of the code. However, If you are not familiar with HTML tags and forms then you can checkout this site . The form action tag consists of the endpoints. This will come handy whenever submit action is performed on the page. Once the form is submitted the parameters provided in the form would be sent to the PayFORT server and Endpoints will serve as communication link between your page and PayFORT server.","title":"Sample Code"},{"location":"merchantpage2/#request-parameters","text":"The parameters are mandatory and are required by PayFORT server to validate, authenticate and provide the tokens for processing of payment Please refer to the section Merchant Page 2 Request Parameters for request parameters.","title":"Request Parameters"},{"location":"merchantpage2/#response-parameters","text":"The PayFORT server will return the response in JSON format. Here is the sample response along with the parameters returned by PayFORT server. [{ \"service_command\": \"TOKENIZATION\", \"access_code\": \"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\": \"CycHZxVj\", \"merchant_reference\": \"XYZ9239-yu898\", \"language\": \"en\", \"signature\": \"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"token_name\": \"Op9Vmp\", \"expiry_date\": \"2105\", \"card_number\": \"400555*****0001\", \"response_message\": \"012\", \"response_code\": \"11012\", \"status\": \"11\", \"card_bin\": \"478773\", \"card_holder_name\": \"John Smith\", \"remember_me\": \"No\", \"return_url\": \"http://www.merchant.com\" }] Please refer to the section Merchant Page 2 Response for reponse parameters.","title":"Response Parameters"},{"location":"merchantpage2/#payment-page-customization","text":"When you begin designing your own custom payment page you will also need to style your custom payment page so that it is in line with the look and feel of your website. Inorder to style your custom payment page you will require CSS files and within those files you need use the css classes. If you are new to HTML and CSS don't worry you can visit this link to learn about HTML/CSS. This is a list with all customizable CSS classes on the basic payment page: The Wrapper class It is responsible for the total width of the form container and the background. The Container class It is responsible for the form\u2019s shape and width. The Popover class It is responsible for the error messages. The Half-container class It is used to merge the date and CVV fields into one block if needed. The Input class It is the container of each single input field. The Pay class It is responsible for the submit button. The Visa/ MasterCard classes It is used to change the color of the Visa/ MasterCard colors. You can always create multiple theme files that will enable you to switch freely and easily between them when necessary.Theme files offer you the flexibility to change the look and feel of your page. Theme files can be uploaded from the back-office using the Payment Page template screen.","title":"Payment Page Customization"},{"location":"merchantpage2/#go-to-full-api","text":"Check out our full API by visiting this link To learn more about Tokens and Tokenization process visit this link","title":"Go to Full API"},{"location":"merchantpage2/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"merchantpageintegration/","text":"Merchant Page Integration allows you to accept the Customer\u2019s payments in your website by collecting their credit card information using one of the two methods mentioned in this page. PayFort processes the transaction and returns the results back to the Merchants through invisible redirection. Endpoints An endpoint is one end of a communication channel and your merchant site will communicate with the PayFORT resources using Endpoints. For PayFORT APIs , an endpoint includes a URL of PayFORT server or service. Sandbox POST https://sbcheckout.payfort.com/FortAPI/paymentPage Live POST https://checkout.payfort.com/FortAPI/paymentPage Merchant Page Integration There are two ways to integrate Merchant pages Merchant Page 1 Merchant Page 2 What is iFrame for Web? You can setup payment form and start accepting payments within few minutes with the help of iFrame. PayFORT provides easy to use iFrame which can be easily integrated with your payment form. It takes the look and feel of your merchant site and accepts payments from major credit cards including MADA, VISA, Mastercard, etc. You develop your site in any technology of your choice and integrate the iFrame in your html based checkout page. The PayFORT iframe takes the look and feel as that of your website. Figure 1 - Using PayFORT iFrame for web How it Works? Your checkout page will display an integrated PayFORT iFrame to your Customer that has the same look and feel as that of your website. Customer fills his/her payment details in the checkout page. PayFORT server receives the payment details and validates the same. PayFORT then sends a token to your checkout page to complete the transaction. You have the option to redirect the Customer directly to the checkout page. For more details on Tokens and Tokenization process visit the Link Integration Flow Figure 2 : Integration Flow using iFrame Here is the description of the PayFORT iFrame Integration workflow : The customer begins the checkout process on your website. The payment page with integrated iFrame is displayed. The Customer then enters the card\u2019s details on the payment page. PayFORT checks the card details. PayFORT creates a token for the Customer transaction and sends it to the payment page. The Payment page then sends a JSON request along with the token to PayFORT. In case your page receives from PayFORT server a 3-D Secure URL 3ds_url , and response indicating that a 3ds check is required then: Your payment page redirects the Customer to the ACS to check his card enrollment. The Customer enters authentication data on the ACS platform. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFORT. PayFORT completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFORT sends the payment results to your site. In case of 3ds secure check, PayFort returns status 20: On hold and message 064: 3-D Secure check requested message.For example, PayFort is waiting for your payment page to authenticate the Customer. If you include the token_name parameter in the request and this Token already has a successful Authorization, then the card number (masked) and expiry date will be displayed in their allocated fields. If the Token is sent by you, it will be generated with the same name as sent by your page. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. For more details on Tokens and Tokenization process visit the Link Integrate iFrames to Payment Page If you are planning to use PayFORT iFrames then you can use the endpoints Endpoints for testing and and also for going live. You can use programming language of your choice or what your site uses and can use the iFrame in your html based check out page. Before you start Make sure you have your access_code . Refer to Figure 3 . You can find it in the backoffice , under Integration Settings > Security Settings > Access Code . If you don't have an account with us yet, you can create a test account by visiting the Link . You can also get started with an active account by visiting this link . Once you signup you will get the access to the Backoffice. You can check out more about navigating through backoffice by visiting this link Figure 3 : Access Code Generation The Payment Page Template available in the backoffice provides you the feature to create a payment processing page using PayFort iFrame. Refer to the Figure 4 Figure 4 : Use Payment Settings to create a payment form Sample iFrame code snippet The following sample code snippet is the start of the payment process and allows you to tokenize a customer's sensitive card information using iFrames. <html> </head> <body> <iframe style=\"border:5px dotted red\" name=\"myframe\" src = \"\" width=\"400\" height=\"600\"> </iframe> <form action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\" method=\"post\" id=\"\" target=\"myframe\"> <INPUT type=\"hidden\" NAME=\"service_command\" value=\"TOKENIZATION\"> <INPUT type=\"hidden\" NAME=\"language\" value=\" \"> <INPUT type=\"hidden\" NAME=\"merchant_identifier\" value=\"\"> <INPUT type=\"hidden\" NAME=\"access_code\" value=\"\"> <INPUT type=\"hidden\" NAME=\"signature\" value=\"\"> <INPUT type=\"hidden\" NAME=\"return_url\" value=\"\"> <INPUT type=\"hidden\" NAME=\"merchant_reference\" value=\"\"> <input value=\"Send\" type=\"submit\" id=\"form1\"> </form> </body> </html> The above code snippet is an HTML based form that will post a request to PayFORT server. The request parameters are also added in the input tag of the code. However, If you are not familiar with HTML tags and forms then you can checkout this site The parameters are mandatory and are required by PayFORT server to validate, authenticate and provide the tokens for processing of payment The form consists of iframe tag which specifies the style, name of the style (you can give any name to your style), source code location, width and height of the iframe. All these are customizable values which you can provide. The form action tag consists of the endpoints . This will come handy whenever submit action is performed on the page. Once the form is submitted the parameters provided in the form would be sent to the PayFORT server and Endpoints will serve as communication link between your page and PayFORT server. Here is the description of the input parameters: The very first input parameter is the service command Tokenization. This service command will provide the server with a valid command that it should perform once it receives the request. The second input parameter denotes the language. There are two options which you can use. The languages supported by our platform are en/ar . You can provide either english(en) or arabic(ar) in the input parameter value. The third input parameter is merchant identifier and the value of the same can be check in the [backoffice](backoffice.md) The fourth input parameter is the access code and again its value can be found in backoffice. The fifth input parameter is the signature which is a SHA based and can be generated in the backoffice. The sixth input parameter is the return url which the url of the page where you would like to receive the response of the PayFORT server or the response to your request The seventh input parameter is the merchant reference which is nothing but unique order number You need to provide the values of all the input parameters in the value field before your payment page can send request to the PayFORT server Finally the laster input parameter would be a submit parameter which would submit the form and the request would be forwarded to the PayFORT server For more details on Tokens and Tokenization process visit the link What is Custom Payment Form? You can also build your own custom payment form without using default payment template provided by PayFoRT. Figure 1 How it works? You develop your own custom payment details form that collects the card details (credit card number, expiry date, CVV), and sends the request to PayFORT server. PayFort receives the payment details and returns the response which includes the token to your payment processing page. You use the token to complete the [Authorization or Purchase operation](https://docs.payfort.com/docs/api/build/index.html#operations-request). You should develop a form that does not send data to your website but directly submits the form to PayFORT. To learn more about Tokens and Tokenization process visit this [link](tokenization.md) Integration Flow Figure 2 Here is the Integration flow description The customer begins the checkout process on your website. Your website displays the custom payment form to collect the card\u2019s details. Then the Customer enters the card\u2019s details on the payment page. PayFORT checks the card details. PayFORT creates a token for the Customer transaction and sends it to the payment page. The Payment page then sends a JSON request along with the token to PayFORT. In case your page receives from PayFORT server a 3-D Secure URL 3ds_url , and response indicating that a 3ds check is required then: Your payment page redirects the Customer to the ACS to check his card enrollment. The Customer enters authentication data on the ACS platform. The ACS performs authentication of the Customer\u2019s data and sends the authentication results to PayFORT. PayFORT completes the operation based on the 3-D Secure response and returns the response to your payment page. PayFORT sends the payment results to your site. In case of 3ds secure check, PayFort returns status 20: On hold and message 064: 3-D Secure check requested message.For example, PayFort is waiting for your payment page to authenticate the Customer. If the Token is sent by the payment page, it will be generated with the same name sent by the website. Payment processing page, payment form and payment details form all refer to payment page on your site where customer will enter card details. For more details on Tokens and Tokenization process visit the [link](tokenization.md) Use Endpoints in your Custom Payment Page If you are planning to use your own custom payment page then you can use the endpoints for testing and and also for going live. Before you start Make sure you have your `access_code`. Refer figure 3. You can find it in the [backoffice](https://fort.payfort.com/account/MerchantManagement/EntitySecurity), under Integration Settings Security Settings > Access Code . If you don't have an account with us yet, you can create a test account by visiting the [link](\"https://www.payfort.com/test-account/\"). You can also get started with an active account by visiting this [link](https://www.payfort.com/get-started/) Figure 2 : Uploading custom template The Payment Page Template available in the backoffice provides you the feature to create a custom payment processing page. Refer to the figure 2. Once you upload your custom payment page our support team will validate the same. Figure 3: Generating Access Code. Add the code snippet to your site The following code snippet shown here is an example of the start of the payment process. You can refer to this example, replacing the supplied `acccess_code` with your own. The card token will be posted via the URL specified in the form's `action` attribute. HTML <html> <body> <form method=\"post\" action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\" id=form1 name=form1> <input type=\"hidden\" NAME=\"service_command\" value=\"TOKENIZATION\"> <input type=\"hidden\" NAME=\"language\" value=\" \"> <input type=\"hidden\" NAME=\"merchant_identifier\" value=\" \"> <input type=\"hidden\" NAME=\"access_code\" value=\" \"> <input type=\"hidden\" NAME=\"signature\" value=\"\"> <input type=\"hidden\" NAME=\"return_url\" value=\" \"> <input type=\"hidden\" NAME=\"merchant_reference\" value=\"\"> <input type=\"hidden\" NAME=\"card_number\" value=\"\"> <input type=\"hidden\" NAME=\"expiry_date\" value=\"\"> <input type=\"hidden\" NAME=\"card_security_code\" value=\"\"> <input type=\"hidden\" NAME=\"card_holder_name\" value=\" \"> <input type=\"submit\" value=\"\" id=\"submit2\" name=\"\"> </form> </body> </html> The above code snippet is an HTML based form that will post a request to PayFORT server. The request parameters are also added in the input tag of the code. However, If you are not familiar with HTML tags and forms then you can checkout this [site](https://www.w3schools.com/). The parameters are mandatory and are required by PayFORT server to validate, authenticate and provide the tokens for processing of payment The form action tag consists of the endpoints [ ](#endpoints). This will come handy whenever submit action is performed on the page. Once the form is submitted the parameters provided in the form would be sent to the PayFORT server and Endpoints will serve as communication link between your page and PayFORT server. Here is the description of the input parameters: The very first input parameter is the service command Tokenization. This service command will provide the server with a valid command that it should perform once it receives the request. The second input parameter denotes the language. There are two options which you can use. The languages supported by our platform are **en/ar** . You can provide either english(en) or arabic(ar) in the input parameter value. The third input parameter is merchant identifier and the value of the same can be check in the [backoffice](backoffice.md). The fourth input parameter is the access code and again its value can be found in backoffice. The fifth input parameter is the signature which is a SHA based and can be generated in the backoffice. The sixth input parameter is the return url which the url of the page where you would like to receive the response of the PayFORT server or the response to your request. The seventh input parameter is the merchant reference which is nothing but unique order number. You need to provide the values of all the input parameters in the value field before your payment page can send request to the PayFORT server. Finally the laster input parameter would be a submit parameter which would submit the form and the request would be forwarded to the PayFORT server. For more details on Tokens and Tokenization process visit the [link ](tokenization.md) Payment Page Customization When you begin designing your own custom payment page you will also need to style your custom payment page so that it is in line with the look and feel of your website. Inorder to style your custom payment page you will require CSS files and within those files you need use the css classes. If you are new to HTML and CSS don't worry you can visit this [link](https://www.w3schools.com/css/default.asp) to learn about HTML/CSS. This is a list with all customizable CSS classes on the basic payment page: - **The `Wrapper` class** It is responsible for the total width of the form container and the background. - **The `Container` class** It is responsible for the form\u2019s shape and width. - **The `Popover` class** It is responsible for the error messages. - **The `Half-container` class** It is used to merge the date and CVV fields into one block if needed. - **The `Input` class** It is the container of each single input field. - **The `Pay` class** It is responsible for the submit button. - **The `Visa/ MasterCard` classes** It is used to change the color of the Visa/ MasterCard colors. You can always create multiple theme files that will enable you to switch freely and easily between them when necessary.Theme files offer you the flexibility to change the look and feel of your page. Theme files can be uploaded from the back-office using the Payment Page template screen. Get Started With Testing If you have developed your payment page then you can proceed with creation of a testing account by visiting [link](\"https://www.payfort.com/test-account/\") Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at [support@payfort.com](mailto:support@payfort.com).","title":"Merchantpageintegration"},{"location":"merchantpageparameters/","text":"This page describe the request parameters that you are required to send through your payment processing page and the response parameters that will be sent back by the PayFORT server. The page describes the request parameters for both Merchant Page and Merchant Page 2 integrations and response for Merchant Page and Merchant Page 2 . Merchant Page Request Parameters submission type HTTPs Form Post Request List of Request Parameters service_command (String, mandatory) Maximum Length Possible Value Description 20 TOKENIZATION Command for server to understand what type of service it requires to provide. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz The access code generated in the back office. merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj The ID of the Merchant which can be found in the back office merchant_reference (alphanumeric, mandatory) Maximum Length Example Special character Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. language (String, mandatory) Maximum Length Possible Values Description 2 en/ar The checkout page and messages language where en stands for english and ar for arabic. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric, optional) Maximum Length Example Special character Description 100 Op9Vmp . @ - _ The token received from the Tokenization process. return_url (alphanumeric, optional) Length Example Special character Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Merchant Page Response List of Response Parameters that would be sent back by the PayFORT Server as a JSON format service_command (String) Maximum Length Possible/Expected Value Description 20 TOKENIZATION service command. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 access code generated. merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj The ID of the Merchant. merchant_reference (alphanumeric) Maximum Length Example Special character Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. language (String) Maximum Length Possible/Expected Values Description 2 en/ar The checkout page and messages language where en stands for english and ar for arabic. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric) Maximum Length Example Special character Description 100 Op9Vmp . @ - _ The token received from the Tokenization process. expiry_date (numeric) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric) Maximum Length Example Description 19 2105 The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. *AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. Example: 400555 * 0001 response_message (alphanumeric) Maximum Length Possible/Expected Values Description 150 Please refer to section messages Message description of the response code. It returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of PayFORT system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/Expected Value Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. card_bin (numeric) Maximum Length Example Description 8 478773 The first 6 digits of the card number. *If the card number for MEEZA was of length 19 then the card bin will be the first 8 digits. return_url (alphanumeric, optional) Length Example Special character Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Merchant Page 2 Request Parameters submission type HTTPs Form Post Request List of Request Parameters service_command (String, mandatory) Maximum Length Possible Value Description 20 TOKENIZATION Command for server to understand what type of service it requires to provide. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz The access code generated in the back office. merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj The ID of the Merchant which can be found in the back office merchant_reference (alphanumeric, mandatory) Maximum Length Example Special character Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. language (String, mandatory) Maximum Length Possible Values Description 2 en/ar The checkout page and messages language where en stands for english and ar for arabic. expiry_date (numeric, mandatory) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric, mandatory) Maximum Length Example Description 19 4005550000000001 Only the MEEZA payment option takes 19 digits card number. AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. card_security_code (numeric, mandatory) Maximum Length Example Description 4 123 A security code for the card. * Only AMEX accepts card security code of 4 digits. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric, optional) Maximum Length Example Special character Description 100 Op9Vmp . @ - _ The token received from the Tokenization process. card_holder_name (String, optional) Maximum Length Example Special character Description 50 John Smith ' - . The card holder name. remember_me (String, optional) Maximum Length Possible/Expected values Special character Description 50 -YES -NO ' - . The card holder name. return_url (alphanumeric, optional) Length Example Special character Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Please don\u2019t include the following parameters in calculating the signature if you are using Merchant Page 2.0 tokenization request: card_security_code, card number, expiry_date, card_holder_name, remember_me. Merchant Page 2 Response List of Response Parameters that would be sent back by the PayFORT Server as a JSON format service_command (String) Maximum Length Possible/Expected Value Description 20 TOKENIZATION service command. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 access code generated. merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj The ID of the Merchant. merchant_reference (alphanumeric) Maximum Length Example Special character Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. language (String) Maximum Length Possible/Expected Values Description 2 en/ar The checkout page and messages language where en stands for english and ar for arabic. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric) Maximum Length Example Special character Description 100 Op9Vmp . @ - _ The token received from the Tokenization process. expiry_date (numeric) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric) Maximum Length Example Description 19 2105 The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. *AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. Example: 400555 * 0001 response_message (alphanumeric) Maximum Length Possible/Expected Values Description 150 Please refer to section messages Message description of the response code. It returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of PayFORT system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/Expected Value Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. card_bin (numeric) Maximum Length Example Description 8 478773 The first 6 digits of the card number.*If the card number for MEEZA was of length 19 then the card bin will be the first 8 digits. card_holder_name (String) Maximum Length Example Description 50 John Smith The card holder name. remember_me (String) Maximum Length Possible/Expected values Description 3 - YES, - NO This parameter provides you with an indication to whether to save this token for the user based on the user selection. return_url (alphanumeric, optional) Length Example Special character Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones-.","title":"Merchant Page Parameters"},{"location":"merchantpageparameters/#merchant-page-request-parameters","text":"submission type HTTPs Form Post Request List of Request Parameters service_command (String, mandatory) Maximum Length Possible Value Description 20 TOKENIZATION Command for server to understand what type of service it requires to provide. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz The access code generated in the back office. merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj The ID of the Merchant which can be found in the back office merchant_reference (alphanumeric, mandatory) Maximum Length Example Special character Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. language (String, mandatory) Maximum Length Possible Values Description 2 en/ar The checkout page and messages language where en stands for english and ar for arabic. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric, optional) Maximum Length Example Special character Description 100 Op9Vmp . @ - _ The token received from the Tokenization process. return_url (alphanumeric, optional) Length Example Special character Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed.","title":"Merchant Page Request Parameters"},{"location":"merchantpageparameters/#merchant-page-response","text":"List of Response Parameters that would be sent back by the PayFORT Server as a JSON format service_command (String) Maximum Length Possible/Expected Value Description 20 TOKENIZATION service command. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 access code generated. merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj The ID of the Merchant. merchant_reference (alphanumeric) Maximum Length Example Special character Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. language (String) Maximum Length Possible/Expected Values Description 2 en/ar The checkout page and messages language where en stands for english and ar for arabic. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric) Maximum Length Example Special character Description 100 Op9Vmp . @ - _ The token received from the Tokenization process. expiry_date (numeric) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric) Maximum Length Example Description 19 2105 The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. *AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. Example: 400555 * 0001 response_message (alphanumeric) Maximum Length Possible/Expected Values Description 150 Please refer to section messages Message description of the response code. It returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of PayFORT system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/Expected Value Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. card_bin (numeric) Maximum Length Example Description 8 478773 The first 6 digits of the card number. *If the card number for MEEZA was of length 19 then the card bin will be the first 8 digits. return_url (alphanumeric, optional) Length Example Special character Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed.","title":"Merchant Page Response"},{"location":"merchantpageparameters/#merchant-page-2-request-parameters","text":"submission type HTTPs Form Post Request List of Request Parameters service_command (String, mandatory) Maximum Length Possible Value Description 20 TOKENIZATION Command for server to understand what type of service it requires to provide. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz The access code generated in the back office. merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj The ID of the Merchant which can be found in the back office merchant_reference (alphanumeric, mandatory) Maximum Length Example Special character Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. language (String, mandatory) Maximum Length Possible Values Description 2 en/ar The checkout page and messages language where en stands for english and ar for arabic. expiry_date (numeric, mandatory) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric, mandatory) Maximum Length Example Description 19 4005550000000001 Only the MEEZA payment option takes 19 digits card number. AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. card_security_code (numeric, mandatory) Maximum Length Example Description 4 123 A security code for the card. * Only AMEX accepts card security code of 4 digits. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric, optional) Maximum Length Example Special character Description 100 Op9Vmp . @ - _ The token received from the Tokenization process. card_holder_name (String, optional) Maximum Length Example Special character Description 50 John Smith ' - . The card holder name. remember_me (String, optional) Maximum Length Possible/Expected values Special character Description 50 -YES -NO ' - . The card holder name. return_url (alphanumeric, optional) Length Example Special character Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Please don\u2019t include the following parameters in calculating the signature if you are using Merchant Page 2.0 tokenization request: card_security_code, card number, expiry_date, card_holder_name, remember_me.","title":"Merchant Page 2 Request Parameters"},{"location":"merchantpageparameters/#merchant-page-2-response","text":"List of Response Parameters that would be sent back by the PayFORT Server as a JSON format service_command (String) Maximum Length Possible/Expected Value Description 20 TOKENIZATION service command. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 access code generated. merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj The ID of the Merchant. merchant_reference (alphanumeric) Maximum Length Example Special character Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. language (String) Maximum Length Possible/Expected Values Description 2 en/ar The checkout page and messages language where en stands for english and ar for arabic. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric) Maximum Length Example Special character Description 100 Op9Vmp . @ - _ The token received from the Tokenization process. expiry_date (numeric) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric) Maximum Length Example Description 19 2105 The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. *AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. Example: 400555 * 0001 response_message (alphanumeric) Maximum Length Possible/Expected Values Description 150 Please refer to section messages Message description of the response code. It returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of PayFORT system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/Expected Value Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. card_bin (numeric) Maximum Length Example Description 8 478773 The first 6 digits of the card number.*If the card number for MEEZA was of length 19 then the card bin will be the first 8 digits. card_holder_name (String) Maximum Length Example Description 50 John Smith The card holder name. remember_me (String) Maximum Length Possible/Expected values Description 3 - YES, - NO This parameter provides you with an indication to whether to save this token for the user based on the user selection. return_url (alphanumeric, optional) Length Example Special character Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page to be displayed to the customer when the order is processed. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones-.","title":"Merchant Page 2 Response"},{"location":"mobilesdk/","text":"Mobile SDKs The PayFORT Mobile SDK allows you to securely integrate the payment functions. It also allows you to easily accept In-App payments. Instead of the traditional, time-consuming, and complex way of being redirected to the mobile browser to complete the payment, In-App payments can be completed through our FORT Mobile SDK . In turn, this gives the your customers a smooth, pleasing user-experience by using In-App payment functions through the native applications. Features of PayFort SDKs Native in-app payment. Fully secure. Fully customized. Mobile SDK Integration Workflow When your customer initiates the payment on your merchant app, your app requests Payfort server for a new token every time, then process the customer's payment. When PayFort server sends a successful response to your site your backend is notified of successful payment and your backend server confirms the same with Payfort server. Here is the description of mobile sdk integration workflow: The Merchant\u2019s application initiates the FORT Mobile SDK and passes the parameters to the FORT Mobile SDK. The FORT Mobile SDK starts a secure connection and passes the received parameters to the FORT API to be validated. The FORT API returns the validation response. The FORT Mobile SDK submits the cardholder\u2019s data to the FORT API to process the order. The FORT API validates and processes the order with the third parties. The FORT API returns the FORT response. The FORT Mobile SDK returns the response to the corresponding callback method. For more details on PayFORT Android SDK Integration visit this link For more details on PayFORT iOS SDK Integration visit this link Mobile SDK Libraries You can download the two available FORT mobile sdk libraries from this section. iOS The FORT Mobile SDK supports all devices running iOS 8+ Get Started SDK 2.1 for iOS Android The FORT Mobile SDK supports all devices running Android 4.1.x (API level 16). Get Started SDK 1.5 for Android Mobile SDK Token A Mobile SDK Token is required to authenticate every request sent to the SDK. The Token is also important to process payment operations in the FORT through our FORT Mobile SDK. A unique Token should be created for each transaction. Each Token has a life-time of only one hour if no new request from the same device is sent. The creation and initiation of a Mobile SDK Token happens on your server side. SDK Token Endpoints Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi Live POST https://paymentservices.payfort.com/FortAPI/paymentApi SDK Token Request Placeholder for sample code. You can check out the full list of parameters that are required for SDK Token request by visiting this link SDK Response Placeholder for sample JSON response. Go to Full API Check out our full API by visiting this link Check out iOS integrations by visiting this link Check out Android integrations by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Mobile SDK Library"},{"location":"mobilesdk/#mobile-sdks","text":"The PayFORT Mobile SDK allows you to securely integrate the payment functions. It also allows you to easily accept In-App payments. Instead of the traditional, time-consuming, and complex way of being redirected to the mobile browser to complete the payment, In-App payments can be completed through our FORT Mobile SDK . In turn, this gives the your customers a smooth, pleasing user-experience by using In-App payment functions through the native applications.","title":"Mobile SDKs"},{"location":"mobilesdk/#features-of-payfort-sdks","text":"Native in-app payment. Fully secure. Fully customized.","title":"Features of PayFort SDKs"},{"location":"mobilesdk/#mobile-sdk-integration-workflow","text":"When your customer initiates the payment on your merchant app, your app requests Payfort server for a new token every time, then process the customer's payment. When PayFort server sends a successful response to your site your backend is notified of successful payment and your backend server confirms the same with Payfort server. Here is the description of mobile sdk integration workflow: The Merchant\u2019s application initiates the FORT Mobile SDK and passes the parameters to the FORT Mobile SDK. The FORT Mobile SDK starts a secure connection and passes the received parameters to the FORT API to be validated. The FORT API returns the validation response. The FORT Mobile SDK submits the cardholder\u2019s data to the FORT API to process the order. The FORT API validates and processes the order with the third parties. The FORT API returns the FORT response. The FORT Mobile SDK returns the response to the corresponding callback method. For more details on PayFORT Android SDK Integration visit this link For more details on PayFORT iOS SDK Integration visit this link","title":"Mobile SDK Integration Workflow"},{"location":"mobilesdk/#mobile-sdk-libraries","text":"You can download the two available FORT mobile sdk libraries from this section.","title":"Mobile SDK Libraries"},{"location":"mobilesdk/#mobile-sdk-token","text":"A Mobile SDK Token is required to authenticate every request sent to the SDK. The Token is also important to process payment operations in the FORT through our FORT Mobile SDK. A unique Token should be created for each transaction. Each Token has a life-time of only one hour if no new request from the same device is sent. The creation and initiation of a Mobile SDK Token happens on your server side.","title":"Mobile SDK Token"},{"location":"mobilesdk/#sdk-token-endpoints","text":"","title":"SDK Token Endpoints"},{"location":"mobilesdk/#sandbox","text":"POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi","title":"Sandbox"},{"location":"mobilesdk/#live","text":"POST https://paymentservices.payfort.com/FortAPI/paymentApi","title":"Live"},{"location":"mobilesdk/#sdk-token-request","text":"Placeholder for sample code. You can check out the full list of parameters that are required for SDK Token request by visiting this link","title":"SDK Token Request"},{"location":"mobilesdk/#sdk-response","text":"Placeholder for sample JSON response.","title":"SDK Response"},{"location":"mobilesdk/#go-to-full-api","text":"Check out our full API by visiting this link Check out iOS integrations by visiting this link Check out Android integrations by visiting this link","title":"Go to Full API"},{"location":"mobilesdk/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"monitor/","text":"","title":"Monitor"},{"location":"moto/","text":"MOTO Channel Now your customers can make transactions through mobile and Telephone orders also. MOTO (Mobile Order/ Telephone Order) channel allows the you to process MOTO transactions through the FORT API using credit card Tokens ONLY. Whenever any customer places an order in your site he/she can carry out transactions over the telephone and cellphone IVR. Endpoints Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi Parameters Submission Type REST POST request using JSON. The Request The sample JSON Request Placeholder: Provide Sample code for MOTO request. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. For input parameters please visit the link The Response Here is the response that would be sent by PayFORT to the request sent to it for MOTO transactions. {\"command\":\"PURCHASE\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"customer_email\":\"customer@domain.com\", \"eci\":\"MOTO\", \"token_name\":\"Op9Vmp\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone6-S\", \"fort_id\":\"149295435400084008\", \"payment_option\":\"MASTERCARD\", \"customer_ip\":\"192.178.1.10\", \"customer_name\":\"John Smith\", \"authorization_code\":\"P1000000000000372136\", \"response_message\":\"Success\", \"response_code\":\"20064\", \"status\":\"04\", \"expiry_date\":\"2105\", \"card_number\":\"400555******0001\", \"phone_number\":\"00962797219966\", \"settlement_reference\":\"XYZ9239-yu898\", \"merchant_extra\":\"JohnSmith\", \"merchant_extra1\":\"JohnSmith\", \"merchant_extra2\":\"JohnSmith\", \"merchant_extra3\":\"JohnSmith\", \"merchant_extra4\":\"JohnSmith\", \"merchant_extra5\":\"JohnSmith\", \"return_url\":\"http://www.merchant.com\" } Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Moto"},{"location":"moto/#moto-channel","text":"Now your customers can make transactions through mobile and Telephone orders also. MOTO (Mobile Order/ Telephone Order) channel allows the you to process MOTO transactions through the FORT API using credit card Tokens ONLY. Whenever any customer places an order in your site he/she can carry out transactions over the telephone and cellphone IVR.","title":"MOTO Channel"},{"location":"moto/#endpoints","text":"Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi","title":"Endpoints"},{"location":"moto/#parameters-submission-type","text":"REST POST request using JSON.","title":"Parameters Submission Type"},{"location":"moto/#the-request","text":"The sample JSON Request Placeholder: Provide Sample code for MOTO request. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. For input parameters please visit the link","title":"The Request"},{"location":"moto/#the-response","text":"Here is the response that would be sent by PayFORT to the request sent to it for MOTO transactions. {\"command\":\"PURCHASE\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"customer_email\":\"customer@domain.com\", \"eci\":\"MOTO\", \"token_name\":\"Op9Vmp\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone6-S\", \"fort_id\":\"149295435400084008\", \"payment_option\":\"MASTERCARD\", \"customer_ip\":\"192.178.1.10\", \"customer_name\":\"John Smith\", \"authorization_code\":\"P1000000000000372136\", \"response_message\":\"Success\", \"response_code\":\"20064\", \"status\":\"04\", \"expiry_date\":\"2105\", \"card_number\":\"400555******0001\", \"phone_number\":\"00962797219966\", \"settlement_reference\":\"XYZ9239-yu898\", \"merchant_extra\":\"JohnSmith\", \"merchant_extra1\":\"JohnSmith\", \"merchant_extra2\":\"JohnSmith\", \"merchant_extra3\":\"JohnSmith\", \"merchant_extra4\":\"JohnSmith\", \"merchant_extra5\":\"JohnSmith\", \"return_url\":\"http://www.merchant.com\" } Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones.","title":"The Response"},{"location":"moto/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"moto/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"motoparameters/","text":"MOTO Request Parameters ATTRIBUTES Description command Alpha Mandatory max: 20 Command. Possible/ expected values: AUTHORIZATION, PURCHASE access_code Alphanumeric Mandatory max: 20 Access code. Example: zx0IPmPy5jp1vAz merchant_identifier Alphanumeric Mandatory max: 20 The ID of the Merchant. Example: CycHZxVj merchant_reference Alphanumeric Mandatory max: 40 The Merchant\u2019s unique order number. Example: XYZ9239-yu898 Special characters: - _ . amount Numeric Mandatory max: 10 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount. Example: 10000 currency Alpha Mandatory max: 3 The currency of the transaction\u2019s amount in ISO code 3. Example: AED language Alpha Mandatory max: 2 The checkout page and messages language. Possible/ expected values: en / ar customer_email Alphanumeric Mandatory max: 254 The customer\u2019s email. Example: customer@domain.com Special characters: _ - . @ + eci Alpha Mandatory max: 16 Ecommerce indicator. Possible/ expected values: MOTO token_name Alphanumeric Mandatory max: 100 The token received from the Tokenization process. Example: Op9Vmp Special characters: _ - . @ signature Alphanumeric Mandatory max: 200 A string hashed using the Secure Hash Algorithm. (Please refer to section Signature for more details). Example: 7cad05f0212ed933c9a5d5dffa31661acf2c827a payment_option Alpha Optional max: 10 Payment option. Possible/ expected values: - MASTERCARD - VISA - AMEX order_description Alphanumeric Optional max: 150 It holds the description of the order. Example: iPhone 6-S Special characters: ' / . _ - # : $ Space customer_ip Alphanumeric Optional max: 45 It holds the customer\u2019s IP address. It\u2019s Mandatory, if the fraud service is active. We support IPv4 and IPv6 as shown in the example below. Example: IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf Special characters: . : customer_name Alpha Optional max: 40 The customer\u2019s name. Example: John Smith Special characters: _ \\ / - . ' Space phone_number Alphanumeric Optional max: 19 The customer\u2019s phone number. Example: 00962797219966 Special characters: + - ( ) Space settlement_reference Alphanumeric Optional max: 34 The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Example: XYZ9239-yu898 Special characters: - _ . merchant_extra Alphanumeric Optional Max: 999 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith Special characters: . ; / _ - , ' @ merchant_extra1 Alphanumeric Optional Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith Special characters: . ; / _ - , ' @ merchant_extra2 Alphanumeric Optional Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith Special characters: . ; / _ - , ' @ merchant_extra3 Alphanumeric Optional Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith Special characters: . ; / _ - , ' @ merchant_extra4 Alphanumeric Optional Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith Special characters: . ; / _ - , ' @ merchant_extra5 Alphanumeric Optional Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith Special characters: . ; / _ - , ' @ return_url Alphanumeric Optional max: 400 The URL of the Merchant\u2019s page to be redirected to when the order is processed. Example: http://www.merchant.com Special characters: $ ! = ? # & - _ / : . Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. MOTO Response ATTRIBUTES Description command Alpha max: 20 Command. Possible/ expected values: AUTHORIZATION, PURCHASE access_code Alphanumeric max: 20 Access code. Example: zx0IPmPy5jp1vAz merchant_identifier Alphanumeric max: 20 The ID of the Merchant. Example: CycHZxVj merchant_reference Alphanumeric max: 40 The Merchant\u2019s unique order number. Example: XYZ9239-yu898 amount Numeric max: 10 The transaction\u2019s amount. Example: 10000 currency Alpha max: 3 The currency of the transaction\u2019s amount in ISO code 3. Example: AED language Alpha max: 2 The checkout page and messages language. Possible/ expected values: en / ar customer_email Alphanumeric max: 254 The customer\u2019s email. Example: customer@domain.com eci Alpha max: 16 Ecommerce indicator. Possible/ expected values: MOTO token_name Alphanumeric max: 100 The token received from the Tokenization process. Example: Op9Vmp signature Alphanumeric max: 200 A string hashed using the Secure Hash Algorithm. (Please refer to section Signature for more details). Example: 7cad05f0212ed933c9a5d5dffa31661acf2c827a fort_id Numeric max: 20 The order\u2019s unique reference returned by our system. Example: 149295435400084008 payment_option Alpha max: 10 Payment option. Possible/ expected values: - MASTERCARD - VISA - AMEX order_description Alphanumeric max: 150 It holds the description of the order. Example: iPhone 6-S customer_ip Alphanumeric max: 45 It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example below. Example: IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf customer_name Alpha max: 40 The customer\u2019s name. Example: John Smith authorization_code Alphanumeric max: 100 The authorization code returned from the 3rd party. Example: P1000000000000372136 response_message Alphanumeric max: 150 Message description of the response code. It returns according to the request language. Possible/ expected values: Please refer to section messages response_code Numeric Max: 5 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . Example: 20064 status Numeric max: 2 A two-digit numeric value that indicates the status of the transaction Possible/ expected values: (Please refer to section statuses ). expiry_date Numeric max: 4 The card\u2019s expiry date. Example: 2105 card_number Numeric max: 16 The card\u2019s number masked based on a certain standard that is selected in the technical settings. Example: 400555 * *0001 phone_number Alphanumeric max: 19 The customer\u2019s phone number. Example: 00962797219966 settlement_reference Alphanumeric max: 34 The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Example: XYZ9239-yu898 merchant_extra Alphanumeric Max: 999 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith merchant_extra1 Alphanumeric Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith merchant_extra2 Alphanumeric Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith merchant_extra3 Alphanumeric Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith merchant_extra4 Alphanumeric Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith merchant_extra5 Alphanumeric Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith return_url Alphanumeric max: 400 The URL of the Merchant\u2019s page to be redirected to when the order is processed. Example: http://www.merchant.com Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones","title":"MOTO Parameters"},{"location":"motoparameters/#moto-request-parameters","text":"ATTRIBUTES Description command Alpha Mandatory max: 20 Command. Possible/ expected values: AUTHORIZATION, PURCHASE access_code Alphanumeric Mandatory max: 20 Access code. Example: zx0IPmPy5jp1vAz merchant_identifier Alphanumeric Mandatory max: 20 The ID of the Merchant. Example: CycHZxVj merchant_reference Alphanumeric Mandatory max: 40 The Merchant\u2019s unique order number. Example: XYZ9239-yu898 Special characters: - _ . amount Numeric Mandatory max: 10 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount. Example: 10000 currency Alpha Mandatory max: 3 The currency of the transaction\u2019s amount in ISO code 3. Example: AED language Alpha Mandatory max: 2 The checkout page and messages language. Possible/ expected values: en / ar customer_email Alphanumeric Mandatory max: 254 The customer\u2019s email. Example: customer@domain.com Special characters: _ - . @ + eci Alpha Mandatory max: 16 Ecommerce indicator. Possible/ expected values: MOTO token_name Alphanumeric Mandatory max: 100 The token received from the Tokenization process. Example: Op9Vmp Special characters: _ - . @ signature Alphanumeric Mandatory max: 200 A string hashed using the Secure Hash Algorithm. (Please refer to section Signature for more details). Example: 7cad05f0212ed933c9a5d5dffa31661acf2c827a payment_option Alpha Optional max: 10 Payment option. Possible/ expected values: - MASTERCARD - VISA - AMEX order_description Alphanumeric Optional max: 150 It holds the description of the order. Example: iPhone 6-S Special characters: ' / . _ - # : $ Space customer_ip Alphanumeric Optional max: 45 It holds the customer\u2019s IP address. It\u2019s Mandatory, if the fraud service is active. We support IPv4 and IPv6 as shown in the example below. Example: IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf Special characters: . : customer_name Alpha Optional max: 40 The customer\u2019s name. Example: John Smith Special characters: _ \\ / - . ' Space phone_number Alphanumeric Optional max: 19 The customer\u2019s phone number. Example: 00962797219966 Special characters: + - ( ) Space settlement_reference Alphanumeric Optional max: 34 The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Example: XYZ9239-yu898 Special characters: - _ . merchant_extra Alphanumeric Optional Max: 999 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith Special characters: . ; / _ - , ' @ merchant_extra1 Alphanumeric Optional Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith Special characters: . ; / _ - , ' @ merchant_extra2 Alphanumeric Optional Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith Special characters: . ; / _ - , ' @ merchant_extra3 Alphanumeric Optional Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith Special characters: . ; / _ - , ' @ merchant_extra4 Alphanumeric Optional Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith Special characters: . ; / _ - , ' @ merchant_extra5 Alphanumeric Optional Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith Special characters: . ; / _ - , ' @ return_url Alphanumeric Optional max: 400 The URL of the Merchant\u2019s page to be redirected to when the order is processed. Example: http://www.merchant.com Special characters: $ ! = ? # & - _ / : . Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"MOTO Request Parameters"},{"location":"motoparameters/#moto-response","text":"ATTRIBUTES Description command Alpha max: 20 Command. Possible/ expected values: AUTHORIZATION, PURCHASE access_code Alphanumeric max: 20 Access code. Example: zx0IPmPy5jp1vAz merchant_identifier Alphanumeric max: 20 The ID of the Merchant. Example: CycHZxVj merchant_reference Alphanumeric max: 40 The Merchant\u2019s unique order number. Example: XYZ9239-yu898 amount Numeric max: 10 The transaction\u2019s amount. Example: 10000 currency Alpha max: 3 The currency of the transaction\u2019s amount in ISO code 3. Example: AED language Alpha max: 2 The checkout page and messages language. Possible/ expected values: en / ar customer_email Alphanumeric max: 254 The customer\u2019s email. Example: customer@domain.com eci Alpha max: 16 Ecommerce indicator. Possible/ expected values: MOTO token_name Alphanumeric max: 100 The token received from the Tokenization process. Example: Op9Vmp signature Alphanumeric max: 200 A string hashed using the Secure Hash Algorithm. (Please refer to section Signature for more details). Example: 7cad05f0212ed933c9a5d5dffa31661acf2c827a fort_id Numeric max: 20 The order\u2019s unique reference returned by our system. Example: 149295435400084008 payment_option Alpha max: 10 Payment option. Possible/ expected values: - MASTERCARD - VISA - AMEX order_description Alphanumeric max: 150 It holds the description of the order. Example: iPhone 6-S customer_ip Alphanumeric max: 45 It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example below. Example: IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf customer_name Alpha max: 40 The customer\u2019s name. Example: John Smith authorization_code Alphanumeric max: 100 The authorization code returned from the 3rd party. Example: P1000000000000372136 response_message Alphanumeric max: 150 Message description of the response code. It returns according to the request language. Possible/ expected values: Please refer to section messages response_code Numeric Max: 5 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . Example: 20064 status Numeric max: 2 A two-digit numeric value that indicates the status of the transaction Possible/ expected values: (Please refer to section statuses ). expiry_date Numeric max: 4 The card\u2019s expiry date. Example: 2105 card_number Numeric max: 16 The card\u2019s number masked based on a certain standard that is selected in the technical settings. Example: 400555 * *0001 phone_number Alphanumeric max: 19 The customer\u2019s phone number. Example: 00962797219966 settlement_reference Alphanumeric max: 34 The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Example: XYZ9239-yu898 merchant_extra Alphanumeric Max: 999 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith merchant_extra1 Alphanumeric Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith merchant_extra2 Alphanumeric Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith merchant_extra3 Alphanumeric Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith merchant_extra4 Alphanumeric Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith merchant_extra5 Alphanumeric Max: 250 Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Example: JohnSmith return_url Alphanumeric max: 400 The URL of the Merchant\u2019s page to be redirected to when the order is processed. Example: http://www.merchant.com Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones","title":"MOTO Response"},{"location":"plugins/","text":"Get Started With PayFort Plugins PAYFORT offers the following free gateway plugins to help you enable \u201cPayFort Payment Gateway\u201d easily to your e-Commerce store. So your customers will be able to complete their payments through PayFort gateway, Plus you can customize these plugins to meet your needs! Prestashop Get Started Github Repo Woocommerce Get Started Github Repo Magento Get Started Github Repo Magento 2 Get Started Github Repo Cs Cart 3 Get Started Github Repo Cs Cart 4 Get Started Github Repo Open Cart Get Started Github Repo Open Cart 2 Get Started Github Repo Php Get Started Github Repo","title":"Plugins"},{"location":"plugins/#get-started-with-payfort-plugins","text":"PAYFORT offers the following free gateway plugins to help you enable \u201cPayFort Payment Gateway\u201d easily to your e-Commerce store. So your customers will be able to complete their payments through PayFort gateway, Plus you can customize these plugins to meet your needs!","title":"Get Started With PayFort Plugins"},{"location":"recurring/","text":"What is Recurring? A Recurring contract is a set of one or more recurring payment details linked to a unique shopper on your merchant account. It allows you to charge your customer on monthly, yearly, quaterly basis depending on the terms of the contract. For example monthly subscription for a movie streaming platform or postpaid calling card bill payment, etc. You are able to charge your customer using the Purchase operation configured in single message mode. How It Works - Overview Placeholder: please provide pics for every step described in this section. You have to create a Token and assign to a specific Customer account. For more details on \u201cToken\u201d please refer to the FORT Tokenization Service. Your site then sends the recurring transaction details along with the Customer\u2019s Token to PayFORT. The transaction is processed and a valid response is returned to your site indicating the status of the transaction. The Token used to process recurring transactions, should be created when processing a successful transaction using an e-commerce MID registered for the same legal entity the recurring MID is configured for. Issuers will charge the customer\u2019s card if the card was used to process a successful e-commerce transaction for that merchant prior to the recurring transaction. Integration- Workflow Placeholder: Provide a workflow visual diagram along with steps and description. Endpoints Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi Live POST https://paymentservices.payfort.com/FortAPI/paymentApi Parameters Submission Type REST POST request using JSON. The Request Placeholder: Provide sample code for placing recurring transaction request. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. For details on input parameters please visit the link The Response Here is the response example {\"command\":\"PURCHASE\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"customer_email\":\"customer@domain.com\", \"eci\":\"RECURRING\", \"token_name\":\"Op9Vmp\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone6-S\", \"fort_id\":\"149295435400084008\", \"payment_option\":\"MASTERCARD\", \"customer_ip\":\"192.178.1.10\", \"customer_name\":\"John Smith\", \"authorization_code\":\"P1000000000000372136\", \"response_message\":\"Success\", \"response_code\":\"20064\", \"status\":\"04\", \"expiry_date\":\"2105\", \"card_number\":\"400555******0001\", \"phone_number\":\"00962797219966\", \"settlement_reference\":\"XYZ9239-yu898\", \"merchant_extra\":\"JohnSmith\", \"merchant_extra1\":\"JohnSmith\", \"merchant_extra2\":\"JohnSmith\", \"merchant_extra3\":\"JohnSmith\", \"merchant_extra4\":\"JohnSmith\", \"merchant_extra5\":\"JohnSmith\", \"return_url\":\"http://www.merchant.com\" } Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Recurring(API)"},{"location":"recurring/#what-is-recurring","text":"A Recurring contract is a set of one or more recurring payment details linked to a unique shopper on your merchant account. It allows you to charge your customer on monthly, yearly, quaterly basis depending on the terms of the contract. For example monthly subscription for a movie streaming platform or postpaid calling card bill payment, etc. You are able to charge your customer using the Purchase operation configured in single message mode.","title":"What is Recurring?"},{"location":"recurring/#how-it-works-overview","text":"Placeholder: please provide pics for every step described in this section. You have to create a Token and assign to a specific Customer account. For more details on \u201cToken\u201d please refer to the FORT Tokenization Service. Your site then sends the recurring transaction details along with the Customer\u2019s Token to PayFORT. The transaction is processed and a valid response is returned to your site indicating the status of the transaction. The Token used to process recurring transactions, should be created when processing a successful transaction using an e-commerce MID registered for the same legal entity the recurring MID is configured for. Issuers will charge the customer\u2019s card if the card was used to process a successful e-commerce transaction for that merchant prior to the recurring transaction.","title":"How It Works - Overview"},{"location":"recurring/#integration-workflow","text":"Placeholder: Provide a workflow visual diagram along with steps and description.","title":"Integration- Workflow"},{"location":"recurring/#endpoints","text":"Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi Live POST https://paymentservices.payfort.com/FortAPI/paymentApi","title":"Endpoints"},{"location":"recurring/#parameters-submission-type","text":"REST POST request using JSON.","title":"Parameters Submission Type"},{"location":"recurring/#the-request","text":"Placeholder: Provide sample code for placing recurring transaction request. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. For details on input parameters please visit the link","title":"The Request"},{"location":"recurring/#the-response","text":"Here is the response example {\"command\":\"PURCHASE\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"customer_email\":\"customer@domain.com\", \"eci\":\"RECURRING\", \"token_name\":\"Op9Vmp\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone6-S\", \"fort_id\":\"149295435400084008\", \"payment_option\":\"MASTERCARD\", \"customer_ip\":\"192.178.1.10\", \"customer_name\":\"John Smith\", \"authorization_code\":\"P1000000000000372136\", \"response_message\":\"Success\", \"response_code\":\"20064\", \"status\":\"04\", \"expiry_date\":\"2105\", \"card_number\":\"400555******0001\", \"phone_number\":\"00962797219966\", \"settlement_reference\":\"XYZ9239-yu898\", \"merchant_extra\":\"JohnSmith\", \"merchant_extra1\":\"JohnSmith\", \"merchant_extra2\":\"JohnSmith\", \"merchant_extra3\":\"JohnSmith\", \"merchant_extra4\":\"JohnSmith\", \"merchant_extra5\":\"JohnSmith\", \"return_url\":\"http://www.merchant.com\" } Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones.","title":"The Response"},{"location":"recurring/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"recurring/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"recurringparameters/","text":"Recurring Transactions Request Parameters ATTRIBUTES Possible/Expected Values or examples Description command ( Alpha Mandatory max: 20) PURCHASE command access_code ( Alphanumeric Mandatory max: 20) zx0IPmPy5jp1vAz Access code merchant_identifier ( Alphanumeric Mandatory max: 20) CycHZxVj The ID of the Merchant. merchant_reference ( Alphanumeric Mandatory max: 40) XYZ9239-yu898 The Merchant\u2019s unique order number. Special characters: - _ . amount ( Numeric Mandatory max: 10) 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount. currency (Alpha Mandatory max: 3) AED The currency of the transaction\u2019s amount in ISO code 3. language ( Alpha Mandatory max: 2) en / ar The checkout page and messages language. customer_email (Alphanumeric Mandatory max: 254) customer@domain.com The customer\u2019s email. Special characters: _ - . @ + eci (Alpha Mandatory max: 16) RECURRING Ecommerce indicator. token_name ( Alphanumeric Mandatory max: 100) Op9Vmp The Token received from the Tokenization process. Special characters: _ - . @ signature ( Alphanumeric Mandatory max: 200) 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. (Please refer to section Signature for more details). payment_option ( Alpha Optional Max: 10) -MASTERCARD - VISA - AMEX Payment option. Possible/ expected values: - MASTERCARD - VISA - AMEX order_description ( Alphanumeric Optional max: 150) iPhone 6-S It holds the description of the order. Special characters: ' / . _ - # : $ Space customer_name ( Alpha Optional max: 40) John Smith The customer\u2019s name. Special characters: _ \\ / - . ' Space merchant_extra ( Alphanumeric Optional Max: 999) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Special characters: . ; / _ - , ' @ merchant_extra1 ( Alphanumeric Optional Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Special characters: . ; / _ - , ' @ merchant_extra2 ( Alphanumeric Optional Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Special characters: . ; / _ - , ' @ merchant_extra3 ( Alphanumeric Optional Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Special characters: . ; / _ - , ' @ merchant_extra4 ( Alphanumeric Optional Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Special characters: . ; / _ - , ' @ merchant_extra5 ( Alphanumeric Optional Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Special characters: . ; / _ - , ' @ phone_number ( Alphanumeric Optional max: 19) 00962797219966 The customer\u2019s phone number. Special characters: + - ( ) Space settlement_reference ( Alphanumeric Optional max: 34) XYZ9239-yu898 The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Special characters: - _ . Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. Recurring Transaction Response ATTRIBUTES Possible/Expected values or Example Description command ( Alpha max: 20) PURCHASE command. access_code ( Alphanumeric max: 20) zx0IPmPy5jp1vAz Access code. merchant_identifier ( Alphanumeric max: 20) CycHZxVj The ID of the Merchant. merchant_reference ( Alphanumeric max: 40) XYZ9239-yu898 The Merchant\u2019s unique order number. amount ( Numeric max: 10) 10000 The transaction\u2019s amount. currency ( Alpha max: 3) AED The currency of the transaction\u2019s amount in ISO code 3. language ( Alpha max: 2) en / ar The checkout page and messages language. customer_email ( Alphanumeric max: 254) customer@domain.com The customer\u2019s email. eci (Alpha max: 16) RECURRING Ecommerce indicator. token_name ( Alphanumeric max: 100) Op9Vmp The Token received from the Tokenization process. signature ( Alphanumeric max: 200) 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. (Please refer to section Signature for more details). fort_id ( Numeric max: 20) 149295435400084008 The order\u2019s unique reference returned by our system. payment_option Alpha Max: 10 - MASTERCARD - VISA - AMEX Payment option. order_description ( Alphanumeric max: 150) iPhone 6-S It holds the description of the order. customer_name ( Alpha max: 40) John Smith The customer\u2019s name. merchant_extra ( Alphanumeric Max: 999) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 ( Alphanumeric Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 ( Alphanumeric Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 ( Alphanumeric Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 ( Alphanumeric Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 ( Alphanumeric Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. expiry_date ( Numeric Max: 4) 2015 The card\u2019s expiry date. Example: 2105 card_number ( Numeric Max: 16) 400555 * *0001 The clear credit card\u2019s number. authorization_code ( Alphanumeric max: 100) P1000000000000372136 The authorization code returned from the 3rd party. response_message ( Alphanumeric max: 150) Please refer to section messages Message description of the response code. It returns according to the request language. Possible/ expected values: response_code ( Numeric Max: 5) 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (Numeric max: 2) Please refer to section statuses A two-digit numeric value that indicates the status of the transaction phone_number ( Alphanumeric max: 19) 00962797219966 The customer\u2019s phone number. settlement_reference ( Alphanumeric max: 34) XYZ9239-yu898 The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones","title":"Recurring Parameters"},{"location":"recurringparameters/#recurring-transactions-request-parameters","text":"ATTRIBUTES Possible/Expected Values or examples Description command ( Alpha Mandatory max: 20) PURCHASE command access_code ( Alphanumeric Mandatory max: 20) zx0IPmPy5jp1vAz Access code merchant_identifier ( Alphanumeric Mandatory max: 20) CycHZxVj The ID of the Merchant. merchant_reference ( Alphanumeric Mandatory max: 40) XYZ9239-yu898 The Merchant\u2019s unique order number. Special characters: - _ . amount ( Numeric Mandatory max: 10) 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount. currency (Alpha Mandatory max: 3) AED The currency of the transaction\u2019s amount in ISO code 3. language ( Alpha Mandatory max: 2) en / ar The checkout page and messages language. customer_email (Alphanumeric Mandatory max: 254) customer@domain.com The customer\u2019s email. Special characters: _ - . @ + eci (Alpha Mandatory max: 16) RECURRING Ecommerce indicator. token_name ( Alphanumeric Mandatory max: 100) Op9Vmp The Token received from the Tokenization process. Special characters: _ - . @ signature ( Alphanumeric Mandatory max: 200) 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. (Please refer to section Signature for more details). payment_option ( Alpha Optional Max: 10) -MASTERCARD - VISA - AMEX Payment option. Possible/ expected values: - MASTERCARD - VISA - AMEX order_description ( Alphanumeric Optional max: 150) iPhone 6-S It holds the description of the order. Special characters: ' / . _ - # : $ Space customer_name ( Alpha Optional max: 40) John Smith The customer\u2019s name. Special characters: _ \\ / - . ' Space merchant_extra ( Alphanumeric Optional Max: 999) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Special characters: . ; / _ - , ' @ merchant_extra1 ( Alphanumeric Optional Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Special characters: . ; / _ - , ' @ merchant_extra2 ( Alphanumeric Optional Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Special characters: . ; / _ - , ' @ merchant_extra3 ( Alphanumeric Optional Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Special characters: . ; / _ - , ' @ merchant_extra4 ( Alphanumeric Optional Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Special characters: . ; / _ - , ' @ merchant_extra5 ( Alphanumeric Optional Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. Special characters: . ; / _ - , ' @ phone_number ( Alphanumeric Optional max: 19) 00962797219966 The customer\u2019s phone number. Special characters: + - ( ) Space settlement_reference ( Alphanumeric Optional max: 34) XYZ9239-yu898 The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Special characters: - _ . Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"Recurring Transactions Request Parameters"},{"location":"recurringparameters/#recurring-transaction-response","text":"ATTRIBUTES Possible/Expected values or Example Description command ( Alpha max: 20) PURCHASE command. access_code ( Alphanumeric max: 20) zx0IPmPy5jp1vAz Access code. merchant_identifier ( Alphanumeric max: 20) CycHZxVj The ID of the Merchant. merchant_reference ( Alphanumeric max: 40) XYZ9239-yu898 The Merchant\u2019s unique order number. amount ( Numeric max: 10) 10000 The transaction\u2019s amount. currency ( Alpha max: 3) AED The currency of the transaction\u2019s amount in ISO code 3. language ( Alpha max: 2) en / ar The checkout page and messages language. customer_email ( Alphanumeric max: 254) customer@domain.com The customer\u2019s email. eci (Alpha max: 16) RECURRING Ecommerce indicator. token_name ( Alphanumeric max: 100) Op9Vmp The Token received from the Tokenization process. signature ( Alphanumeric max: 200) 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. (Please refer to section Signature for more details). fort_id ( Numeric max: 20) 149295435400084008 The order\u2019s unique reference returned by our system. payment_option Alpha Max: 10 - MASTERCARD - VISA - AMEX Payment option. order_description ( Alphanumeric max: 150) iPhone 6-S It holds the description of the order. customer_name ( Alpha max: 40) John Smith The customer\u2019s name. merchant_extra ( Alphanumeric Max: 999) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 ( Alphanumeric Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 ( Alphanumeric Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 ( Alphanumeric Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 ( Alphanumeric Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 ( Alphanumeric Max: 250) JohnSmith Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. expiry_date ( Numeric Max: 4) 2015 The card\u2019s expiry date. Example: 2105 card_number ( Numeric Max: 16) 400555 * *0001 The clear credit card\u2019s number. authorization_code ( Alphanumeric max: 100) P1000000000000372136 The authorization code returned from the 3rd party. response_message ( Alphanumeric max: 150) Please refer to section messages Message description of the response code. It returns according to the request language. Possible/ expected values: response_code ( Numeric Max: 5) 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (Numeric max: 2) Please refer to section statuses A two-digit numeric value that indicates the status of the transaction phone_number ( Alphanumeric max: 19) 00962797219966 The customer\u2019s phone number. settlement_reference ( Alphanumeric max: 34) XYZ9239-yu898 The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones","title":"Recurring Transaction Response"},{"location":"redirection/","text":"Once the customer's payment details are verified, the next payment process is the Redirection process. Integration process enables you to capture the payment details of the customer and then validating the same with the PayFORT server whereas the redirection process enables you to Authorize a Purchase . How it works? The Authorization operation holds the amount from the Customer\u2019s credit card for a period of time until you capture or void the transaction. If no capture or void transaction is processed during this period, the transaction will be voided automatically. In Purchase you will send one single request to the PayFORT server in order to authorize and capture the transaction amount. We offer you to Redirect your customer from your website to PayFORT\u2019s gateway page to fill out his credit card details during these operations. Looking to void a payment? You can void an authorized payment at any time. However, captured payments can only be refunded . Endpoints You can use the sandbox endpoint to test your payment processing page for redirection or you can use the production endpoint if you want to go live. SandBox POST https://sbcheckout.payfort.com/FortAPI/paymentPage Live POST https://checkout.payfort.com/FortAPI/paymentPage Parameters Submission Type When you design your form(html page ) you have to provide the Endpoints in the form method. Providing these endpoints in your page will redirect your request to the PayFORT server. The page can be designed in the programming language of your choice. But you have to include the below mentioned code in your html based form. Form Post Request. <form method=\u201cpost\u201d action=\u201chttps://sbcheckout.payfort.com/FortAPI/paymentPage\u201d id=\u201cform1\u201d name=\u201cform1\u201d> </form> The above code snippet is an HTML based form that will post a request to PayFORT serverand you are also required to submit parameters in the form so that PayFORT server can understand your request and process the same. However, If you are not familiar with HTML tags and forms then you can checkout this site . The parameters are mandatory and are required by PayFORT server to validate, authenticate and provide the tokens for processing of payment Visit the link to check the different parameters to be sent in a redirection request. Sample Request You can design your form in any programming language.Here is the sample request (written different languages) which is sent for authorizing a purchase. Php Python Ruby \u200b $requestParams = array( 'command' => 'AUTHORIZATION', 'access_code' => 'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier' => 'CycHZxVj', 'merchant_reference' => 'XYZ9239-yu898', 'amount' => '10000', 'currency' => 'AED', 'language' => 'en', 'customer_email' => 'test@payfort.com', 'signature' => '7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'order_description' => 'iPhone 6-S', ); import cgi requestParams = { 'command' => 'AUTHORIZATION', 'access_code' => 'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier' => 'CycHZxVj', 'merchant_reference' => 'XYZ9239-yu898', 'amount' => '10000', 'currency' => 'AED', 'language' => 'en', 'customer_email' => 'test@payfort.com', 'signature' => '7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'order_description' => 'iPhone 6-S', }; require 'cgi' requestParams = { 'command' => 'AUTHORIZATION', 'access_code' => 'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier' => 'CycHZxVj', 'merchant_reference' => 'XYZ9239-yu898', 'amount' => '10000', 'currency' => 'AED', 'language' => 'en', 'customer_email' => 'test@payfort.com', 'signature' => '7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'order_description' => 'iPhone 6-S', }; requestParams.each {|key, value| puts key +value ; } Sample code for redirection Here are the sample code for redirecting the request to PayFORT. Php Python Ruby \u200b $redirectUrl = 'https://sbcheckout.payfort.com/FortAPI/paymentPage'; echo \"<html xmlns='http://www.w3.org/1999/xhtml'>\\n<head></head>\\n<body>\\n\"; echo \"<form action='$redirectUrl' method='post' name='frm'>\\n\"; foreach ($requestParams as $a => $b) { echo \"\\t<input type='hidden' name='\".htmlentities($a).\"' value='\".htmlentities($b).\"'>\\n\"; } echo \"\\t<script type='text/javascript'>\\n\"; echo \"\\t\\tdocument.frm.submit();\\n\"; echo \"\\t</script>\\n\"; echo \"</form>\\n</body>\\n</html>\"; redirectUrl = 'https://sbcheckout.payfort.com/FortAPI/paymentPage'; print \"<html xmlns='http://www.w3.org/1999/xhtml'>\\n<head></head>\\n<body>\\n\"; print \"<form action='redirectUrl' method='post' name='frm'>\\n\"; for (slug, title) in requestParams.items(): print \"\\t<input type='hidden' name='\"+ cgi.escape(slug)+\"' value='\"+ cgi.escape(title)+\"'>\\n\"; print \"</form>\"; print \"\\t<script type='text/javascript'>\\n\"; print \"\\t\\tdocument.frm.submit();\\n\"; print \"\\t</script>\\n\"; print \"\\n</body>\\n</html>\"; redirectUrl = 'https://sbcheckout.payfort.com/FortAPI/paymentPage'; puts \"<html xmlns='http://www.w3.org/1999/xhtml'>\\n<head></head>\\n<body>\\n\"; puts \"<form action='redirectUrl' method='post' name='frm'>\\n\"; requestParams.each {|key, value| puts \"\\t<input type='hidden' name='\"+ CGI.escapeHTML(key)+\"' value='\"+ CGI.escapeHTML(value)+\"'>\\n\"; } puts \"</form>\\n\"; puts \"\\t<script type='text/javascript'>\\n\"; puts \"\\t\\tdocument.frm.submit();\\n\"; puts \"\\t</script>\\n\"; puts \"</body>\\n</html>\"; Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"What is redirection?"},{"location":"redirection/#how-it-works","text":"The Authorization operation holds the amount from the Customer\u2019s credit card for a period of time until you capture or void the transaction. If no capture or void transaction is processed during this period, the transaction will be voided automatically. In Purchase you will send one single request to the PayFORT server in order to authorize and capture the transaction amount. We offer you to Redirect your customer from your website to PayFORT\u2019s gateway page to fill out his credit card details during these operations. Looking to void a payment? You can void an authorized payment at any time. However, captured payments can only be refunded .","title":"How it works?"},{"location":"redirection/#endpoints","text":"You can use the sandbox endpoint to test your payment processing page for redirection or you can use the production endpoint if you want to go live. SandBox POST https://sbcheckout.payfort.com/FortAPI/paymentPage Live POST https://checkout.payfort.com/FortAPI/paymentPage","title":"Endpoints"},{"location":"redirection/#parameters-submission-type","text":"When you design your form(html page ) you have to provide the Endpoints in the form method. Providing these endpoints in your page will redirect your request to the PayFORT server. The page can be designed in the programming language of your choice. But you have to include the below mentioned code in your html based form. Form Post Request. <form method=\u201cpost\u201d action=\u201chttps://sbcheckout.payfort.com/FortAPI/paymentPage\u201d id=\u201cform1\u201d name=\u201cform1\u201d> </form> The above code snippet is an HTML based form that will post a request to PayFORT serverand you are also required to submit parameters in the form so that PayFORT server can understand your request and process the same. However, If you are not familiar with HTML tags and forms then you can checkout this site . The parameters are mandatory and are required by PayFORT server to validate, authenticate and provide the tokens for processing of payment Visit the link to check the different parameters to be sent in a redirection request.","title":"Parameters Submission Type"},{"location":"redirection/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"redirection/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"redirectionsparameters/","text":"Redirection Request and Response Parameters Authorization/Purchase Request Parameters command (String, mandatory) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic customer_email (alphanumeric, mandatory) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric, optional) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. payment_option (String, optional) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - SADAD (for Purchase operations only) - NAPS (for Purchase operations only) - KNET(for Purchase operations only) - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. sadad_olp (alphanumeric, optional) Maximum Length Example Special characters Description 12 SABBP2P_UAT2 @ . _ SADAD Online Payment ID Alias. The merchant sends this value if the OLP ID is collected on the merchant checkout. eci (String, optional) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. customer_ip (Alphanumeric, optional) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String, optional) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. merchant_extra (alphanumeric, optional) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. remember_me (alpha, optional) Maximum Length Possible/ expected values Description 2 -YES -No This parameter provides you with an indication to whether to save this token for the user based on the user selection. phone_number (numeric, optional) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric, optional) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. return_url (alphanumeric, optional) Maximum Length Example Special Characters Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page that will be displayed to the customer when the order is processed. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. Authorization/ Purchase Response command (String) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic customer_email (alphanumeric) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. payment_option (String) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - SADAD (for Purchase operations only) - NAPS (for Purchase operations only) - KNET(for Purchase operations only) - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. sadad_olp (alphanumeric) Maximum Length Example Special characters Description 12 SABBP2P_UAT2 @ . _ SADAD Online Payment ID Alias. The merchant sends this value if the OLP ID is collected on the merchant checkout. eci (String) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. order_description (Alphanumeric) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. customer_ip (Alphanumeric) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. merchant_extra (alphanumeric) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. remember_me (alpha) Maximum Length Possible/ expected values Description 2 -YES -No This parameter provides you with an indication to whether to save this token for the user based on the user selection. phone_number (numeric) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. return_url (alphanumeric) Maximum Length Example Special Characters Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page that will be displayed to the customer when the order is processed. fort_id (numeric) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. knet_ref_number (alphanumeric) Maximum Length Example Description 100 832911577112 The reference number of KNET. *In case of sending KNET payment option. third_party_transaction_number (alphanumeric) Maximum Length Example Description 50 9547069411183290 The third party transaction number. *In case of sending KNET payment option. authorization_code (alphanumeric) Maximum Length Example Description 100 P1000000000000372136 The authorization code returned from the 3rd party. response_message (alphanumeric) Maximum Length Possible/ expected values Description 150 Please refer to section messages The message description of the response code; it returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/ expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. card_holder_name (String) Maximum Length Example Description 50 John Smith The card holder name expiry_date (numeric) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric) Maximum Length Example Description 19 400555 * 0001 The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. AMEX payment option takes 15 digits card number. Otherwise, they take 16 digits card number. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Please refer to section Transactions Response Codes for more details about operation\u2019s statuses","title":"Redirections Parameters"},{"location":"redirectionsparameters/#redirection-request-and-response-parameters","text":"","title":"Redirection Request and Response Parameters"},{"location":"redirectionsparameters/#authorizationpurchase-request-parameters","text":"command (String, mandatory) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic customer_email (alphanumeric, mandatory) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric, optional) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. payment_option (String, optional) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - SADAD (for Purchase operations only) - NAPS (for Purchase operations only) - KNET(for Purchase operations only) - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. sadad_olp (alphanumeric, optional) Maximum Length Example Special characters Description 12 SABBP2P_UAT2 @ . _ SADAD Online Payment ID Alias. The merchant sends this value if the OLP ID is collected on the merchant checkout. eci (String, optional) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. customer_ip (Alphanumeric, optional) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String, optional) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. merchant_extra (alphanumeric, optional) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. remember_me (alpha, optional) Maximum Length Possible/ expected values Description 2 -YES -No This parameter provides you with an indication to whether to save this token for the user based on the user selection. phone_number (numeric, optional) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric, optional) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. return_url (alphanumeric, optional) Maximum Length Example Special Characters Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page that will be displayed to the customer when the order is processed. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"Authorization/Purchase  Request Parameters"},{"location":"redirectionsparameters/#authorization-purchase-response","text":"command (String) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic customer_email (alphanumeric) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. payment_option (String) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - SADAD (for Purchase operations only) - NAPS (for Purchase operations only) - KNET(for Purchase operations only) - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. sadad_olp (alphanumeric) Maximum Length Example Special characters Description 12 SABBP2P_UAT2 @ . _ SADAD Online Payment ID Alias. The merchant sends this value if the OLP ID is collected on the merchant checkout. eci (String) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. order_description (Alphanumeric) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. customer_ip (Alphanumeric) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. merchant_extra (alphanumeric) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. remember_me (alpha) Maximum Length Possible/ expected values Description 2 -YES -No This parameter provides you with an indication to whether to save this token for the user based on the user selection. phone_number (numeric) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. return_url (alphanumeric) Maximum Length Example Special Characters Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page that will be displayed to the customer when the order is processed. fort_id (numeric) Maximum Length Example Description 20 149295435400084008 The order\u2019s unique reference returned by our system. knet_ref_number (alphanumeric) Maximum Length Example Description 100 832911577112 The reference number of KNET. *In case of sending KNET payment option. third_party_transaction_number (alphanumeric) Maximum Length Example Description 50 9547069411183290 The third party transaction number. *In case of sending KNET payment option. authorization_code (alphanumeric) Maximum Length Example Description 100 P1000000000000372136 The authorization code returned from the 3rd party. response_message (alphanumeric) Maximum Length Possible/ expected values Description 150 Please refer to section messages The message description of the response code; it returns according to the request language. response_code (numeric) Maximum Length Example Description 5 20064 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . status (numeric) Maximum Length Possible/ expected values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. card_holder_name (String) Maximum Length Example Description 50 John Smith The card holder name expiry_date (numeric) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric) Maximum Length Example Description 19 400555 * 0001 The masked credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. AMEX payment option takes 15 digits card number. Otherwise, they take 16 digits card number. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Please refer to section Transactions Response Codes for more details about operation\u2019s statuses","title":"Authorization/ Purchase Response"},{"location":"refund/","text":"Refund a payment This operation helps to return the entire amount of a transaction or part of it AFTER being captured. This operation can only be performed after the purchase has been authorized and payment has been captured. The request Use the details below to set up your request. Endpoints Live POST https://paymentservices.payfort.com/FortAPI/paymentApi Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi Request example Check out the request parameters by visiting this link Sample Request Here are the sample request you are required to send authorizing a purchase. Php Python Ruby Java cURL \u200b error_reporting(E_ALL); ini_set('display_errors', '1'); $url = 'https://sbpaymentservices.payfort.com/FortAPI/paymentApi'; $arrData = array( 'command' => 'REFUND', 'access_code' => 'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier' => 'CycHZxVj', 'merchant_reference' => ' XYZ9239-yu898', 'amount' => '10000', 'currency' => 'AED', 'language' => 'en', 'signature' => '7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'fort_id' => '149295435400084008', 'order_description' => 'iPhone 6-S', ); $ch = curl_init( $url ); # Setup request to send json via POST. $data = json_encode($arrData); curl_setopt( $ch, CURLOPT_POSTFIELDS, $data ); curl_setopt( $ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); # Return response instead of printing. curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true ); # Send request. $result = curl_exec($ch); curl_close($ch); # Print response. echo \"<pre>$result</pre>\"; import urllib import urllib2 import json url = 'https://sbpaymentservices.payfort.com/FortAPI/paymentApi'; arrData = { 'command':'REFUND', 'access_code':'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier':'CycHZxVj', 'merchant_reference':' XYZ9239-yu898', 'amount':'10000', 'currency':'AED', 'language':'en', 'signature':'7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'fort_id':'149295435400084008', 'order_description':'iPhone 6-S', }; values = json.dumps(arrData) data = urllib.urlencode(values) req = urllib2.Request(url, data) response = urllib2.urlopen(req) page = response.read() print page + '\\n\\n' require 'json' require 'net/http' require 'net/https' require 'uri' require 'openssl' arrData = { 'command' => 'REFUND', 'access_code' => 'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier' => 'CycHZxVj', 'merchant_reference' => ' XYZ9239-yu898', 'amount' => '10000', 'currency' => 'AED', 'language' => 'en', 'signature' => '7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'fort_id' => '149295435400084008', 'order_description' => 'iPhone 6-S', }; arrData = arrData.to_json uri = URI.parse(\"https://sbpaymentservices.payfort.com/FortAPI/paymentApi\") http = Net::HTTP.new(uri.host, uri.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request = Net::HTTP::Post.new(\"/v1.1/auth\") request.add_field('Content-Type', 'application/json') request.body = arrData response = http.request(request) String jsonRequestString = \"{\\\"command\\\" : \\\"REFUND\\\" , \\\"access_code\\\" : \\\"zx0IPmPy5jp1vAz8Kpg7\\\", \\\"merchant_identifier\\\" : \\\"CycHZxVj\\\", \" + \"\\\"merchant_reference\\\" : \\\"XYZ9239-yu898\\\", \\\"amount\\\" : \\\"10000\\\", \\\"currency\\\" : \\\"AED\\\",\" + \"\\\"language\\\" : \\\"en\\\", \\\"signature\\\" : \\\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\\\", \" + \"\\\"fort_id\\\" : \\\"149295435400084008\\\", \\\"order_description\\\" : \\\"iPhone 6-S\\\"}\"; // Define and Initialize HttpClient HttpClient httpClient = HttpClientBuilder.create().build(); // Intialize HttpPOST with FORT Payment services URL HttpPost request = new HttpPost(\"https://sbpaymentservices.payfort.com/FortAPI/paymentApi\"); // Setup Http POST entity with JSON String StringEntity params = new StringEntity(jsonRequestString); // Setup request type as JSON request.addHeader(\"content-type\", \"application/json\"); request.setEntity(params); // Post request to FORT HttpResponse response = httpClient.execute(request); // Read response using StringBuilder StringBuilder sb = new StringBuilder(); BufferedReader reader = new BufferedReader(new InputStreamReader( response.getEntity().getContent()), 65728); String line = null; while ((line = reader.readLine()) != null) { sb.append(line); } // Print response System.out.println(sb.toString()); curl -H \"Content-Type: application/json\" -d '{\"command\":\"REFUND\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239-yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"fort_id\":\"149295435400084008\", \"order_description\":\"iPhone6-S\"}' https://sbpaymentservices.payfort.com/FortAPI/paymentApi The response If you receive status code 20064 with status code 04 it means your request for refund has been accepted by the PayFort Server. The response sent by the server will be in the format of JSON. Response examples \u200b json {\"command\":\"REFUND\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239-yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"fort_id\":\"149295435400084008\", \"order_description\":\"iPhone 6-S\", \"response_message\":\"Success\", \"response_code\":\"20064\", status\":\"04\" } You can check out various transaction codes by visiting this link Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Refund Payment"},{"location":"refund/#refund-a-payment","text":"This operation helps to return the entire amount of a transaction or part of it AFTER being captured. This operation can only be performed after the purchase has been authorized and payment has been captured.","title":"Refund a payment"},{"location":"refund/#the-request","text":"Use the details below to set up your request.","title":"The request"},{"location":"refund/#endpoints","text":"","title":"Endpoints"},{"location":"refund/#live","text":"POST https://paymentservices.payfort.com/FortAPI/paymentApi","title":"Live"},{"location":"refund/#sandbox","text":"POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi","title":"Sandbox"},{"location":"refund/#request-example","text":"Check out the request parameters by visiting this link","title":"Request example"},{"location":"refund/#the-response","text":"If you receive status code 20064 with status code 04 it means your request for refund has been accepted by the PayFort Server. The response sent by the server will be in the format of JSON.","title":"The response"},{"location":"refund/#response-examples","text":"\u200b json {\"command\":\"REFUND\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239-yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"fort_id\":\"149295435400084008\", \"order_description\":\"iPhone 6-S\", \"response_message\":\"Success\", \"response_code\":\"20064\", status\":\"04\" } You can check out various transaction codes by visiting this link","title":"Response examples"},{"location":"refund/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"refund/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"reportingapi/","text":"What is Data Mine (Reporting API)? For retail merchants like you biggest dilemma they face is to download a customized reports. These customized reports includes sales reports, transaction reports, recurring payment reports, bulk sales reports etc. If you are planning to develop your own solution then you can easily use the PayFORT's easy to use reporting API to generate your own customized reports. The Reporting API provides you the feature to generate misc.. reports that can be customized as per your business requirements. You can specify the columns to be included and filters, then download the generated report. The report is limited to 200,000 transactions. How it Works? When you are developing the solution for report generation purpose then you need to send request to the PayFORT server using the Endpoints . There will be two requests ( Generate Report and Download Report ) that you will be sending to the PayFORT server. Following steps describes the way Reporting API works: You will submit Generate Report request for report generation. This request also allows you to specify the filters and columns to be included in the downloaded report. The PayFORT server returns the Generate Report response. You will then submit the Download Report request using the same merchant reference which was used to submit Generate Report request Endpoints You can use these PayFORT endpoints for the purpose of testing and going live. If you don't have test account then you can use this link to signup for the test account else you can directly signup for the live account by visiting this link Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/reportingApi Live POST https://paymentservices.payfort.com/FortAPI/reportingApi Parameters Submission Type While submitting your request to PayFORT server using the Endpoints you need to pass parameters in your request. The parameters that you will pass to the server in your request should be REST POST request using JSON Format . Both the requests Generate Report and Download Report will use set of parameters including the column parameters, filter parameters and the key parameters. Generate Report Request Since you will be submitting REST POST using JSON Format, you can refer to the given JSON sample for creating a Generate Report request. The JSON sample also shows the parameters that are required to be sent along the request. Sample JSON Request { \"query_command\": \"GENERATE_REPORT\", \"access_code\": \"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\": \"CycHZxVj\", \"merchant_reference\": \"XYZ9239-yu898\", \"from_date\": \"2017-08-03T00:00:01+03:00\", \"to_date\": \"2017-08-03T23:59:59+03:00\", \"response_format\": \"JSON\", \"language\": \"en\", \"columns\": [ \"order_description\", \"customer_ip\", \"eci\", \"geolocation_ip\", \"merchant_reference\", \"card_holder_name\", \"currency\", \"amount\", \"payment_option\", \"fort_id\", \"customer_email\", \"customer_name\", \"operation\", ], \"filters\": [ { \"key\": \"currency\", \"value\": \"USD\" }, { \"key\": \"payment_option\", \"value\": \"VISA\" } ], \"signature\": \"03a36d58acfc611f521528f2039a2228031d7ae4248d95181f2a24cfbe9f7865\" } The above JSON sample is for information purpose and you need to check out the columns parameters, filter parameters and the key parameters (passed within the filters parameters as key value in the above JSON sample) to select the parameters you need to pass in your request. Columns Parameter Below is the sample of various column parameters which you can chose to pass in your request as a list. The list is surrounded by [] (square brackets) which is JSON based list. The list which you pass in your request will generate the data under the respective columns (passed as a list in the generate and download reports). Sample Column Parameters in JSON's List Format [ \"fort_id\", \"merchant_reference\", \"authorization_code\", \"customer_name\", \"customer_ip\", \"geolocation_ip\", \"customer_email\", \"acquirer_name\", \"payment_option\", \"channel\", \"transaction_date\", \"card_number\", \"expiry_date\", \"card_holder_name\", \"amount\", \"currency\", \"card_bin\", \"eci\", \"operation\", \"token_name\", \"3ds_indicator\", \"fraud_indicator\", \"installments_indicator\", \"status\", \"response_code\", \"response_message\", \"third_party_message\", \"third_party_code\", \"order_date\", \"order_description\", \"acquirer_mid\", \"acquirer_response_code\", \"acquirer_response_message\", \"processor_response_code\", \"sadad_olp\", \"sadad_transaction_id\", \"payment_link_id\", \"Invoice_id\", \"digital_wallet\" ] Filter Parameters and Key Parameters [] [\"fort_id\", \"merchant_reference\", \"authorization_code\", \"customer_name\", \"customer_ip\", \"geolocation_ip\", \"customer_email\", \"acquirer_name\", \"payment_option\", \"channel\", \"transaction_date\", \"card_number\", \"expiry_date\", \"card_holder_name\", \"amount\", \"currency\", \"card_bin\", \"eci\", \"operation\", \"token_name\", \"3ds_indicator\", \"fraud_indicator\", \"installments_indicator\", \"status\", \"response_code\", \"response_message\", \"third_party_message\", \"third_party_code\", \"order_date\", \"order_description\", \"acquirer_mid\", \"acquirer_response_code\", \"acquirer_response_message\", \"processor_response_code\", \"sadad_olp\", \"sadad_transaction_id\", \"payment_link_id\", \"Invoice_id\", \"digital_wallet\" ]","title":"Data Mine(Reporting API)"},{"location":"reportingapi/#what-is-data-mine-reporting-api","text":"For retail merchants like you biggest dilemma they face is to download a customized reports. These customized reports includes sales reports, transaction reports, recurring payment reports, bulk sales reports etc. If you are planning to develop your own solution then you can easily use the PayFORT's easy to use reporting API to generate your own customized reports. The Reporting API provides you the feature to generate misc.. reports that can be customized as per your business requirements. You can specify the columns to be included and filters, then download the generated report. The report is limited to 200,000 transactions.","title":"What is Data Mine (Reporting API)?"},{"location":"reportingapi/#how-it-works","text":"When you are developing the solution for report generation purpose then you need to send request to the PayFORT server using the Endpoints . There will be two requests ( Generate Report and Download Report ) that you will be sending to the PayFORT server. Following steps describes the way Reporting API works: You will submit Generate Report request for report generation. This request also allows you to specify the filters and columns to be included in the downloaded report. The PayFORT server returns the Generate Report response. You will then submit the Download Report request using the same merchant reference which was used to submit Generate Report request","title":"How it Works?"},{"location":"reportingapi/#endpoints","text":"You can use these PayFORT endpoints for the purpose of testing and going live. If you don't have test account then you can use this link to signup for the test account else you can directly signup for the live account by visiting this link Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/reportingApi Live POST https://paymentservices.payfort.com/FortAPI/reportingApi","title":"Endpoints"},{"location":"reportingapi/#parameters-submission-type","text":"While submitting your request to PayFORT server using the Endpoints you need to pass parameters in your request. The parameters that you will pass to the server in your request should be REST POST request using JSON Format . Both the requests Generate Report and Download Report will use set of parameters including the column parameters, filter parameters and the key parameters.","title":"Parameters Submission Type"},{"location":"reportingapi/#generate-report-request","text":"Since you will be submitting REST POST using JSON Format, you can refer to the given JSON sample for creating a Generate Report request. The JSON sample also shows the parameters that are required to be sent along the request. Sample JSON Request { \"query_command\": \"GENERATE_REPORT\", \"access_code\": \"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\": \"CycHZxVj\", \"merchant_reference\": \"XYZ9239-yu898\", \"from_date\": \"2017-08-03T00:00:01+03:00\", \"to_date\": \"2017-08-03T23:59:59+03:00\", \"response_format\": \"JSON\", \"language\": \"en\", \"columns\": [ \"order_description\", \"customer_ip\", \"eci\", \"geolocation_ip\", \"merchant_reference\", \"card_holder_name\", \"currency\", \"amount\", \"payment_option\", \"fort_id\", \"customer_email\", \"customer_name\", \"operation\", ], \"filters\": [ { \"key\": \"currency\", \"value\": \"USD\" }, { \"key\": \"payment_option\", \"value\": \"VISA\" } ], \"signature\": \"03a36d58acfc611f521528f2039a2228031d7ae4248d95181f2a24cfbe9f7865\" } The above JSON sample is for information purpose and you need to check out the columns parameters, filter parameters and the key parameters (passed within the filters parameters as key value in the above JSON sample) to select the parameters you need to pass in your request. Columns Parameter Below is the sample of various column parameters which you can chose to pass in your request as a list. The list is surrounded by [] (square brackets) which is JSON based list. The list which you pass in your request will generate the data under the respective columns (passed as a list in the generate and download reports). Sample Column Parameters in JSON's List Format [ \"fort_id\", \"merchant_reference\", \"authorization_code\", \"customer_name\", \"customer_ip\", \"geolocation_ip\", \"customer_email\", \"acquirer_name\", \"payment_option\", \"channel\", \"transaction_date\", \"card_number\", \"expiry_date\", \"card_holder_name\", \"amount\", \"currency\", \"card_bin\", \"eci\", \"operation\", \"token_name\", \"3ds_indicator\", \"fraud_indicator\", \"installments_indicator\", \"status\", \"response_code\", \"response_message\", \"third_party_message\", \"third_party_code\", \"order_date\", \"order_description\", \"acquirer_mid\", \"acquirer_response_code\", \"acquirer_response_message\", \"processor_response_code\", \"sadad_olp\", \"sadad_transaction_id\", \"payment_link_id\", \"Invoice_id\", \"digital_wallet\" ] Filter Parameters and Key Parameters [] [\"fort_id\", \"merchant_reference\", \"authorization_code\", \"customer_name\", \"customer_ip\", \"geolocation_ip\", \"customer_email\", \"acquirer_name\", \"payment_option\", \"channel\", \"transaction_date\", \"card_number\", \"expiry_date\", \"card_holder_name\", \"amount\", \"currency\", \"card_bin\", \"eci\", \"operation\", \"token_name\", \"3ds_indicator\", \"fraud_indicator\", \"installments_indicator\", \"status\", \"response_code\", \"response_message\", \"third_party_message\", \"third_party_code\", \"order_date\", \"order_description\", \"acquirer_mid\", \"acquirer_response_code\", \"acquirer_response_message\", \"processor_response_code\", \"sadad_olp\", \"sadad_transaction_id\", \"payment_link_id\", \"Invoice_id\", \"digital_wallet\" ]","title":"Generate Report Request"},{"location":"sdktokenparameters/","text":"SDK Token Parameters Request Parameters service_command (String, mandatory) Maximum Length Possible/ expected values Special Character Description 20 SDK_TOKEN _ Command access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic device_id (alphanumeric, mandatory) Maximum Length Example Special characters Description 100 ffffffff-a9fa-0b44-7b27-29e70033c587 _ - . @ + A unique device identifier. Response Parameters service_command (String) Maximum Length Possible/ expected values Special Character Description 20 SDK_TOKEN _ Command access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic sdk_token (alphanumeric) Maximum Length Example Description 100 dwp78q3 A unique device identifier. response_message (alphanumeric) Maximum Length Possible/Expected Values Description 100 Possible/ expected values: Please refer to section messages Message description of the response code. It returns according to the request language. response_code (numeric) Maximum Length Possible/Expected Values Description 5 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . Message description of the response code. It returns according to the request language. status (numeric) Maximum Length Possible/Expected Values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones","title":"Mobile SDK Parameters"},{"location":"sdktokenparameters/#sdk-token-parameters","text":"","title":"SDK Token Parameters"},{"location":"sdktokenparameters/#request-parameters","text":"service_command (String, mandatory) Maximum Length Possible/ expected values Special Character Description 20 SDK_TOKEN _ Command access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic device_id (alphanumeric, mandatory) Maximum Length Example Special characters Description 100 ffffffff-a9fa-0b44-7b27-29e70033c587 _ - . @ + A unique device identifier.","title":"Request Parameters"},{"location":"sdktokenparameters/#response-parameters","text":"service_command (String) Maximum Length Possible/ expected values Special Character Description 20 SDK_TOKEN _ Command access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic sdk_token (alphanumeric) Maximum Length Example Description 100 dwp78q3 A unique device identifier. response_message (alphanumeric) Maximum Length Possible/Expected Values Description 100 Possible/ expected values: Please refer to section messages Message description of the response code. It returns according to the request language. response_code (numeric) Maximum Length Possible/Expected Values Description 5 Response Code carries the value of our system\u2019s response. *The code consists of five digits, the first 2 digits represent the response status , and the last 3 digits represent the response messages . Message description of the response code. It returns according to the request language. status (numeric) Maximum Length Possible/Expected Values Description 2 Please refer to section statuses A two-digit numeric value that indicates the status of the transaction. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones","title":"Response Parameters"},{"location":"subscription/","text":"","title":"Subscription"},{"location":"testing/","text":"Testing Our testing environment provides you with opportunity to test your integration. You can sign up for test account and get started with testing your integrations. Test Card Details You want to test a transaction but you don\u2019t have a credit card or user credentials for our other payments options? Well we\u2019ve got your back, here you can find card numbers for any type of test you wish to do. Credit Cards Card Type Number Expiry Date CVV/CVC Visa 4005550000000001 05/21 123 MasterCard 5123456789012346 05/21 123 AMEX 345678901234564 05/21 1234 3-D Secure Credit Cards Card Type Number Expiry Date CVV/CVC Visa 4557012345678902 05/21 123 MasterCard 5313581000123430 05/21 123 AMEX 374200000000004 05/21 1234 Debit Cards Card Type Number Expiry Date CVV/CVC MADA 5297412542005689 05/21 350 MEEZA 9818950527886700002 10/23 422 MEEZA 5078036221028566 09/23 143 Local Payment Methods Payment Option Number Expiry Date CVV/CVC Knet 0000000001 09/21 1234 Payment Option Card Number Expiry Date OTP PIN Naps 4215375500883243 06/21 1234 1234 Payment Option Payment Id Password OTP Sadad sadadOlpTest 1234 112358 Payment Option Number Card Type E-dirhamm 4724439901004942 Gold Card Digital Wallets PAYMENT OPTION Number Expiry Date CVV/CVC MasterPass 4000000000000002 05/21 123 Visa Checkout 4000000000000002 05/21 123","title":"Testing"},{"location":"testing/#testing","text":"Our testing environment provides you with opportunity to test your integration. You can sign up for test account and get started with testing your integrations.","title":"Testing"},{"location":"testing/#test-card-details","text":"You want to test a transaction but you don\u2019t have a credit card or user credentials for our other payments options? Well we\u2019ve got your back, here you can find card numbers for any type of test you wish to do.","title":"Test Card Details"},{"location":"tokenization/","text":"","title":"Tokenization (Safe)"},{"location":"transactioncodes/","text":"Transaction Response Codes The Response code is made up of 5 digits; a combination of a 2-digit Status (Please see section Status Codes ) and a 3-digit Message (Please see section message codes ) Status Codes Status Code Description 00 Invalid Request. 01 Order Stored. 02 Authorization Success. 03 Authorization Failed. 04 Capture Success. 05 Capture failed. 06 Refund Success. 07 Refund Failed. 08 Authorization Voided Successfully. 09 Authorization Void Failed. 10 Incomplete. 11 Check status Failed. 12 Check status success. 13 Purchase Failure. 14 Purchase Success. 15 Uncertain Transaction. 17 Tokenization failed. 18 Tokenization success. 19 Transaction pending. 20 On hold. 21 SDK Token creation failure. 22 SDK Token creation success. 23 Failed to process Digital Wallet service. 24 Digital wallet order processed successfully. 27 Check card balance failed. 28 Check card balance success. 29 Redemption failed. 30 Redemption success. 31 Reverse Redemption transaction failed. 32 Reverse Redemption transaction success. 40 Transaction In review. 42 Currency conversion success. 43 Currency conversion failed. 44 3ds success. 45 3ds failed. 46 Bill creation success. 47 Bill creation failed. 48 Generating invoice payment link success. 49 Generating invoice payment link failed. 50 Batch file upload successfully. 51 Upload batch file failed. 52 Token created successfully. 53 Token creation failed. 54 Get Tokens Success. 55 Get Tokens Failed. 56 Reporting Request Success. 57 Reporting Request Failed. 58 Token updated successfully. 59 Token updated failed. 62 Get Installment Plans Successfully. 63 Get Installment plans Failed. 66 Delete Token Success. 70 Get batch results successfully. 71 Get batch results failed. 72 Batch processing success. 73 Batch processing failed. 74 Bank transfer successfully. 75 Bank transfer failed. 76 Batch validation successfully. 77 Batch validation failed. 80 Credit card verified successfully. 81 Failed to verify credit card. 88 ValU OTP Generate Success. 89 ValU OTP Generate Failure Status 90 Customer Verify Success. 91 Customer Verify Failed. 92 Verify OTP success. 93 Failed OTP verify. Message Codes Message Code Message Value 000 Success. 001 Missing parameter. 002 Invalid parameter format. 003 Payment option is not available for this merchant\u2019s account. 004 Invalid command. 005 Invalid amount. 006 Technical problem. 007 Duplicate order number. 008 Signature mismatch. 009 Invalid merchant identifier. 010 Invalid access code. 011 Order not saved. 012 Card expired. 013 Invalid currency. 014 Inactive payment option. 015 Inactive merchant account. 016 Invalid card number. 017 Operation not allowed by the acquirer. 018 Operation not allowed by processor. 019 Inactive acquirer. 020 Processor is inactive. 021 Payment option deactivated by acquirer. 023 Currency not accepted by acquirer. 024 Currency not accepted by processor. 025 Processor integration settings are missing. 026 Acquirer integration settings are missing. 027 Invalid extra parameters. 029 Insufficient funds. 030 Authentication failed. 031 Invalid issuer. 032 Invalid parameter length. 033 Parameter value not allowed. 034 Operation not allowed. 035 Order created successfully. 036 Order not found. 037 Missing return URL. 038 Token service inactive. 039 No active payment option found. 040 Invalid transaction source. 042 Operation amount exceeds the authorized amount. 043 Inactive Operation. 044 Token name does not exist. 046 Channel is not configured for the selected payment option. 047 Order already processed. 048 Operation amount exceeds captured amount. 049 Operation not valid for this payment option. 050 Merchant per transaction limit exceeded. 051 Technical error. 052 Consumer is not in OLP database. 053 Merchant is not found in OLP Engine DB. 054 Transaction cannot be processed at this moment. 055 OLP ID Alias is not valid. Please contact your bank. 056 OLP ID Alias does not exist. Please enter a valid OLP ID Alias. 057 Transaction amount exceeds the daily transaction limit. 058 Transaction amount exceeds the per transaction limit. 059 Merchant Name and SADAD Merchant ID do not match. 060 The entered OLP password is incorrect. Please provide a valid password. 062 Token has been created. 063 Token has been updated. 064 3-D Secure check requested. 065 Transaction waiting for customer\u2019s action. 066 Merchant reference already exists. 067 Dynamic Descriptor not configured for selected payment option. 068 SDK service is inactive. 069 Mapping not found for the given error code. 070 device_id mismatch. 071 Failed to initiate connection. 072 Transaction has been cancelled by the consumer. 073 Invalid request format. 074 Transaction failed. 075 Transaction failed. 076 Transaction not found in OLP. 077 Error transaction code not found. 078 Failed to check fraud screen. 079 Transaction challenged by fraud rules. 080 Invalid payment option. 082 Inactive fraud service. 083 Unexpected user behavior. 084 Transaction amount is either bigger than maximum or less than minimum amount accepted for the selected plan. 086 Installment plan is not configured for Merchant account. 087 Card BIN does not match accepted issuer bank. 088 Token name was not created for this transaction. 089 Failed to retrieve digital wallet details. 090 Transaction in review. 092 Invalid issuer code. 093 service inactive. 094 Invalid Plan Code. 095 Inactive Issuer. 096 Inactive Plan. 097 Operation not allowed for service. 098 Invalid or expired call_id. 099 Failed to execute service. 100 Invalid expiry date. 101 Bill number not found. 102 Apple Pay order has been expired. 103 Duplicate subscription ID. 104 No plans valid for request. 105 Invalid bank code. 106 Inactive bank. 107 Invalid transfer_date. 110 Contradicting parameters, please refer to the integration guide. 111 Service not applicable for payment option. 112 Service not applicable for payment operation. 113 Service not applicable for e-commerce indicator. 114 Token already exist. 115 Expired invoice payment link. 116 Inactive notification type. 117 Invoice payment link already processed. 118 Order bounced. 119 Request dropped. 120 Payment link terms and conditions not found. 121 Card number is not verified. 122 Invalid date interval. 123 You have exceeded the maximum number of attempts. 124 Account successfully created. 125 Invoice already paid. 126 Duplicate invoice ID. 127 Merchant reference is not generated yet. 128 The generated report is still pending, you can\u2019t download it now. 129 \u201cDownloaded report\u201d queue is full. Wait till its empty again. 134 Your search results have exceeded the maximum number of records. 136 The Batch file validation is failed. 137 Invalid Batch file execution date. 138 The Batch file still under validation. 140 The Batch file still under processing. 141 The Batch reference does not exist. 142 The Batch file header is invalid. 144 Invalid Batch file. 146 The Batch reference is already exist. 147 The Batch process request has been received. 148 Batch file will be processed. 149 Payment link request id not found. 150 Payment link is already open. 151 3ds_id does not exist. 152 3Ds verification doesn\u2019t match the request details. 154 You have reached the maximum number of upload retries. 155 The upload retries is not configured. 662 Operation not allowed. The specified order is not confirmed yet. 666 Transaction declined. 773 Transaction closed. 777 The transaction has been processed, but failed to receive confirmation. 778 Session timed-out. 779 Transformation error. 780 Transaction number transformation error. 781 Message or response code transformation error. 783 Installments service inactive. 784 Transaction still processing you can\u2019t make another transaction. 785 Transaction blocked by fraud check. 787 Failed to authenticate the user. 788 Invalid bill number. 789 Expired bill number. 790 Invalid bill type code. Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Transactioncodes"},{"location":"transactioncodes/#transaction-response-codes","text":"The Response code is made up of 5 digits; a combination of a 2-digit Status (Please see section Status Codes ) and a 3-digit Message (Please see section message codes )","title":"Transaction Response Codes"},{"location":"transactioncodes/#status-codes","text":"Status Code Description 00 Invalid Request. 01 Order Stored. 02 Authorization Success. 03 Authorization Failed. 04 Capture Success. 05 Capture failed. 06 Refund Success. 07 Refund Failed. 08 Authorization Voided Successfully. 09 Authorization Void Failed. 10 Incomplete. 11 Check status Failed. 12 Check status success. 13 Purchase Failure. 14 Purchase Success. 15 Uncertain Transaction. 17 Tokenization failed. 18 Tokenization success. 19 Transaction pending. 20 On hold. 21 SDK Token creation failure. 22 SDK Token creation success. 23 Failed to process Digital Wallet service. 24 Digital wallet order processed successfully. 27 Check card balance failed. 28 Check card balance success. 29 Redemption failed. 30 Redemption success. 31 Reverse Redemption transaction failed. 32 Reverse Redemption transaction success. 40 Transaction In review. 42 Currency conversion success. 43 Currency conversion failed. 44 3ds success. 45 3ds failed. 46 Bill creation success. 47 Bill creation failed. 48 Generating invoice payment link success. 49 Generating invoice payment link failed. 50 Batch file upload successfully. 51 Upload batch file failed. 52 Token created successfully. 53 Token creation failed. 54 Get Tokens Success. 55 Get Tokens Failed. 56 Reporting Request Success. 57 Reporting Request Failed. 58 Token updated successfully. 59 Token updated failed. 62 Get Installment Plans Successfully. 63 Get Installment plans Failed. 66 Delete Token Success. 70 Get batch results successfully. 71 Get batch results failed. 72 Batch processing success. 73 Batch processing failed. 74 Bank transfer successfully. 75 Bank transfer failed. 76 Batch validation successfully. 77 Batch validation failed. 80 Credit card verified successfully. 81 Failed to verify credit card. 88 ValU OTP Generate Success. 89 ValU OTP Generate Failure Status 90 Customer Verify Success. 91 Customer Verify Failed. 92 Verify OTP success. 93 Failed OTP verify.","title":"Status Codes"},{"location":"transactioncodes/#message-codes","text":"Message Code Message Value 000 Success. 001 Missing parameter. 002 Invalid parameter format. 003 Payment option is not available for this merchant\u2019s account. 004 Invalid command. 005 Invalid amount. 006 Technical problem. 007 Duplicate order number. 008 Signature mismatch. 009 Invalid merchant identifier. 010 Invalid access code. 011 Order not saved. 012 Card expired. 013 Invalid currency. 014 Inactive payment option. 015 Inactive merchant account. 016 Invalid card number. 017 Operation not allowed by the acquirer. 018 Operation not allowed by processor. 019 Inactive acquirer. 020 Processor is inactive. 021 Payment option deactivated by acquirer. 023 Currency not accepted by acquirer. 024 Currency not accepted by processor. 025 Processor integration settings are missing. 026 Acquirer integration settings are missing. 027 Invalid extra parameters. 029 Insufficient funds. 030 Authentication failed. 031 Invalid issuer. 032 Invalid parameter length. 033 Parameter value not allowed. 034 Operation not allowed. 035 Order created successfully. 036 Order not found. 037 Missing return URL. 038 Token service inactive. 039 No active payment option found. 040 Invalid transaction source. 042 Operation amount exceeds the authorized amount. 043 Inactive Operation. 044 Token name does not exist. 046 Channel is not configured for the selected payment option. 047 Order already processed. 048 Operation amount exceeds captured amount. 049 Operation not valid for this payment option. 050 Merchant per transaction limit exceeded. 051 Technical error. 052 Consumer is not in OLP database. 053 Merchant is not found in OLP Engine DB. 054 Transaction cannot be processed at this moment. 055 OLP ID Alias is not valid. Please contact your bank. 056 OLP ID Alias does not exist. Please enter a valid OLP ID Alias. 057 Transaction amount exceeds the daily transaction limit. 058 Transaction amount exceeds the per transaction limit. 059 Merchant Name and SADAD Merchant ID do not match. 060 The entered OLP password is incorrect. Please provide a valid password. 062 Token has been created. 063 Token has been updated. 064 3-D Secure check requested. 065 Transaction waiting for customer\u2019s action. 066 Merchant reference already exists. 067 Dynamic Descriptor not configured for selected payment option. 068 SDK service is inactive. 069 Mapping not found for the given error code. 070 device_id mismatch. 071 Failed to initiate connection. 072 Transaction has been cancelled by the consumer. 073 Invalid request format. 074 Transaction failed. 075 Transaction failed. 076 Transaction not found in OLP. 077 Error transaction code not found. 078 Failed to check fraud screen. 079 Transaction challenged by fraud rules. 080 Invalid payment option. 082 Inactive fraud service. 083 Unexpected user behavior. 084 Transaction amount is either bigger than maximum or less than minimum amount accepted for the selected plan. 086 Installment plan is not configured for Merchant account. 087 Card BIN does not match accepted issuer bank. 088 Token name was not created for this transaction. 089 Failed to retrieve digital wallet details. 090 Transaction in review. 092 Invalid issuer code. 093 service inactive. 094 Invalid Plan Code. 095 Inactive Issuer. 096 Inactive Plan. 097 Operation not allowed for service. 098 Invalid or expired call_id. 099 Failed to execute service. 100 Invalid expiry date. 101 Bill number not found. 102 Apple Pay order has been expired. 103 Duplicate subscription ID. 104 No plans valid for request. 105 Invalid bank code. 106 Inactive bank. 107 Invalid transfer_date. 110 Contradicting parameters, please refer to the integration guide. 111 Service not applicable for payment option. 112 Service not applicable for payment operation. 113 Service not applicable for e-commerce indicator. 114 Token already exist. 115 Expired invoice payment link. 116 Inactive notification type. 117 Invoice payment link already processed. 118 Order bounced. 119 Request dropped. 120 Payment link terms and conditions not found. 121 Card number is not verified. 122 Invalid date interval. 123 You have exceeded the maximum number of attempts. 124 Account successfully created. 125 Invoice already paid. 126 Duplicate invoice ID. 127 Merchant reference is not generated yet. 128 The generated report is still pending, you can\u2019t download it now. 129 \u201cDownloaded report\u201d queue is full. Wait till its empty again. 134 Your search results have exceeded the maximum number of records. 136 The Batch file validation is failed. 137 Invalid Batch file execution date. 138 The Batch file still under validation. 140 The Batch file still under processing. 141 The Batch reference does not exist. 142 The Batch file header is invalid. 144 Invalid Batch file. 146 The Batch reference is already exist. 147 The Batch process request has been received. 148 Batch file will be processed. 149 Payment link request id not found. 150 Payment link is already open. 151 3ds_id does not exist. 152 3Ds verification doesn\u2019t match the request details. 154 You have reached the maximum number of upload retries. 155 The upload retries is not configured. 662 Operation not allowed. The specified order is not confirmed yet. 666 Transaction declined. 773 Transaction closed. 777 The transaction has been processed, but failed to receive confirmation. 778 Session timed-out. 779 Transformation error. 780 Transaction number transformation error. 781 Message or response code transformation error. 783 Installments service inactive. 784 Transaction still processing you can\u2019t make another transaction. 785 Transaction blocked by fraud check. 787 Failed to authenticate the user. 788 Invalid bill number. 789 Expired bill number. 790 Invalid bill type code.","title":"Message Codes"},{"location":"transactioncodes/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"trusted/","text":"What is Trusted? With the help of Trusted channel PCI certified Merchants are able to collect their customers' credit card details on the checkout page. The Merchants are able to process (Ecommerce, Recurring and MOTO) transactions through the FORT using clear card data and credit card tokens. Trusted Channel Endpoints Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi For more details on input parameters please visit the link Parameters Submission Type REST POST request using JSON. Request Example Placeholder for sample code. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. The Response You will receive sample response from the payfort server in JSON format as shown below: {\"command\":\"PURCHASE\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"customer_email\":\"customer@domain.com\", \"eci\":\"MOTO\", \"expiry_date\":\"2105\", \"card_number\":\"400555*****0001\", \"customer_ip\":\"192.178.1.10\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"card_holder_name\":\" John Smith\", \"token_name\":\"Op9Vmp\", \"order_description\":\"iPhone6-S\", \"fort_id\":\"149295435400084008\", \"payment_option\":\"MASTERCARD\", \"customer_name\": \"John Smith\", \"merchant_extra\":\"JohnSmith\", \"merchant_extra1\":\"JohnSmith\", \"merchant_extra2\":\"JohnSmith\", \"merchant_extra3\":\"JohnSmith\", \"merchant_extra4\":\"JohnSmith\", \"merchant_extra5\":\"JohnSmith\", \"authorization_code\":\"P1000000000000372136\", \"response_message\":\"Success\", \"response_code\":\"20064\", \"status\":\"04\", \"3ds_url\":\"http://www.3dsecure.com\", \"phone_number\": \"00962797219966\", \"settlement_reference\":\"XYZ9239-yu898\" } Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones. Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Trusted"},{"location":"trusted/#what-is-trusted","text":"With the help of Trusted channel PCI certified Merchants are able to collect their customers' credit card details on the checkout page. The Merchants are able to process (Ecommerce, Recurring and MOTO) transactions through the FORT using clear card data and credit card tokens.","title":"What is Trusted?"},{"location":"trusted/#trusted-channel-endpoints","text":"Sandbox POST https://sbpaymentservices.PayFort.com/FortAPI/paymentApi Live POST https://paymentservices.PayFort.com/FortAPI/paymentApi For more details on input parameters please visit the link","title":"Trusted Channel Endpoints"},{"location":"trusted/#parameters-submission-type","text":"REST POST request using JSON. Request Example Placeholder for sample code. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"Parameters Submission Type"},{"location":"trusted/#the-response","text":"You will receive sample response from the payfort server in JSON format as shown below: {\"command\":\"PURCHASE\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239yu898\", \"amount\":\"10000\", \"currency\":\"AED\", \"language\":\"en\", \"customer_email\":\"customer@domain.com\", \"eci\":\"MOTO\", \"expiry_date\":\"2105\", \"card_number\":\"400555*****0001\", \"customer_ip\":\"192.178.1.10\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"card_holder_name\":\" John Smith\", \"token_name\":\"Op9Vmp\", \"order_description\":\"iPhone6-S\", \"fort_id\":\"149295435400084008\", \"payment_option\":\"MASTERCARD\", \"customer_name\": \"John Smith\", \"merchant_extra\":\"JohnSmith\", \"merchant_extra1\":\"JohnSmith\", \"merchant_extra2\":\"JohnSmith\", \"merchant_extra3\":\"JohnSmith\", \"merchant_extra4\":\"JohnSmith\", \"merchant_extra5\":\"JohnSmith\", \"authorization_code\":\"P1000000000000372136\", \"response_message\":\"Success\", \"response_code\":\"20064\", \"status\":\"04\", \"3ds_url\":\"http://www.3dsecure.com\", \"phone_number\": \"00962797219966\", \"settlement_reference\":\"XYZ9239-yu898\" } Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones.","title":"The Response"},{"location":"trusted/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"trusted/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"trustedchannelparameters/","text":"Trusted Channel Request\\Response Request Parameters command (String, mandatory) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic customer_email (alphanumeric, mandatory) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. expiry_date (numeric, mandatory) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric, mandatory) Maximum Length Example Description 19 4005550000000001 The clear credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. card_security_code (numeric, mandatory) Maximum Length Example Description 4 123 The clear card security code collect on the merchant\u2019s checkout page. It\u2019s ONLY mandatory in the ecommerce requests. Only AMEX accepts card security code of 4 digits. card_holder_name (String, mandatory) Maximum Length Example Special Characters Description 50 John Smith ' - . The card holder name. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric, optional) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. payment_option (String, optional) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. eci (String, optional) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. customer_ip (Alphanumeric, optional) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String, optional) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. merchant_extra (alphanumeric, optional) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. remember_me (alpha, optional) Maximum Length Possible/ expected values Description 2 -YES -No This parameter provides you with an indication to whether to save this token for the user based on the user selection. phone_number (numeric, optional) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric, optional) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. return_url (alphanumeric, optional) Maximum Length Example Special Characters Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page that will be displayed to the customer when the order is processed. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. Trusted Channel - Response command (String) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic customer_email (alphanumeric) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. expiry_date (numeric) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric) Maximum Length Example Description 19 4005550000000001 The clear credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. card_security_code (numeric) Maximum Length Example Description 4 123 The clear card security code collect on the merchant\u2019s checkout page. It\u2019s ONLY mandatory in the ecommerce requests. Only AMEX accepts card security code of 4 digits. card_holder_name (String) Maximum Length Example Special Characters Description 50 John Smith ' - . The card holder name. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. payment_option (String) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. eci (String) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. order_description (Alphanumeric) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. customer_ip (Alphanumeric) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. merchant_extra (alphanumeric) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. remember_me (alpha) Maximum Length Possible/ expected values Description 2 -YES -No This parameter provides you with an indication to whether to save this token for the user based on the user selection. phone_number (numeric) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. return_url (alphanumeric) Maximum Length Example Special Characters Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page that will be displayed to the customer when the order is processed. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones.","title":"Trusted Channel Request\\Response"},{"location":"trustedchannelparameters/#trusted-channel-requestresponse","text":"","title":"Trusted Channel Request\\Response"},{"location":"trustedchannelparameters/#request-parameters","text":"command (String, mandatory) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. access_code (alphanumeric, mandatory) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric, mandatory) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric, mandatory) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric, mandatory) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String, mandatory) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String, mandatory) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic customer_email (alphanumeric, mandatory) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. expiry_date (numeric, mandatory) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric, mandatory) Maximum Length Example Description 19 4005550000000001 The clear credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. card_security_code (numeric, mandatory) Maximum Length Example Description 4 123 The clear card security code collect on the merchant\u2019s checkout page. It\u2019s ONLY mandatory in the ecommerce requests. Only AMEX accepts card security code of 4 digits. card_holder_name (String, mandatory) Maximum Length Example Special Characters Description 50 John Smith ' - . The card holder name. signature (alphanumeric, mandatory) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric, optional) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. payment_option (String, optional) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. eci (String, optional) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. order_description (Alphanumeric, optional) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. customer_ip (Alphanumeric, optional) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String, optional) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. merchant_extra (alphanumeric, optional) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric, optional) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. remember_me (alpha, optional) Maximum Length Possible/ expected values Description 2 -YES -No This parameter provides you with an indication to whether to save this token for the user based on the user selection. phone_number (numeric, optional) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric, optional) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. return_url (alphanumeric, optional) Maximum Length Example Special Characters Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page that will be displayed to the customer when the order is processed. Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"Request Parameters"},{"location":"trustedchannelparameters/#trusted-channel-response","text":"command (String) Maximum Length Possible/ expected values Description 20 AUTHORIZATION, PURCHASE A command for payFORT server to understand. access_code (alphanumeric) Maximum Length Example Description 20 zx0IPmPy5jp1vAz8Kpg7 Merchant access code that can be found in the backoffice merchant_identifier (alphanumeric) Maximum Length Example Description 20 CycHZxVj Merchant ID that can be found in the backoffice merchant_reference (alphanumeric) Maximum Length Example Special Characters Description 40 XYZ9239-yu898 - _ . The Merchant\u2019s unique order number. amount (numeric) Maximum Length Example Description 10 10000 The transaction\u2019s amount. *Each currency has predefined allowed decimal points that should be taken into consideration when sending the amount check the note after this table. currency (String) Maximum Length Example Description 3 AED The currency of the transaction\u2019s amount in ISO code 3. language (String) Maximum Length Possible/ expected values Description 2 en/ar The checkout page and messages language where en is for english and ar for Arabic customer_email (alphanumeric) Maximum Length Example Special characters Description 254 customer1@domain.com _ - . @ + The customer\u2019s email. expiry_date (numeric) Maximum Length Example Description 4 2105 The card\u2019s expiry date. card_number (numeric) Maximum Length Example Description 19 4005550000000001 The clear credit card\u2019s number. Only the MEEZA payment option takes 19 digits card number. AMEX payment option takes 15 digits card number. *Otherwise, they take 16 digits card number. card_security_code (numeric) Maximum Length Example Description 4 123 The clear card security code collect on the merchant\u2019s checkout page. It\u2019s ONLY mandatory in the ecommerce requests. Only AMEX accepts card security code of 4 digits. card_holder_name (String) Maximum Length Example Special Characters Description 50 John Smith ' - . The card holder name. signature (alphanumeric) Maximum Length Example Description 200 7cad05f0212ed933c9a5d5dffa31661acf2c827a A string hashed using the Secure Hash Algorithm. Please refer to section Signature token_name (alphanumeric) Maximum Length Example Special characters Description 100 Op9Vmp . @ - _ The Token received from the Tokenization process. payment_option (String) Maximum Length Possible/ expected values Description 10 - MASTERCARD - VISA - AMEX - MADA (for Purchase operations and eci Ecommerce only) Click here to download MADA Branding Document - MEEZA (for Purchase operations and ECOMMERCE eci only) Payment option. eci (String) Maximum Length Possible/ expected values Description 16 -ECOMMERCE - MOTO E-commerce indicator. *MOTO and E-commerce indicator clickable in VISA, MASTERCARD and AMEX. order_description (Alphanumeric) Maximum Length Example Description 150 iPhone 6-S ' / . _ - # : $ Space It holds the description of the order. customer_ip (Alphanumeric) Maximum Length Example Special Characters Description 45 IPv4 \u2192 192.178.1.10 IPv6 \u2192 2001:0db8:3042:0002:5a55:caff:fef6:bdbf . : It holds the customer\u2019s IP address. *We support IPv4 and IPv6 as shown in the example. customer_name (String) Maximum Length Example Special Characters Description 40 John Smith _ \\ / - . ' Space The customer\u2019s name. merchant_extra (alphanumeric) Maximum Length Example Special Characters Description 999 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra1 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra2 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra3 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra4 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. merchant_extra5 (alphanumeric) Maximum Length Example Special Characters Description 250 John Smith . ; / _ - , ' @ Extra data sent by merchant. Will be received and sent back as received. Will not be displayed in any report. remember_me (alpha) Maximum Length Possible/ expected values Description 2 -YES -No This parameter provides you with an indication to whether to save this token for the user based on the user selection. phone_number (numeric) Maximum Length Example Special Characters Description 19 00962797219966 + - ( ) Space The customer\u2019s phone number. settlement_reference (alphanumeric) Maximum Length Example Special Characters Description 34 00962797219966 - _ . The Merchant submits this value to the FORT. The value is then passed to the Acquiring bank and displayed to the merchant in the Acquirer settlement file. return_url (alphanumeric) Maximum Length Example Special Characters Description 400 http://www.merchant.com $ ! = ? # & - _ / : . The URL of the Merchant\u2019s page that will be displayed to the customer when the order is processed. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones.","title":"Trusted Channel - Response"},{"location":"voidauthorization/","text":"Void Authorization After a card payment has been authorized, the payment is not complete until it has been captured . If you do not wish to capture the payment, you can void it using the void API as described. The Request Use the details below to set up your request. Endpoints Live POST https://paymentservices.payfort.com/FortAPI/paymentApi Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi You can send \u201cmerchant_reference\u201d and/or \u201cfort_id\u201d in the VOID_AUTHORIZATION request. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response even the optional ones. The Request Example Check out the request parameters by visiting this link Sample Request Here are the sample request you are required to send authorizing a purchase. Php Python Ruby Java cURL error_reporting(E_ALL); ini_set('display_errors', '1'); $url = 'https://sbpaymentservices.payfort.com/FortAPI/paymentApi'; $arrData = array( 'command' => 'VOID_AUTHORIZATION', 'access_code' => 'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier' => 'CycHZxVj', 'merchant_reference' => 'XYZ9239-yu898', 'language' => 'en', 'signature' => '7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'order_description' => 'iPhone 6-S', ); $ch = curl_init( $url ); # Setup request to send json via POST. $data = json_encode($arrData); curl_setopt( $ch, CURLOPT_POSTFIELDS, $data ); curl_setopt( $ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json')); # Return response instead of printing. curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true ); # Send request. $result = curl_exec($ch); curl_close($ch); # Print response. echo \"<pre>$result</pre>\"; import urllib import urllib2 import json url = 'https://sbpaymentservices.payfort.com/FortAPI/paymentApi'; arrData = { 'command':'VOID_AUTHORIZATION', 'access_code':'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier':'CycHZxVj', 'merchant_reference':'XYZ9239-yu898', 'language':'en', 'signature':'7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'order_description':'iPhone 6-S', }; values = json.dumps(arrData) data = urllib.urlencode(values) req = urllib2.Request(url, data) response = urllib2.urlopen(req) page = response.read() print page + '\\n\\n' require 'json' require 'net/http' require 'net/https' require 'uri' require 'openssl' arrData = { 'command' => 'VOID_AUTHORIZATION', 'access_code' => 'zx0IPmPy5jp1vAz8Kpg7', 'merchant_identifier' => 'CycHZxVj', 'merchant_reference' => 'XYZ9239-yu898', 'language' => 'en', 'signature' => '7cad05f0212ed933c9a5d5dffa31661acf2c827a', 'order_description' => 'iPhone 6-S', }; arrData = arrData.to_json uri = URI.parse(\"https://sbpaymentservices.payfort.com/FortAPI/paymentApi\") http = Net::HTTP.new(uri.host, uri.port) http.use_ssl = true http.verify_mode = OpenSSL::SSL::VERIFY_NONE request = Net::HTTP::Post.new(\"/v1.1/auth\") request.add_field('Content-Type', 'application/json') request.body = arrData response = http.request(request) String jsonRequestString = \"{\\\"command\\\" : \\\"VOID_AUTHORIZATION\\\" , \" + \"\\\"access_code\\\" : \\\"zx0IPmPy5jp1vAz8Kpg7\\\", \\\"merchant_identifier\\\" : \\\"CycHZxVj\\\", \\\"merchant_reference\\\" : \\\"XYZ9239-yu898\\\",\" + \"\\\"language\\\" : \\\"en\\\", \\\"signature\\\" : \\\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\\\", \" + \"\\\"order_description\\\" : \\\"iPhone 6-S\\\"}\"; // Define and Initialize HttpClient HttpClient httpClient = HttpClientBuilder.create().build(); // Intialize HttpPOST with FORT Payment services URL HttpPost request = new HttpPost(\"https://sbpaymentservices.payfort.com/FortAPI/paymentApi\"); // Setup Http POST entity with JSON String StringEntity params = new StringEntity(jsonRequestString); // Setup request type as JSON request.addHeader(\"content-type\", \"application/json\"); request.setEntity(params); // Post request to FORT HttpResponse response = httpClient.execute(request); // Read response using StringBuilder StringBuilder sb = new StringBuilder(); BufferedReader reader = new BufferedReader(new InputStreamReader( response.getEntity().getContent()), 65728); String line = null; while ((line = reader.readLine()) != null) { sb.append(line); } // Print response System.out.println(sb.toString()); curl -H \"Content-Type: application/json\" -d '{\"command\":\"VOID_AUTHORIZATION\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", merchant_reference\":\"XYZ9239-yu898\", \"language\":\"en\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone6-S\"}' https://sbpaymentservices.payfort.com/FortAPI/paymentApi The Response If you receive response code 20064 with status code 04 it means that your request to void authorization has been accepted by PayFort server. Response Example \u200b json {\"command\":\"VOID_AUTHORIZATION\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239yu898\", \"language\":\"en\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone6-S\", \"fort_id\":\"149295435400084008\", \"response_message\":\"Success\", \"response_code\":\"20064\", \"status\":\"04\" } You can check out various transaction codes by visiting this link Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Void an Authorization"},{"location":"voidauthorization/#void-authorization","text":"After a card payment has been authorized, the payment is not complete until it has been captured . If you do not wish to capture the payment, you can void it using the void API as described.","title":"Void Authorization"},{"location":"voidauthorization/#the-request","text":"Use the details below to set up your request.","title":"The Request"},{"location":"voidauthorization/#endpoints","text":"","title":"Endpoints"},{"location":"voidauthorization/#live","text":"POST https://paymentservices.payfort.com/FortAPI/paymentApi","title":"Live"},{"location":"voidauthorization/#sandbox","text":"POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi You can send \u201cmerchant_reference\u201d and/or \u201cfort_id\u201d in the VOID_AUTHORIZATION request. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response even the optional ones.","title":"Sandbox"},{"location":"voidauthorization/#the-request-example","text":"Check out the request parameters by visiting this link","title":"The Request Example"},{"location":"voidauthorization/#the-response","text":"If you receive response code 20064 with status code 04 it means that your request to void authorization has been accepted by PayFort server.","title":"The Response"},{"location":"voidauthorization/#response-example","text":"\u200b json {\"command\":\"VOID_AUTHORIZATION\", \"access_code\":\"zx0IPmPy5jp1vAz8Kpg7\", \"merchant_identifier\":\"CycHZxVj\", \"merchant_reference\":\"XYZ9239yu898\", \"language\":\"en\", \"signature\":\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\", \"order_description\":\"iPhone6-S\", \"fort_id\":\"149295435400084008\", \"response_message\":\"Success\", \"response_code\":\"20064\", \"status\":\"04\" } You can check out various transaction codes by visiting this link","title":"Response Example"},{"location":"voidauthorization/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"voidauthorization/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"wallets/","text":"PayFort supports MasterPass, Visacheckout and ApplePay. MasterPass As another move towards a cashless environment, PayFort provides MasterPass . It is a digital wallet that securely stores your buyer\u2019s credit card details and shipping addresses, making shopping through thousands of online Merchants simple and convenient. This is fulfilled by enhancing and simplifying the buyer\u2019s digital shopping experience. PAYFORT now supports MasterPass Redirect v7 in addition to v6. Service Endpoints Sandbox POST https://sbcheckout.payfort.com/FortAPI/paymentPage Live POST https://checkout.payfort.com/FortAPI/paymentPage Redirection Integration Flow You submit a form that includes all the parameters and call the following url to be redirected to PayFort as mentioned in the service endpoints The PayFORT returns a response to the request which you sent in step 1. The payFORT inserts the response parameters into a JavaScript. A lightbox appears to the buyer where he enters his credentials, selects the card type and the shipping address, and clicks \u201cFinish Shopping\u201d. The payFORT either proceeds to Authorize or Purchase the payment based on the value of the command parameter sent in your request form. The payFORT returns a response to the request sent to it in step5.(Please refer to section MasterPass Service - Response for the Response Parameters). In the Redirection work flow, the \u201cChannel\u201d will always be considered redirection and the \u201cDefault Operation\u201d won\u2019t be considered. If you sent the \u201cpayment_option\u201d value in your request, the payFORT will use the value found in the request, no matter what other options are supported by the Merchant. However, if this value wasn\u2019t sent in the request, the payFORT will retrieve all the payment options supported by the Merchant. Parameters Submission Type HTTPs Form Post Request. Service Request Example Below is the sample html request. placeholder: add code for request The following is an example for \u201ccart_details\u201d parameter: placeholder: add code for card_details parameter Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. MasterPass Hosted Masterpass Hosted accepts digital wallet transactions without redirection to Masterpass pages, instead it will be hosted on the Merchant website. VisaCheckout Visa Checkout is a digital wallet that securely stores the customer's credit card details and shipping addresses and information, making shopping through thousands of online Merchants simple and convenient. This service enhances and simplifies the buyer\u2019s online shopping experience. Visa Checkout can be offered through two different integrations: Merchant Hosted Checkout Button. PayFort Hosted Checkout Button. Merchant Hosted Checkout Button Integration Flow This integration allows the you to host Visa Checkout button on your website giving you maximum control over the look and feel and user experience. The following steps describe how this integration works: You should include the following JavaScript in the HTML header of its checkout page. This JavaScript loads the Visa Checkout library and defines handlers to initialization and payment events. <head> <script type=\"text/javascript\"> function onVisaCheckoutReady() { V.init({ apikey : \u201c#API_KEY#\u201d, // This will be provided by PayFort externalProfileId : \u201c#PROFILE_NAME#\u201d, // This will be provided by PayFort settings : { locale : \u201cen_AE\u201d, countryCode : \u201cAE\u201d, // depends on ISO-3166-1 alpha-2 standard codes review : { message : \u201cMerchant defined message\u201d, // buttonAction : \u201cContinue\u201d // The button label }, threeDSSetup : { threeDSActive : \u201cfalse\u201d // true to enable the 3ds false to disable it } }, paymentRequest : { currencyCode : \u201cUSD\u201d, //depends on ISO 4217 standard alpha-3 code values subtotal : \u201c10.00\u201d, // Subtotal of the payment. } }); V.on(\u201cpayment.success\u201d, function(payment) { document.write(JSON.stringify(payment)); //response when received success operation }); V.on(\u201cpayment.cancel\u201d, function(payment) { document.write(JSON.stringify(payment)); //response when cancel operation }); V.on(\u201cpayment.error\u201d, function(payment, error) { document.write(JSON.stringify(payment));//response when received error operation document.write(error); }); } </script> </head> You should use the following class to render Visa Checkout button that a consumer clicks to initiate a payment. <body> <img alt=\u201cVisa Checkout\u201d class=\u201cv-button\u201d role=\u201cbutton\u201d src=\u201chttps://sandbox.secure.checkout.visa.com/wallet-services-web/xo/button.png?cardBrands=VISA,MASTERCARD\u201d /> </body> Endpoints Sandbox https://sandbox.secure.checkout.visa.com/wallet-services-web/xo/button.png Live https://secure.checkout.visa.com/wallet-services-web/xo/button.png You should use the following JavaScript to control the operation on Visa Checkout on the website. <body> <script type=\u201ctext/javascript\u201d src=\u201chttps://sandbox-assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js\u201d> </script> </body> After completing the previous steps, the consumer clicks on Visa Checkout button, Visa Checkout light box appears and the user complete the checkout process. You will receive a successful response. The response associated with the payment success event returns list of parameters. The Merchant has to collect the value of \u201ccall_id\u201d parameter to be used in the following step. You submit Purchase request to the FORT adding 2 extra parameters: digital-wallet, call_id. Please refer to Merchant Hosted Visa Checkout - Request for more details. Merchants Page should be activated to accept Purchase and Authorization transactions The Merchant system receives the FORT\u2019s purchase request and then uses Visa Checkout update image pixel. Below you can find an example of how to use Visa Checkout update image pixel. Please refer to \u201cVisa checkout PayFort documentation\u201d for more details. <img src=\u201chttps://sandbox.secure.checkout.visa.com/wallet-services-web/payment/updatepaymentinfo.gif?apikey=\u2026&callId=\u2026&currencyCode=USD&total=11.00&subtotal=11.00\u201d /> The following example shows an HTML web page that loads the Visa Checkout library, defines handlers for initialization and payment events, and creates a Visa Checkout button: <html> <head> <script type=\u201ctext/javascript\u201d> function onVisaCheckoutReady() { V.init({ apikey : \u201c#API_KEY#\u201d, // This will be provided by PayFort externalProfileId : \u201c#PROFILE_NAME#\u201d, // This will be provided by PayFort settings : { locale : \u201cen_AE\u201d, countryCode : \u201cAE\u201d, // depends on ISO-3166-1 alpha-2 standard codes review : { message : \u201cMerchant defined message\u201d, // buttonAction : \u201cContinue\u201d // The button label }, threeDSSetup : { threeDSActive : \u201cfalse\u201d // true to enable the 3ds false to disable it } }, paymentRequest : { currencyCode : \u201cUSD\u201d, //depends on ISO 4217 standard alpha-3 code values subtotal : \u201c10.00\u201d, // Subtotal of the payment. } }); V.on(\u201cpayment.success\u201d, function(payment) { document.write(JSON.stringify(payment)); // response when received success operation }); V.on(\u201cpayment.cancel\u201d, function(payment) { document.write(JSON.stringify(payment)); // response when cancel operation }); V.on(\u201cpayment.error\u201d, function(payment, error) { document.write(JSON.stringify(payment));// response when received error operation document.write(error); }); } </script> </head> <body> <img alt=\u201cVisa Checkout\u201d class=\u201cv-button\u201d role=\u201cbutton\"src=\"https://sandbox.secure.checkout.visa.com/wallet-services-web/xo/button.png?cardBrands=VISA,MASTERCARD,DISCOVER,AMEX\u201d /> <script type=\u201ctext/javascript\u201d src=\u201chttps://sandbox-assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js\u201d> </script> </body> </html> Apple Pay Start seamlessly accepting credit card payments from your customers via Touch ID and Face ID, eliminating the need for them to manually type in their card and shipping details. When using a credit or debit card with Apple Pay, the actual card numbers are not stored on the device, or on Apple servers. Instead, a unique Device Account Number is assigned, encrypted and securely stored in the Secure Element on your device, where each transaction is authorized with a one-time unique dynamic security code. SUPPORTED DEVICES Refer to Apple\u2019s compatibility documentation to learn which devices support Apple Pay. PayFort users can accept Apple Pay in iOS applications in iOS 8.1 and above. There are no additional fees to process Apple Pay payments, and the pricing is the same as other card transactions. Apple Pay is compatible with most PayFort products and features, allowing you to use it in place of a traditional payment form whenever possible. Use it to accept payments for physical or digital goods, donations, subscriptions, and more. Apple Pay is available to cardholders at participating banks in supported countries. Refer to Apple\u2019s participating banks documentation to learn which banks and countries are supported. Endpoints Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi Live POST https://paymentservices.payfort.com/FortAPI/paymentApi Before you start Before you get started with Apple Pay, you will need the following: An Apple Developer account. Sign up for one here and complete the Apple Pay certification (export the payment processing certificate in p12 file) A domain with a valid SSL certificate (meaning your domain should start with https ). Access to a Secure Shell (SSH) terminal. Access to your server's files, so you can upload files to your server. Integrate Apple Pay in your app/website using the Apple Pay documentation found at https://developer.apple.com/apple-pay Submit the encrypted Apple Pay payload to PayFort\u2019s API for decryption / processing. Please contact integration@payfort.com for PayFort\u2019s integration documentation Configure Apple Pay Create your merchant IDs in your Apple Pay Developer account Placeholder: Sample video showing how to create merchant Ids in Apple Pay Developer account. We recommend that you create separate merchant IDs for your test environment and for your live/production environment. Integrate Apple Pay in your app/website using the Apple Pay documentation found at https://developer.apple.com/apple-pay Submit the encrypted Apple Pay payload to PayFort\u2019s API for decryption / processing. Please contact integration@payfort.com for PayFort\u2019s integration documentation Parameters Submission Type REST POST request using JSON. The ApplePay Request Placeholder: Insert sample request code for apple pay Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. The ApplePay Response Here is the sample response Placeholder: Please insert sample response for Apple Pay Service as sent by PayFORT server. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones Apple Pay SDK Service Apple Pay is a digital wallet that allows your customers to make payments using different Apple devices via FORT iOS SDK. The Customer authenticate his identity with Touch ID fingerprint verification to complete the payment. Before You Start \u2022 You will need one of these iOS devices (iPhone 6, iPhone 6s, iPhone 6 Plus, iPhone 6s Plus, iPhone 7, iPhone 7 Plus, iPhone SE, iPad Air 2, iPad mini 3, iPad mini 4, and iPad Pro models) running iOS 8.1 or later. \u2022 You will need a Mac with Xcode 6.1 or newer installed. You can install or upgrade Xcode in the Mac App Store . \u2022 You will also need an apple developer account and a membership in the iOS Developer Program. You can create a one from here . \u2022 You will need to download the FORT iOS Mobile SDK, click here . Get Started Before you start Apple Pay integration with PayFort please refer to the following URL here to complete the following steps: Setup your Apple Pay account. Complete the integration with Apple Pay SDK. After completing the integration with Apple Pay, check that you have got the following: \u2022 Apple merchantID. \u2022 Merchant certificate. \u2022 Payment processing certificate. Then copy the following sample code to complete integration with FORT Mobile SDK: Object-C code for Integration with PayFORT iOS SDK ```objective-c #pragma mark - PKPaymentAuthorizationViewControllerDelegate (void)paymentAuthorizationViewController: (PKPaymentAuthorizationViewController )controller didAuthorizePayment:(PKPayment )payment completion:(void (^)(PKPaymentAuthorizationStatus status))completion { BOOL asyncSuccessful = payment.token.paymentData.length != 0; if(asyncSuccessful) { PayFortController *payFort = [[PayFortController alloc]initWithEnviroment:(KPayFortEnviroment)_enviromentSegment.selectedSegmentIndex]; NSMutableDictionary *request = [[NSMutableDictionary alloc]init]; [request setValue:@\u201c10000\u201d forKey:@\u201camount\u201d]; [request setValue:@\u201cAUTHORIZATION\u201d forKey:@\u201ccommand\u201d]; [request setValue:@\u201cUSD\u201d forKey:@\u201ccurrency\u201d]; [request setValue:@\u201cemail@domain.com\u201d forKey:@\u201ccustomer_email\u201d]; [request setValue:@\u201cen\u201d forKey:@\u201clanguage\u201d]; [request setValue:@\u201cmerchant\u201d forKey:@\u201cmerchant_reference\u201d]; [request setValue:@\u201c\u201d forKey:@\u201csdk_token\u201d]; [request setValue:@\u201cAPPLE_PAY\u201d forKey:@\u201cdigital_wallet\u201d]; [payFort callPayFortForApplePayWithRequest:request applePayPayment:payment currentViewController:self Success:^(NSDictionary requestDic, NSDictionary responeDic) { completion(PKPaymentAuthorizationStatusSuccess); } Faild:^(NSDictionary requestDic, NSDictionary responeDic, NSString *message) { completion(PKPaymentAuthorizationStatusFailure); }]; } else { completion(PKPaymentAuthorizationStatusFailure); } } ``` Swift Code for Integration with PayFORT iOS SDK func paymentAuthorizationController(_ controller: PKPaymentAuthorizationController, didAuthorizePayment payment: PKPayment, completion: @escaping (PKPaymentAuthorizationStatus) -> Void) { //Perform some very basic validation on the provided contact information let asyncSuccessful = payment.token.paymentData.count != 0 if asyncSuccessful { let payFort = PayFortController.init(enviroment: KPayFortEnviromentSandBox) let request = NSMutableDictionary.init() request.setValue(\u201c100100000\u201d, forKey: \u201camount\u201d) request.setValue(\u201cAUTHORIZATION\u201d, forKey: \u201ccommand\u201d) request.setValue(\u201cUSD\u201d, forKey: \u201ccurrency\u201d) request.setValue(\u201cemail@domain.com\u201d, forKey: \u201ccustomer_email\u201d) request.setValue(\u201cen\u201d, forKey: \u201clanguage\u201d) request.setValue(\u201cmerchant\u201d, forKey: \u201cmerchant_reference\u201d) request.setValue(\u201cgr66zzwW9\u201d , forKey: \u201csdk_token\u201d) request.setValue(\u201cAPPLE_PAY\u201d , forKey: \u201cdigital_wallet\u201d) payFort?.callPayFortForApplePay(withRequest: request, applePay: payment, currentViewController: self , success: { (requestDic, responeDic) in completion(.success) }, faild:{ (requestDic, responeDic, message) in completion(.failure) }) }else { completion(.failure) } } Apple Pay SDK Authorization/ Purchase - Request Placeholder: Sample code for Apple Pay SDK Authorization/Purchase - Request Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. Apple Pay SDK Authorization/ Purchase - Response Placeholder: Sample code for Apple Pay SDK authorization/Purchase Response in JSON format Every parameter the Merchant sends in the Request should be received by the Merchant in the Response - even the optional ones. Test Your Wallet Integration You can checkout this link for testing your wallet integration Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Wallets"},{"location":"wallets/#masterpass","text":"As another move towards a cashless environment, PayFort provides MasterPass . It is a digital wallet that securely stores your buyer\u2019s credit card details and shipping addresses, making shopping through thousands of online Merchants simple and convenient. This is fulfilled by enhancing and simplifying the buyer\u2019s digital shopping experience. PAYFORT now supports MasterPass Redirect v7 in addition to v6.","title":"MasterPass"},{"location":"wallets/#service-endpoints","text":"Sandbox POST https://sbcheckout.payfort.com/FortAPI/paymentPage Live POST https://checkout.payfort.com/FortAPI/paymentPage","title":"Service Endpoints"},{"location":"wallets/#redirection","text":"","title":"Redirection"},{"location":"wallets/#integration-flow","text":"You submit a form that includes all the parameters and call the following url to be redirected to PayFort as mentioned in the service endpoints The PayFORT returns a response to the request which you sent in step 1. The payFORT inserts the response parameters into a JavaScript. A lightbox appears to the buyer where he enters his credentials, selects the card type and the shipping address, and clicks \u201cFinish Shopping\u201d. The payFORT either proceeds to Authorize or Purchase the payment based on the value of the command parameter sent in your request form. The payFORT returns a response to the request sent to it in step5.(Please refer to section MasterPass Service - Response for the Response Parameters). In the Redirection work flow, the \u201cChannel\u201d will always be considered redirection and the \u201cDefault Operation\u201d won\u2019t be considered. If you sent the \u201cpayment_option\u201d value in your request, the payFORT will use the value found in the request, no matter what other options are supported by the Merchant. However, if this value wasn\u2019t sent in the request, the payFORT will retrieve all the payment options supported by the Merchant.","title":"Integration Flow"},{"location":"wallets/#parameters-submission-type","text":"HTTPs Form Post Request.","title":"Parameters Submission Type"},{"location":"wallets/#service-request-example","text":"Below is the sample html request. placeholder: add code for request The following is an example for \u201ccart_details\u201d parameter: placeholder: add code for card_details parameter Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"Service Request Example"},{"location":"wallets/#masterpass-hosted","text":"Masterpass Hosted accepts digital wallet transactions without redirection to Masterpass pages, instead it will be hosted on the Merchant website.","title":"MasterPass Hosted"},{"location":"wallets/#visacheckout","text":"Visa Checkout is a digital wallet that securely stores the customer's credit card details and shipping addresses and information, making shopping through thousands of online Merchants simple and convenient. This service enhances and simplifies the buyer\u2019s online shopping experience. Visa Checkout can be offered through two different integrations: Merchant Hosted Checkout Button. PayFort Hosted Checkout Button.","title":"VisaCheckout"},{"location":"wallets/#merchant-hosted-checkout-button","text":"","title":"Merchant Hosted Checkout Button"},{"location":"wallets/#integration-flow_1","text":"This integration allows the you to host Visa Checkout button on your website giving you maximum control over the look and feel and user experience. The following steps describe how this integration works: You should include the following JavaScript in the HTML header of its checkout page. This JavaScript loads the Visa Checkout library and defines handlers to initialization and payment events. <head> <script type=\"text/javascript\"> function onVisaCheckoutReady() { V.init({ apikey : \u201c#API_KEY#\u201d, // This will be provided by PayFort externalProfileId : \u201c#PROFILE_NAME#\u201d, // This will be provided by PayFort settings : { locale : \u201cen_AE\u201d, countryCode : \u201cAE\u201d, // depends on ISO-3166-1 alpha-2 standard codes review : { message : \u201cMerchant defined message\u201d, // buttonAction : \u201cContinue\u201d // The button label }, threeDSSetup : { threeDSActive : \u201cfalse\u201d // true to enable the 3ds false to disable it } }, paymentRequest : { currencyCode : \u201cUSD\u201d, //depends on ISO 4217 standard alpha-3 code values subtotal : \u201c10.00\u201d, // Subtotal of the payment. } }); V.on(\u201cpayment.success\u201d, function(payment) { document.write(JSON.stringify(payment)); //response when received success operation }); V.on(\u201cpayment.cancel\u201d, function(payment) { document.write(JSON.stringify(payment)); //response when cancel operation }); V.on(\u201cpayment.error\u201d, function(payment, error) { document.write(JSON.stringify(payment));//response when received error operation document.write(error); }); } </script> </head> You should use the following class to render Visa Checkout button that a consumer clicks to initiate a payment. <body> <img alt=\u201cVisa Checkout\u201d class=\u201cv-button\u201d role=\u201cbutton\u201d src=\u201chttps://sandbox.secure.checkout.visa.com/wallet-services-web/xo/button.png?cardBrands=VISA,MASTERCARD\u201d /> </body>","title":"Integration Flow"},{"location":"wallets/#endpoints","text":"Sandbox https://sandbox.secure.checkout.visa.com/wallet-services-web/xo/button.png Live https://secure.checkout.visa.com/wallet-services-web/xo/button.png You should use the following JavaScript to control the operation on Visa Checkout on the website. <body> <script type=\u201ctext/javascript\u201d src=\u201chttps://sandbox-assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js\u201d> </script> </body> After completing the previous steps, the consumer clicks on Visa Checkout button, Visa Checkout light box appears and the user complete the checkout process. You will receive a successful response. The response associated with the payment success event returns list of parameters. The Merchant has to collect the value of \u201ccall_id\u201d parameter to be used in the following step. You submit Purchase request to the FORT adding 2 extra parameters: digital-wallet, call_id. Please refer to Merchant Hosted Visa Checkout - Request for more details. Merchants Page should be activated to accept Purchase and Authorization transactions The Merchant system receives the FORT\u2019s purchase request and then uses Visa Checkout update image pixel. Below you can find an example of how to use Visa Checkout update image pixel. Please refer to \u201cVisa checkout PayFort documentation\u201d for more details. <img src=\u201chttps://sandbox.secure.checkout.visa.com/wallet-services-web/payment/updatepaymentinfo.gif?apikey=\u2026&callId=\u2026&currencyCode=USD&total=11.00&subtotal=11.00\u201d /> The following example shows an HTML web page that loads the Visa Checkout library, defines handlers for initialization and payment events, and creates a Visa Checkout button: <html> <head> <script type=\u201ctext/javascript\u201d> function onVisaCheckoutReady() { V.init({ apikey : \u201c#API_KEY#\u201d, // This will be provided by PayFort externalProfileId : \u201c#PROFILE_NAME#\u201d, // This will be provided by PayFort settings : { locale : \u201cen_AE\u201d, countryCode : \u201cAE\u201d, // depends on ISO-3166-1 alpha-2 standard codes review : { message : \u201cMerchant defined message\u201d, // buttonAction : \u201cContinue\u201d // The button label }, threeDSSetup : { threeDSActive : \u201cfalse\u201d // true to enable the 3ds false to disable it } }, paymentRequest : { currencyCode : \u201cUSD\u201d, //depends on ISO 4217 standard alpha-3 code values subtotal : \u201c10.00\u201d, // Subtotal of the payment. } }); V.on(\u201cpayment.success\u201d, function(payment) { document.write(JSON.stringify(payment)); // response when received success operation }); V.on(\u201cpayment.cancel\u201d, function(payment) { document.write(JSON.stringify(payment)); // response when cancel operation }); V.on(\u201cpayment.error\u201d, function(payment, error) { document.write(JSON.stringify(payment));// response when received error operation document.write(error); }); } </script> </head> <body> <img alt=\u201cVisa Checkout\u201d class=\u201cv-button\u201d role=\u201cbutton\"src=\"https://sandbox.secure.checkout.visa.com/wallet-services-web/xo/button.png?cardBrands=VISA,MASTERCARD,DISCOVER,AMEX\u201d /> <script type=\u201ctext/javascript\u201d src=\u201chttps://sandbox-assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js\u201d> </script> </body> </html>","title":"Endpoints"},{"location":"wallets/#apple-pay","text":"Start seamlessly accepting credit card payments from your customers via Touch ID and Face ID, eliminating the need for them to manually type in their card and shipping details. When using a credit or debit card with Apple Pay, the actual card numbers are not stored on the device, or on Apple servers. Instead, a unique Device Account Number is assigned, encrypted and securely stored in the Secure Element on your device, where each transaction is authorized with a one-time unique dynamic security code.","title":"Apple Pay"},{"location":"wallets/#supported-devices","text":"Refer to Apple\u2019s compatibility documentation to learn which devices support Apple Pay. PayFort users can accept Apple Pay in iOS applications in iOS 8.1 and above. There are no additional fees to process Apple Pay payments, and the pricing is the same as other card transactions. Apple Pay is compatible with most PayFort products and features, allowing you to use it in place of a traditional payment form whenever possible. Use it to accept payments for physical or digital goods, donations, subscriptions, and more. Apple Pay is available to cardholders at participating banks in supported countries. Refer to Apple\u2019s participating banks documentation to learn which banks and countries are supported.","title":"SUPPORTED DEVICES"},{"location":"wallets/#endpoints_1","text":"Sandbox POST https://sbpaymentservices.payfort.com/FortAPI/paymentApi Live POST https://paymentservices.payfort.com/FortAPI/paymentApi","title":"Endpoints"},{"location":"wallets/#before-you-start","text":"Before you get started with Apple Pay, you will need the following: An Apple Developer account. Sign up for one here and complete the Apple Pay certification (export the payment processing certificate in p12 file) A domain with a valid SSL certificate (meaning your domain should start with https ). Access to a Secure Shell (SSH) terminal. Access to your server's files, so you can upload files to your server. Integrate Apple Pay in your app/website using the Apple Pay documentation found at https://developer.apple.com/apple-pay Submit the encrypted Apple Pay payload to PayFort\u2019s API for decryption / processing. Please contact integration@payfort.com for PayFort\u2019s integration documentation","title":"Before you start"},{"location":"wallets/#configure-apple-pay","text":"Create your merchant IDs in your Apple Pay Developer account Placeholder: Sample video showing how to create merchant Ids in Apple Pay Developer account. We recommend that you create separate merchant IDs for your test environment and for your live/production environment. Integrate Apple Pay in your app/website using the Apple Pay documentation found at https://developer.apple.com/apple-pay Submit the encrypted Apple Pay payload to PayFort\u2019s API for decryption / processing. Please contact integration@payfort.com for PayFort\u2019s integration documentation","title":"Configure Apple Pay"},{"location":"wallets/#parameters-submission-type_1","text":"REST POST request using JSON.","title":"Parameters Submission Type"},{"location":"wallets/#the-applepay-request","text":"Placeholder: Insert sample request code for apple pay Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"The ApplePay Request"},{"location":"wallets/#the-applepay-response","text":"Here is the sample response Placeholder: Please insert sample response for Apple Pay Service as sent by PayFORT server. Every parameter the Merchant sends in the Request should be received by the Merchant in the Response -even the optional ones","title":"The ApplePay Response"},{"location":"wallets/#apple-pay-sdk-service","text":"Apple Pay is a digital wallet that allows your customers to make payments using different Apple devices via FORT iOS SDK. The Customer authenticate his identity with Touch ID fingerprint verification to complete the payment.","title":"Apple Pay SDK Service"},{"location":"wallets/#before-you-start_1","text":"\u2022 You will need one of these iOS devices (iPhone 6, iPhone 6s, iPhone 6 Plus, iPhone 6s Plus, iPhone 7, iPhone 7 Plus, iPhone SE, iPad Air 2, iPad mini 3, iPad mini 4, and iPad Pro models) running iOS 8.1 or later. \u2022 You will need a Mac with Xcode 6.1 or newer installed. You can install or upgrade Xcode in the Mac App Store . \u2022 You will also need an apple developer account and a membership in the iOS Developer Program. You can create a one from here . \u2022 You will need to download the FORT iOS Mobile SDK, click here .","title":"Before You Start"},{"location":"wallets/#get-started","text":"Before you start Apple Pay integration with PayFort please refer to the following URL here to complete the following steps: Setup your Apple Pay account. Complete the integration with Apple Pay SDK. After completing the integration with Apple Pay, check that you have got the following: \u2022 Apple merchantID. \u2022 Merchant certificate. \u2022 Payment processing certificate. Then copy the following sample code to complete integration with FORT Mobile SDK: Object-C code for Integration with PayFORT iOS SDK ```objective-c #pragma mark - PKPaymentAuthorizationViewControllerDelegate (void)paymentAuthorizationViewController: (PKPaymentAuthorizationViewController )controller didAuthorizePayment:(PKPayment )payment completion:(void (^)(PKPaymentAuthorizationStatus status))completion { BOOL asyncSuccessful = payment.token.paymentData.length != 0; if(asyncSuccessful) { PayFortController *payFort = [[PayFortController alloc]initWithEnviroment:(KPayFortEnviroment)_enviromentSegment.selectedSegmentIndex]; NSMutableDictionary *request = [[NSMutableDictionary alloc]init]; [request setValue:@\u201c10000\u201d forKey:@\u201camount\u201d]; [request setValue:@\u201cAUTHORIZATION\u201d forKey:@\u201ccommand\u201d]; [request setValue:@\u201cUSD\u201d forKey:@\u201ccurrency\u201d]; [request setValue:@\u201cemail@domain.com\u201d forKey:@\u201ccustomer_email\u201d]; [request setValue:@\u201cen\u201d forKey:@\u201clanguage\u201d]; [request setValue:@\u201cmerchant\u201d forKey:@\u201cmerchant_reference\u201d]; [request setValue:@\u201c\u201d forKey:@\u201csdk_token\u201d]; [request setValue:@\u201cAPPLE_PAY\u201d forKey:@\u201cdigital_wallet\u201d]; [payFort callPayFortForApplePayWithRequest:request applePayPayment:payment currentViewController:self Success:^(NSDictionary requestDic, NSDictionary responeDic) { completion(PKPaymentAuthorizationStatusSuccess); } Faild:^(NSDictionary requestDic, NSDictionary responeDic, NSString *message) { completion(PKPaymentAuthorizationStatusFailure); }]; } else { completion(PKPaymentAuthorizationStatusFailure); } } ``` Swift Code for Integration with PayFORT iOS SDK func paymentAuthorizationController(_ controller: PKPaymentAuthorizationController, didAuthorizePayment payment: PKPayment, completion: @escaping (PKPaymentAuthorizationStatus) -> Void) { //Perform some very basic validation on the provided contact information let asyncSuccessful = payment.token.paymentData.count != 0 if asyncSuccessful { let payFort = PayFortController.init(enviroment: KPayFortEnviromentSandBox) let request = NSMutableDictionary.init() request.setValue(\u201c100100000\u201d, forKey: \u201camount\u201d) request.setValue(\u201cAUTHORIZATION\u201d, forKey: \u201ccommand\u201d) request.setValue(\u201cUSD\u201d, forKey: \u201ccurrency\u201d) request.setValue(\u201cemail@domain.com\u201d, forKey: \u201ccustomer_email\u201d) request.setValue(\u201cen\u201d, forKey: \u201clanguage\u201d) request.setValue(\u201cmerchant\u201d, forKey: \u201cmerchant_reference\u201d) request.setValue(\u201cgr66zzwW9\u201d , forKey: \u201csdk_token\u201d) request.setValue(\u201cAPPLE_PAY\u201d , forKey: \u201cdigital_wallet\u201d) payFort?.callPayFortForApplePay(withRequest: request, applePay: payment, currentViewController: self , success: { (requestDic, responeDic) in completion(.success) }, faild:{ (requestDic, responeDic, message) in completion(.failure) }) }else { completion(.failure) } }","title":"Get Started"},{"location":"wallets/#apple-pay-sdk-authorization-purchase-request","text":"Placeholder: Sample code for Apple Pay SDK Authorization/Purchase - Request Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"Apple Pay SDK Authorization/ Purchase - Request"},{"location":"wallets/#apple-pay-sdk-authorization-purchase-response","text":"Placeholder: Sample code for Apple Pay SDK authorization/Purchase Response in JSON format Every parameter the Merchant sends in the Request should be received by the Merchant in the Response - even the optional ones.","title":"Apple Pay SDK Authorization/ Purchase - Response"},{"location":"wallets/#test-your-wallet-integration","text":"You can checkout this link for testing your wallet integration","title":"Test Your Wallet Integration"},{"location":"wallets/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"wallets/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"},{"location":"wallets1/","text":"PayFort supports MasterPass, Visacheckout and ApplePay MasterPass As another move towards a cashless environment, PayFort provides MasterPass ; a digital wallet that securely stores the buyer\u2019s credit card details and shipping addresses and information, making shopping through thousands of online Merchants simple and convenient. This is fulfilled by enhancing and simplifying the buyer\u2019s digital shopping experience. PAYFORT now supports MasterPass Redirect v7 in addition to v6. Service Endpoints Sandbox POST https://sbcheckout.payfort.com/FortAPI/paymentPage Live POST https://checkout.payfort.com/FortAPI/paymentPage Redirection Integration Flow The Merchant submits a form that includes all the parameters. The Merchant calls the following URL to be redirected to the FORT: https://checkout.payfort.com/FortAPI/paymentPage The FORT returns a response to the Merchant. The FORT inserts the response parameters into a JavaScript. A lightbox appears to the buyer where he enters his credentials, selects the card type and the shipping address, and clicks \u201cFinish Shopping\u201d. The FORT either proceeds to Authorize or Purchase the payment based on the value of the command parameter sent in the Merchant\u2019s form. If the Merchant sent the \u201cpayment_option\u201d value in his request, the FORT will use the value found in the request, no matter what other options are supported by the Merchant. However, if this value wasn\u2019t sent in the Merchant\u2019s request, the FORT will retrieve all the payment options supported by the Merchant. The FORT returns a response to the Merchant.(Please refer to section MasterPass Service - Response for the Response Parameters). In the Redirection work flow, the \u201cChannel\u201d will always be considered redirection and the \u201cDefault Operation\u201d won\u2019t be considered. Parameters Submission Type HTTPs Form Post Request. Service Request Example Below is the sample html request. <form action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\"method=\"post\"id=\"simulatorForm\"> <input type=\"hidden\" name=\"digital_wallet\" id=\"digital_wallet\" value=\"MASTERPASS\"/> <input type=\"hidden\" name=\"command\"id=\"command\" value=\"AUTHORIZATION\"/> <input type=\"hidden\" name=\"access_code\" id=\"access_code\" value=\"zx0IPmPy5jp1vAz\"/> <input type=\"hidden\" name=\"merchant_identifier\" id=\"merchant_identifier\" value=\"CycHZxVj\"/> <input type=\"hidden\" name=\"merchant_reference\" id=\"merchant_reference\" value=\"XYZ9239-yu898\"/> <input type=\"hidden\" name=\"amount\" id=\"amount\" value=\"10000\"/> <input type=\"hidden\" name=\"currency\" id=\"currency\" value=\"AED\"/> <input type=\"hidden\" name=\"language\" id=\"language\" value=\"en\"/> <input type=\"hidden\" name=\"customer_email\" id=\"customer_email\" value=\"someone@email.com\"/> <input type=\"hidden\" name=\"signature\" id=\"signature\" value=\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\"/> <input type=\"hidden\" name=\"payment_option\"id=\"payment_option\" value=\"VISA\"/> <input type=\"hidden\" name=\"order_description\" id=\"order_description\" value=\"iPhone 6-S\"/> <input type=\"hidden\" name=\"customer_ip\" id=\"customer_ip\" value=\"192.178.1.10\"/> <input type=\"hidden\" name=\"customer_name\" id=\"customer_name\" value=\"John Smith\"/> <input type=\"hidden\" name=\"cart_details\" id=\"cart_details\" value='{\"sub_total\":\"900\",\"cart_items\":[{\"item_description\":\"Xbox\",\"item_image\":\"http://image.com\",\"item_name\":\"Xbo x 360\",\"item_price\":\"300\",\"item_quantity\":\"2\"},{\"item_description\":\"Playstation 3\",\"item_image\":\"http://image.com\",\"item_name\":\"Playstation 3\",\"item_price\":\"150\",\"item_quantity\":\"2\"}]}'/> <input type=\"hidden\" name=\"return_url\" id=\"return_url\" value=\"http://backtothemerchanturl.com\"/> <input value=\"Send\" type=\"submit\"> </form> The following is an example for \u201ccart_details\u201d parameter: <input type=\u201chidden\u201d name=\u201ccart_details\u201d id=\u201ccart_details\u201d value= \u2019{ \u201csub_total\u201d:\u201c900\u201d, \u201ccart_items\u201d:[{ \u201citem_description\u201d:\u201cXbox\u201d, \u201citem_image\u201d:\u201chttp://image.com\u201d, \u201citem_name\u201d:\u201cXbox 360\u201d, \u201citem_price\u201d:\u201c300\u201d, \u201citem_quantity\u201d:\u201c2\u201d},{ \u201citem_description\u201d:\u201cPlaystation 3\u201d, \u201citem_image\u201d:\u201chttp://image.com\u201d, \u201citem_name\u201d:\u201cPlaystation 3\u201d, \u201citem_price\u201d:\u201c150\u201d, \u201citem_quantity\u201d:\u201c2\u201d}]}\u2019/> Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000. MasterPass Hosted Masterpass Hosted accepts digital wallet transactions without redirection to Masterpass pages and instead; it will be hosted on the Merchant website. VisaCheckout Visa Checkout is a digital wallet that securely stores the buyer\u2019s credit card details and shipping addresses and information, making shopping through thousands of online Merchants simple and convenient. This service enhances and simplifies the buyer\u2019s online shopping experience. Visa Checkout can be offered through two different integrations: Merchant Hosted Checkout Button. PayFort Hosted Checkout Button. Merchant Hosted Checkout Button Integration Flow This integration allows the you to host Visa Checkout button on his website giving him maximum control over the look and feel and user experience. The following steps describe how this integration works: You should include the following JavaScript in the HTML header of its checkout page. This JavaScript loads the Visa Checkout library and defines handlers to initialization and payment events. <head> <script type=\"text/javascript\"> function onVisaCheckoutReady() { V.init({ apikey : \u201c#API_KEY#\u201d, // This will be provided by PayFort externalProfileId : \u201c#PROFILE_NAME#\u201d, // This will be provided by PayFort settings : { locale : \u201cen_AE\u201d, countryCode : \u201cAE\u201d, // depends on ISO-3166-1 alpha-2 standard codes review : { message : \u201cMerchant defined message\u201d, // buttonAction : \u201cContinue\u201d // The button label }, threeDSSetup : { threeDSActive : \u201cfalse\u201d // true to enable the 3ds false to disable it } }, paymentRequest : { currencyCode : \u201cUSD\u201d, //depends on ISO 4217 standard alpha-3 code values subtotal : \u201c10.00\u201d, // Subtotal of the payment. } }); V.on(\u201cpayment.success\u201d, function(payment) { document.write(JSON.stringify(payment)); // response when received success operation }); V.on(\u201cpayment.cancel\u201d, function(payment) { document.write(JSON.stringify(payment)); // response when cancel operation }); V.on(\u201cpayment.error\u201d, function(payment, error) { document.write(JSON.stringify(payment));// response when received error operation document.write(error); }); } </script> </head> You should use the following class to render Visa Checkout button that a consumer clicks to initiate a payment. <body> <img alt=\u201cVisa Checkout\u201d class=\u201cv-button\u201d role=\u201cbutton\u201d src=\u201chttps://sandbox.secure.checkout.visa.com/wallet-services-web/xo/button.png?cardBrands=VISA,MASTERCARD\u201d /> </body> #### Endpoints Sandbox https://sandbox.secure.checkout.visa.com/wallet-services-web/xo/button.png Live https://secure.checkout.visa.com/wallet-services-web/xo/button.png You should use the following JavaScript to control the operation on Visa Checkout on the website. <body> <script type=\u201ctext/javascript\u201d src=\u201chttps://sandbox-assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js\u201d> </script> </body> #### Endpoints Sandbox https://sandbox-assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js Live https://assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js After completing the previous steps, the consumer clicks on Visa Checkout button, Visa Checkout light box appears and the user complete the checkout process. You will receive a successful response. The response associated with the payment success event returns list of parameters. The Merchant has to collect the value of \u201ccall_id\u201d parameter to be used in the following step. You submit Purchase request to the FORT adding 2 extra parameters: digital-wallet, call_id. Please refer to Merchant Hosted Visa Checkout - Request for more details. Merchants Page should be activated to accept Purchase and Authorization transactions The Merchant system receives the FORT\u2019s purchase request and then uses Visa Checkout update image pixel. Below you can find an example of how to use Visa Checkout update image pixel. Please refer to \u201cVisa checkout PayFort documentation\u201d for more details. <img src=\u201chttps://sandbox.secure.checkout.visa.com/wallet-services-web/payment/updatepaymentinfo.gif?apikey=\u2026&callId=\u2026&currencyCode=USD&total=11.00&subtotal=11.00\u201d /> The following example shows an HTML web page that loads the Visa Checkout library, defines handlers for initialization and payment events, and creates a Visa Checkout button: <html> <head> <script type=\u201ctext/javascript\u201d> function onVisaCheckoutReady() { V.init({ apikey : \u201c#API_KEY#\u201d, // This will be provided by PayFort externalProfileId : \u201c#PROFILE_NAME#\u201d, // This will be provided by PayFort settings : { locale : \u201cen_AE\u201d, countryCode : \u201cAE\u201d, // depends on ISO-3166-1 alpha-2 standard codes review : { message : \u201cMerchant defined message\u201d, // buttonAction : \u201cContinue\u201d // The button label }, threeDSSetup : { threeDSActive : \u201cfalse\u201d // true to enable the 3ds false to disable it } }, paymentRequest : { currencyCode : \u201cUSD\u201d, //depends on ISO 4217 standard alpha-3 code values subtotal : \u201c10.00\u201d, // Subtotal of the payment. } }); V.on(\u201cpayment.success\u201d, function(payment) { document.write(JSON.stringify(payment)); // response when received success operation }); V.on(\u201cpayment.cancel\u201d, function(payment) { document.write(JSON.stringify(payment)); // response when cancel operation }); V.on(\u201cpayment.error\u201d, function(payment, error) { document.write(JSON.stringify(payment));// response when received error operation document.write(error); }); } </script> </head> <body> <img alt=\u201cVisa Checkout\u201d class=\u201cv-button\u201d role=\u201cbutton\"src=\"https://sandbox.secure.checkout.visa.com/wallet-services-web/xo/button.png?cardBrands=VISA,MASTERCARD,DISCOVER,AMEX\u201d /> <script type=\u201ctext/javascript\u201d src=\u201chttps://sandbox-assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js\u201d> </script> </body> </html> Apple Pay Apple Pay provides an easy way for users to buy goods and services using iPhone, iPad and Apple Watch through mobile application or website. Checking out is as easy as selecting \u201cApple Pay\u201d and placing a finger on the touch ID of an iPhone, iPad or simply double clicking the side button on the Apple Watch. It\u2019s quick, easy and secure! When using a credit or debit card with Apple Pay, the actual card numbers are not stored on the device, nor on Apple servers. Instead, a unique Device Account Number is assigned, encrypted and securely stored in the Secure Element on your device, where each transaction is authorized with a one-time unique dynamic security code. Setting Up Apple Pay Kindly visit developer.apple.com where you will Create a developer account, an Apple Pay Merchant ID and complete the Apple Pay certification (export the payment processing certificate in p12 file) Integrate Apple Pay in your app/website using the Apple Pay documentation found at https://developer.apple.com/apple-pay Submit the encrypted Apple Pay payload to PayFort\u2019s API for decryption / processing. Please contact integration@payfort.com for PayFort\u2019s integration documentation Test Your Wallet Integration You can checkout this link for testing your wallet integration Go to Full API Check out our full API by visiting this link Need further help? Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Wallets1"},{"location":"wallets1/#masterpass","text":"As another move towards a cashless environment, PayFort provides MasterPass ; a digital wallet that securely stores the buyer\u2019s credit card details and shipping addresses and information, making shopping through thousands of online Merchants simple and convenient. This is fulfilled by enhancing and simplifying the buyer\u2019s digital shopping experience. PAYFORT now supports MasterPass Redirect v7 in addition to v6.","title":"MasterPass"},{"location":"wallets1/#service-endpoints","text":"","title":"Service Endpoints"},{"location":"wallets1/#sandbox","text":"POST https://sbcheckout.payfort.com/FortAPI/paymentPage","title":"Sandbox"},{"location":"wallets1/#live","text":"POST https://checkout.payfort.com/FortAPI/paymentPage","title":"Live"},{"location":"wallets1/#redirection","text":"","title":"Redirection"},{"location":"wallets1/#integration-flow","text":"The Merchant submits a form that includes all the parameters. The Merchant calls the following URL to be redirected to the FORT: https://checkout.payfort.com/FortAPI/paymentPage The FORT returns a response to the Merchant. The FORT inserts the response parameters into a JavaScript. A lightbox appears to the buyer where he enters his credentials, selects the card type and the shipping address, and clicks \u201cFinish Shopping\u201d. The FORT either proceeds to Authorize or Purchase the payment based on the value of the command parameter sent in the Merchant\u2019s form. If the Merchant sent the \u201cpayment_option\u201d value in his request, the FORT will use the value found in the request, no matter what other options are supported by the Merchant. However, if this value wasn\u2019t sent in the Merchant\u2019s request, the FORT will retrieve all the payment options supported by the Merchant. The FORT returns a response to the Merchant.(Please refer to section MasterPass Service - Response for the Response Parameters). In the Redirection work flow, the \u201cChannel\u201d will always be considered redirection and the \u201cDefault Operation\u201d won\u2019t be considered.","title":"Integration Flow"},{"location":"wallets1/#parameters-submission-type","text":"HTTPs Form Post Request.","title":"Parameters Submission Type"},{"location":"wallets1/#service-request-example","text":"Below is the sample html request. <form action=\"https://sbcheckout.payfort.com/FortAPI/paymentPage\"method=\"post\"id=\"simulatorForm\"> <input type=\"hidden\" name=\"digital_wallet\" id=\"digital_wallet\" value=\"MASTERPASS\"/> <input type=\"hidden\" name=\"command\"id=\"command\" value=\"AUTHORIZATION\"/> <input type=\"hidden\" name=\"access_code\" id=\"access_code\" value=\"zx0IPmPy5jp1vAz\"/> <input type=\"hidden\" name=\"merchant_identifier\" id=\"merchant_identifier\" value=\"CycHZxVj\"/> <input type=\"hidden\" name=\"merchant_reference\" id=\"merchant_reference\" value=\"XYZ9239-yu898\"/> <input type=\"hidden\" name=\"amount\" id=\"amount\" value=\"10000\"/> <input type=\"hidden\" name=\"currency\" id=\"currency\" value=\"AED\"/> <input type=\"hidden\" name=\"language\" id=\"language\" value=\"en\"/> <input type=\"hidden\" name=\"customer_email\" id=\"customer_email\" value=\"someone@email.com\"/> <input type=\"hidden\" name=\"signature\" id=\"signature\" value=\"7cad05f0212ed933c9a5d5dffa31661acf2c827a\"/> <input type=\"hidden\" name=\"payment_option\"id=\"payment_option\" value=\"VISA\"/> <input type=\"hidden\" name=\"order_description\" id=\"order_description\" value=\"iPhone 6-S\"/> <input type=\"hidden\" name=\"customer_ip\" id=\"customer_ip\" value=\"192.178.1.10\"/> <input type=\"hidden\" name=\"customer_name\" id=\"customer_name\" value=\"John Smith\"/> <input type=\"hidden\" name=\"cart_details\" id=\"cart_details\" value='{\"sub_total\":\"900\",\"cart_items\":[{\"item_description\":\"Xbox\",\"item_image\":\"http://image.com\",\"item_name\":\"Xbo x 360\",\"item_price\":\"300\",\"item_quantity\":\"2\"},{\"item_description\":\"Playstation 3\",\"item_image\":\"http://image.com\",\"item_name\":\"Playstation 3\",\"item_price\":\"150\",\"item_quantity\":\"2\"}]}'/> <input type=\"hidden\" name=\"return_url\" id=\"return_url\" value=\"http://backtothemerchanturl.com\"/> <input value=\"Send\" type=\"submit\"> </form> The following is an example for \u201ccart_details\u201d parameter: <input type=\u201chidden\u201d name=\u201ccart_details\u201d id=\u201ccart_details\u201d value= \u2019{ \u201csub_total\u201d:\u201c900\u201d, \u201ccart_items\u201d:[{ \u201citem_description\u201d:\u201cXbox\u201d, \u201citem_image\u201d:\u201chttp://image.com\u201d, \u201citem_name\u201d:\u201cXbox 360\u201d, \u201citem_price\u201d:\u201c300\u201d, \u201citem_quantity\u201d:\u201c2\u201d},{ \u201citem_description\u201d:\u201cPlaystation 3\u201d, \u201citem_image\u201d:\u201chttp://image.com\u201d, \u201citem_name\u201d:\u201cPlaystation 3\u201d, \u201citem_price\u201d:\u201c150\u201d, \u201citem_quantity\u201d:\u201c2\u201d}]}\u2019/> Before sending the amount value of any transaction, you have to multiply the value with the currency decimal code according to ISO code 3. For example: If the amount value was 500 AED; according to ISO code 3, you should multiply the value with 100 (2 decimal points); so it will be sent in the request as 50000. Another example: If the amount value was 100 JOD; according to ISO code 3, you should multiply the value with 1000 (3 decimal points); so it will be sent in the request as 100000.","title":"Service Request Example"},{"location":"wallets1/#masterpass-hosted","text":"Masterpass Hosted accepts digital wallet transactions without redirection to Masterpass pages and instead; it will be hosted on the Merchant website.","title":"MasterPass Hosted"},{"location":"wallets1/#visacheckout","text":"Visa Checkout is a digital wallet that securely stores the buyer\u2019s credit card details and shipping addresses and information, making shopping through thousands of online Merchants simple and convenient. This service enhances and simplifies the buyer\u2019s online shopping experience. Visa Checkout can be offered through two different integrations: Merchant Hosted Checkout Button. PayFort Hosted Checkout Button.","title":"VisaCheckout"},{"location":"wallets1/#merchant-hosted-checkout-button","text":"","title":"Merchant Hosted Checkout Button"},{"location":"wallets1/#integration-flow_1","text":"This integration allows the you to host Visa Checkout button on his website giving him maximum control over the look and feel and user experience. The following steps describe how this integration works: You should include the following JavaScript in the HTML header of its checkout page. This JavaScript loads the Visa Checkout library and defines handlers to initialization and payment events. <head> <script type=\"text/javascript\"> function onVisaCheckoutReady() { V.init({ apikey : \u201c#API_KEY#\u201d, // This will be provided by PayFort externalProfileId : \u201c#PROFILE_NAME#\u201d, // This will be provided by PayFort settings : { locale : \u201cen_AE\u201d, countryCode : \u201cAE\u201d, // depends on ISO-3166-1 alpha-2 standard codes review : { message : \u201cMerchant defined message\u201d, // buttonAction : \u201cContinue\u201d // The button label }, threeDSSetup : { threeDSActive : \u201cfalse\u201d // true to enable the 3ds false to disable it } }, paymentRequest : { currencyCode : \u201cUSD\u201d, //depends on ISO 4217 standard alpha-3 code values subtotal : \u201c10.00\u201d, // Subtotal of the payment. } }); V.on(\u201cpayment.success\u201d, function(payment) { document.write(JSON.stringify(payment)); // response when received success operation }); V.on(\u201cpayment.cancel\u201d, function(payment) { document.write(JSON.stringify(payment)); // response when cancel operation }); V.on(\u201cpayment.error\u201d, function(payment, error) { document.write(JSON.stringify(payment));// response when received error operation document.write(error); }); } </script> </head> You should use the following class to render Visa Checkout button that a consumer clicks to initiate a payment. <body> <img alt=\u201cVisa Checkout\u201d class=\u201cv-button\u201d role=\u201cbutton\u201d src=\u201chttps://sandbox.secure.checkout.visa.com/wallet-services-web/xo/button.png?cardBrands=VISA,MASTERCARD\u201d /> </body> #### Endpoints Sandbox https://sandbox.secure.checkout.visa.com/wallet-services-web/xo/button.png Live https://secure.checkout.visa.com/wallet-services-web/xo/button.png You should use the following JavaScript to control the operation on Visa Checkout on the website. <body> <script type=\u201ctext/javascript\u201d src=\u201chttps://sandbox-assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js\u201d> </script> </body> #### Endpoints Sandbox https://sandbox-assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js Live https://assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js After completing the previous steps, the consumer clicks on Visa Checkout button, Visa Checkout light box appears and the user complete the checkout process. You will receive a successful response. The response associated with the payment success event returns list of parameters. The Merchant has to collect the value of \u201ccall_id\u201d parameter to be used in the following step. You submit Purchase request to the FORT adding 2 extra parameters: digital-wallet, call_id. Please refer to Merchant Hosted Visa Checkout - Request for more details. Merchants Page should be activated to accept Purchase and Authorization transactions The Merchant system receives the FORT\u2019s purchase request and then uses Visa Checkout update image pixel. Below you can find an example of how to use Visa Checkout update image pixel. Please refer to \u201cVisa checkout PayFort documentation\u201d for more details. <img src=\u201chttps://sandbox.secure.checkout.visa.com/wallet-services-web/payment/updatepaymentinfo.gif?apikey=\u2026&callId=\u2026&currencyCode=USD&total=11.00&subtotal=11.00\u201d /> The following example shows an HTML web page that loads the Visa Checkout library, defines handlers for initialization and payment events, and creates a Visa Checkout button: <html> <head> <script type=\u201ctext/javascript\u201d> function onVisaCheckoutReady() { V.init({ apikey : \u201c#API_KEY#\u201d, // This will be provided by PayFort externalProfileId : \u201c#PROFILE_NAME#\u201d, // This will be provided by PayFort settings : { locale : \u201cen_AE\u201d, countryCode : \u201cAE\u201d, // depends on ISO-3166-1 alpha-2 standard codes review : { message : \u201cMerchant defined message\u201d, // buttonAction : \u201cContinue\u201d // The button label }, threeDSSetup : { threeDSActive : \u201cfalse\u201d // true to enable the 3ds false to disable it } }, paymentRequest : { currencyCode : \u201cUSD\u201d, //depends on ISO 4217 standard alpha-3 code values subtotal : \u201c10.00\u201d, // Subtotal of the payment. } }); V.on(\u201cpayment.success\u201d, function(payment) { document.write(JSON.stringify(payment)); // response when received success operation }); V.on(\u201cpayment.cancel\u201d, function(payment) { document.write(JSON.stringify(payment)); // response when cancel operation }); V.on(\u201cpayment.error\u201d, function(payment, error) { document.write(JSON.stringify(payment));// response when received error operation document.write(error); }); } </script> </head> <body> <img alt=\u201cVisa Checkout\u201d class=\u201cv-button\u201d role=\u201cbutton\"src=\"https://sandbox.secure.checkout.visa.com/wallet-services-web/xo/button.png?cardBrands=VISA,MASTERCARD,DISCOVER,AMEX\u201d /> <script type=\u201ctext/javascript\u201d src=\u201chttps://sandbox-assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js\u201d> </script> </body> </html>","title":"Integration Flow"},{"location":"wallets1/#apple-pay","text":"Apple Pay provides an easy way for users to buy goods and services using iPhone, iPad and Apple Watch through mobile application or website. Checking out is as easy as selecting \u201cApple Pay\u201d and placing a finger on the touch ID of an iPhone, iPad or simply double clicking the side button on the Apple Watch. It\u2019s quick, easy and secure! When using a credit or debit card with Apple Pay, the actual card numbers are not stored on the device, nor on Apple servers. Instead, a unique Device Account Number is assigned, encrypted and securely stored in the Secure Element on your device, where each transaction is authorized with a one-time unique dynamic security code.","title":"Apple Pay"},{"location":"wallets1/#setting-up-apple-pay","text":"Kindly visit developer.apple.com where you will Create a developer account, an Apple Pay Merchant ID and complete the Apple Pay certification (export the payment processing certificate in p12 file) Integrate Apple Pay in your app/website using the Apple Pay documentation found at https://developer.apple.com/apple-pay Submit the encrypted Apple Pay payload to PayFort\u2019s API for decryption / processing. Please contact integration@payfort.com for PayFort\u2019s integration documentation","title":"Setting Up Apple Pay"},{"location":"wallets1/#test-your-wallet-integration","text":"You can checkout this link for testing your wallet integration","title":"Test Your Wallet Integration"},{"location":"wallets1/#go-to-full-api","text":"Check out our full API by visiting this link","title":"Go to Full API"},{"location":"wallets1/#need-further-help","text":"Thanks for using PayFort.com. If you need any help or support, then message our support team at support@payfort.com .","title":"Need further help?"}]}